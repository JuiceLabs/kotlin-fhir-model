package com.juicelabs.fhir.model

import java.io.File
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.junit.jupiter.api.Test

class ActivityDefinitionDataTest : DataTests() {
    @Test
    fun `activitydefinition-predecessor-example 817 Test`() {
        val json = File("./src/test/resources/model/sample_data/activitydefinition-predecessor-example.json").readTextAndClose()
        val obj = mapper.fromJson(json, ActivityDefinition::class.java)
        assertTrue(stringMatch("ActivityDefinition", obj.resourceType))
        assertTrue(stringMatch("referralPrimaryCareMentalHeal", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://motivemi.com/artifacts", obj.url))
        assertTrue(stringMatch("official", obj.identifier[0].use))
        assertTrue(stringMatch("http://motivemi.com/artifacts", obj.identifier[0].system))
        assertTrue(stringMatch("referralPrimaryCareMentalHeal", obj.identifier[0].value))
        assertTrue(stringMatch("1.0.0", obj.version))
        assertTrue(stringMatch("ReferralPrimaryCareMentalHeal", obj.name))
        assertTrue(stringMatch("Referral to Primary Care Ment", obj.title))
        assertTrue(stringMatch("retired", obj.status))
        assertEquals(true, if (obj.experimental != null) obj.experimental else false, "Field: obj.experimental")
        assertEquals("2017-03-03T14:06:00Z", obj.date.toString())
        assertTrue(stringMatch("Motive Medical Intelligence", obj.publisher))
        assertTrue(stringMatch("refer to primary care mental-", obj.description))
        assertTrue(stringMatch("Defines a referral to a menta", obj.purpose))
        assertTrue(stringMatch("This activity definition is u", obj.usage))
        assertEquals("2016-03-12", obj.approvalDate.toString())
        assertEquals("2016-08-15", obj.lastReviewDate.toString())
        assertEquals("2016-01-01", obj.effectivePeriod!!.start.toString())
        assertEquals("2017-12-31", obj.effectivePeriod!!.end.toString())
        assertTrue(stringMatch("http://hl7.org/fhir/usage-con", obj.useContext[0].code.system))
        assertTrue(stringMatch("age", obj.useContext[0].code.code))
        assertTrue(stringMatch("https://meshb.nlm.nih.gov", obj.useContext[0].valueCodeableConcept.coding[0].system))
        assertTrue(stringMatch("D000328", obj.useContext[0].valueCodeableConcept.coding[0].code))
        assertTrue(stringMatch("Adult", obj.useContext[0].valueCodeableConcept.coding[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/usage-con", obj.useContext[1].code.system))
        assertTrue(stringMatch("focus", obj.useContext[1].code.code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.useContext[1].valueCodeableConcept.coding[0].system))
        assertTrue(stringMatch("87512008", obj.useContext[1].valueCodeableConcept.coding[0].code))
        assertTrue(stringMatch("Mild major depression", obj.useContext[1].valueCodeableConcept.coding[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/usage-con", obj.useContext[2].code.system))
        assertTrue(stringMatch("focus", obj.useContext[2].code.code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.useContext[2].valueCodeableConcept.coding[0].system))
        assertTrue(stringMatch("40379007", obj.useContext[2].valueCodeableConcept.coding[0].code))
        assertTrue(stringMatch("Major depression, recurrent, ", obj.useContext[2].valueCodeableConcept.coding[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/usage-con", obj.useContext[3].code.system))
    }

    @Test
    fun `activitydefinition-predecessor-example 818 Test`() {
        val json = File("./src/test/resources/model/sample_data/activitydefinition-predecessor-example.json").readTextAndClose()
        val obj = mapper.fromJson(json, ActivityDefinition::class.java)
        assertTrue(stringMatch("focus", obj.useContext[3].code.code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.useContext[3].valueCodeableConcept.coding[0].system))
        assertTrue(stringMatch("225444004", obj.useContext[3].valueCodeableConcept.coding[0].code))
        assertTrue(stringMatch("At risk for suicide (finding)", obj.useContext[3].valueCodeableConcept.coding[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/usage-con", obj.useContext[4].code.system))
        assertTrue(stringMatch("focus", obj.useContext[4].code.code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.useContext[4].valueCodeableConcept.coding[0].system))
        assertTrue(stringMatch("306206005", obj.useContext[4].valueCodeableConcept.coding[0].code))
        assertTrue(stringMatch("Referral to service (procedur", obj.useContext[4].valueCodeableConcept.coding[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/usage-con", obj.useContext[5].code.system))
        assertTrue(stringMatch("user", obj.useContext[5].code.code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.useContext[5].valueCodeableConcept.coding[0].system))
        assertTrue(stringMatch("309343006", obj.useContext[5].valueCodeableConcept.coding[0].code))
        assertTrue(stringMatch("Physician", obj.useContext[5].valueCodeableConcept.coding[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/usage-con", obj.useContext[6].code.system))
        assertTrue(stringMatch("venue", obj.useContext[6].code.code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.useContext[6].valueCodeableConcept.coding[0].system))
        assertTrue(stringMatch("440655000", obj.useContext[6].valueCodeableConcept.coding[0].code))
        assertTrue(stringMatch("Outpatient environment", obj.useContext[6].valueCodeableConcept.coding[0].display))
        assertTrue(stringMatch("urn:iso:std:iso:3166", obj.jurisdiction[0].coding[0].system))
        assertTrue(stringMatch("US", obj.jurisdiction[0].coding[0].code))
        assertTrue(stringMatch("Mental Health Referral", obj.topic[0].text))
        assertTrue(stringMatch("author", obj.contributor[0].type))
        assertTrue(stringMatch("Motive Medical Intelligence", obj.contributor[0].name))
        assertTrue(stringMatch("phone", obj.contributor[0].contact[0].telecom[0].system))
        assertTrue(stringMatch("415-362-4007", obj.contributor[0].contact[0].telecom[0].value))
        assertTrue(stringMatch("work", obj.contributor[0].contact[0].telecom[0].use))
        assertTrue(stringMatch("email", obj.contributor[0].contact[0].telecom[1].system))
        assertTrue(stringMatch("info@motivemi.com", obj.contributor[0].contact[0].telecom[1].value))
        assertTrue(stringMatch("work", obj.contributor[0].contact[0].telecom[1].use))
        assertTrue(stringMatch("phone", obj.contact[0].telecom[0].system))
        assertTrue(stringMatch("415-362-4007", obj.contact[0].telecom[0].value))
        assertTrue(stringMatch("work", obj.contact[0].telecom[0].use))
        assertTrue(stringMatch("email", obj.contact[0].telecom[1].system))
        assertTrue(stringMatch("info@motivemi.com", obj.contact[0].telecom[1].value))
        assertTrue(stringMatch("work", obj.contact[0].telecom[1].use))
        assertTrue(stringMatch("Â© Copyright 2016 Motive Medic", obj.copyright))
        assertTrue(stringMatch("citation", obj.relatedArtifact[0].type))
        assertTrue(stringMatch("Practice Guideline for the Tr", obj.relatedArtifact[0].display))
        assertTrue(stringMatch("http://psychiatryonline.org/p", obj.relatedArtifact[0].url))
        assertTrue(stringMatch("successor", obj.relatedArtifact[1].type))
        assertTrue(stringMatch("ActivityDefinition/referralPr", obj.relatedArtifact[1].resource!!.reference))
        assertTrue(stringMatch("ReferralRequest", obj.kind))
        assertTrue(stringMatch("http://snomed.info/sct", obj.code!!.coding[0].system))
        assertTrue(stringMatch("306206005", obj.code!!.coding[0].code))
        assertTrue(stringMatch("Referral to service (procedur", obj.code!!.text))
        assertTrue(stringMatch("practitioner", obj.participant[0].type))
    }

    @Test
    fun `activitydefinition-procedurerequest-example 819 Test`() {
        val json = File("./src/test/resources/model/sample_data/activitydefinition-procedurerequest-example.json").readTextAndClose()
        val obj = mapper.fromJson(json, ActivityDefinition::class.java)
        assertTrue(stringMatch("ActivityDefinition", obj.resourceType))
        assertTrue(stringMatch("heart-valve-replacement", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("draft", obj.status))
        assertTrue(stringMatch("Heart valve replacement", obj.description))
        assertTrue(stringMatch("Describes the proposal to per", obj.purpose))
        assertTrue(stringMatch("This activity definition is u", obj.usage))
        assertTrue(stringMatch("http://hl7.org/fhir/usage-con", obj.useContext[0].code.system))
        assertTrue(stringMatch("age", obj.useContext[0].code.code))
        assertTrue(stringMatch("https://meshb.nlm.nih.gov", obj.useContext[0].valueCodeableConcept.coding[0].system))
        assertTrue(stringMatch("D000328", obj.useContext[0].valueCodeableConcept.coding[0].code))
        assertTrue(stringMatch("Adult", obj.useContext[0].valueCodeableConcept.coding[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/usage-con", obj.useContext[1].code.system))
        assertTrue(stringMatch("user", obj.useContext[1].code.code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.useContext[1].valueCodeableConcept.coding[0].system))
        assertTrue(stringMatch("309343006", obj.useContext[1].valueCodeableConcept.coding[0].code))
        assertTrue(stringMatch("Physician", obj.useContext[1].valueCodeableConcept.coding[0].display))
        assertTrue(stringMatch("http://snomed.info/sct", obj.topic[0].coding[0].system))
        assertTrue(stringMatch("34068001", obj.topic[0].coding[0].code))
        assertTrue(stringMatch("Heart valve replacement", obj.topic[0].coding[0].display))
        assertTrue(stringMatch("ProcedureRequest", obj.kind))
        assertTrue(stringMatch("http://snomed.info/sct", obj.code!!.coding[0].system))
        assertTrue(stringMatch("34068001", obj.code!!.coding[0].code))
    }

    @Test
    fun `activitydefinition-procedurerequest-example 820 Test`() {
        val json = File("./src/test/resources/model/sample_data/activitydefinition-procedurerequest-example.json").readTextAndClose()
        val obj = mapper.fromJson(json, ActivityDefinition::class.java)
        assertTrue(stringMatch("Heart valve replacement", obj.code!!.coding[0].display))
        assertTrue(stringMatch("Location/1", obj.location!!.reference))
        assertTrue(stringMatch("practitioner", obj.participant[0].type))
        assertTrue(stringMatch("http://nucc.org/provider-taxo", obj.participant[0].role!!.coding[0].system))
        assertTrue(stringMatch("207RI0011X", obj.participant[0].role!!.coding[0].code))
        assertTrue(stringMatch("Interventional Cardiology", obj.participant[0].role!!.coding[0].display))
        assertTrue(stringMatch("Interventional Cardiology", obj.participant[0].role!!.text))
        assertTrue(stringMatch("http://snomed.info/sct", obj.bodySite[0].coding[0].system))
        assertTrue(stringMatch("17401000", obj.bodySite[0].coding[0].code))
        assertTrue(stringMatch("Heart valve structure", obj.bodySite[0].coding[0].display))
    }

    @Test
    fun `activitydefinition-medicationorder-example 821 Test`() {
        val json = File("./src/test/resources/model/sample_data/activitydefinition-medicationorder-example.json").readTextAndClose()
        val obj = mapper.fromJson(json, ActivityDefinition::class.java)
        assertTrue(stringMatch("ActivityDefinition", obj.resourceType))
        assertTrue(stringMatch("citalopramPrescription", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("Medication", (obj.contained[0] as Medication).resourceType))
        assertTrue(stringMatch("citalopramMedication", (obj.contained[0] as Medication).id))
        assertTrue(stringMatch("http://www.nlm.nih.gov/resear", (obj.contained[0] as Medication).code!!.coding[0].system))
        assertTrue(stringMatch("200371", (obj.contained[0] as Medication).code!!.coding[0].code))
        assertTrue(stringMatch("citalopram", (obj.contained[0] as Medication).code!!.text))
        assertTrue(stringMatch("http://snomed.info/sct", (obj.contained[0] as Medication).form!!.coding[0].system))
        assertTrue(stringMatch("385055001", (obj.contained[0] as Medication).form!!.coding[0].code))
        assertTrue(stringMatch("Tablet dose form", (obj.contained[0] as Medication).form!!.coding[0].display))
        assertTrue(stringMatch("Tablet dose form", (obj.contained[0] as Medication).form!!.text))
        assertTrue(stringMatch("#citalopramSubstance", (obj.contained[0] as Medication).ingredient[0].itemReference.reference))
        assertTrue(stringMatch("%.2f".format(20f), "%.2f".format((obj.contained[0] as Medication).ingredient[0].amount!!.numerator!!.value)))
        assertTrue(stringMatch("mg", (obj.contained[0] as Medication).ingredient[0].amount!!.numerator!!.unit))
        assertTrue(stringMatch("%.2f".format(1f), "%.2f".format((obj.contained[0] as Medication).ingredient[0].amount!!.denominator!!.value)))
        assertTrue(stringMatch("{tbl}", (obj.contained[0] as Medication).ingredient[0].amount!!.denominator!!.unit))
        assertTrue(stringMatch("Substance", (obj.contained[1] as Substance).resourceType))
        assertTrue(stringMatch("citalopramSubstance", (obj.contained[1] as Substance).id))
        assertTrue(stringMatch("http://www.nlm.nih.gov/resear", (obj.contained[1] as Substance).code.coding[0].system))
        assertTrue(stringMatch("2556", (obj.contained[1] as Substance).code.coding[0].code))
        assertTrue(stringMatch("citalopram", (obj.contained[1] as Substance).code.text))
        assertTrue(stringMatch("http://motivemi.com/artifacts", obj.url))
        assertTrue(stringMatch("official", obj.identifier[0].use))
        assertTrue(stringMatch("http://motivemi.com", obj.identifier[0].system))
        assertTrue(stringMatch("citalopramPrescription", obj.identifier[0].value))
        assertTrue(stringMatch("1.0.0", obj.version))
        assertTrue(stringMatch("CitalopramPrescription", obj.name))
        assertTrue(stringMatch("Citalopram Prescription", obj.title))
        assertTrue(stringMatch("active", obj.status))
        assertEquals(true, if (obj.experimental != null) obj.experimental else false, "Field: obj.experimental")
        assertEquals("2015-08-15", obj.date.toString())
        assertTrue(stringMatch("Motive Medical Intelligence", obj.publisher))
        assertTrue(stringMatch("Citalopram 20 mg tablet 1 tab", obj.description))
        assertTrue(stringMatch("Defines a guideline supported", obj.purpose))
        assertTrue(stringMatch("This activity definition is u", obj.usage))
        assertEquals("2016-03-12", obj.approvalDate.toString())
        assertEquals("2016-08-15", obj.lastReviewDate.toString())
        assertEquals("2016-01-01", obj.effectivePeriod!!.start.toString())
        assertEquals("2017-12-31", obj.effectivePeriod!!.end.toString())
        assertTrue(stringMatch("http://hl7.org/fhir/usage-con", obj.useContext[0].code.system))
        assertTrue(stringMatch("age", obj.useContext[0].code.code))
        assertTrue(stringMatch("https://meshb.nlm.nih.gov", obj.useContext[0].valueCodeableConcept.coding[0].system))
        assertTrue(stringMatch("D000328", obj.useContext[0].valueCodeableConcept.coding[0].code))
        assertTrue(stringMatch("Adult", obj.useContext[0].valueCodeableConcept.coding[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/usage-con", obj.useContext[1].code.system))
        assertTrue(stringMatch("focus", obj.useContext[1].code.code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.useContext[1].valueCodeableConcept.coding[0].system))
        assertTrue(stringMatch("87512008", obj.useContext[1].valueCodeableConcept.coding[0].code))
        assertTrue(stringMatch("Mild major depression", obj.useContext[1].valueCodeableConcept.coding[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/usage-con", obj.useContext[2].code.system))
        assertTrue(stringMatch("focus", obj.useContext[2].code.code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.useContext[2].valueCodeableConcept.coding[0].system))
        assertTrue(stringMatch("40379007", obj.useContext[2].valueCodeableConcept.coding[0].code))
        assertTrue(stringMatch("Major depression, recurrent, ", obj.useContext[2].valueCodeableConcept.coding[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/usage-con", obj.useContext[3].code.system))
        assertTrue(stringMatch("focus", obj.useContext[3].code.code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.useContext[3].valueCodeableConcept.coding[0].system))
        assertTrue(stringMatch("225444004", obj.useContext[3].valueCodeableConcept.coding[0].code))
        assertTrue(stringMatch("At risk for suicide (finding)", obj.useContext[3].valueCodeableConcept.coding[0].display))
    }

    @Test
    fun `activitydefinition-medicationorder-example 822 Test`() {
        val json = File("./src/test/resources/model/sample_data/activitydefinition-medicationorder-example.json").readTextAndClose()
        val obj = mapper.fromJson(json, ActivityDefinition::class.java)
        assertTrue(stringMatch("http://hl7.org/fhir/usage-con", obj.useContext[4].code.system))
        assertTrue(stringMatch("focus", obj.useContext[4].code.code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.useContext[4].valueCodeableConcept.coding[0].system))
        assertTrue(stringMatch("306206005", obj.useContext[4].valueCodeableConcept.coding[0].code))
        assertTrue(stringMatch("Referral to service (procedur", obj.useContext[4].valueCodeableConcept.coding[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/usage-con", obj.useContext[5].code.system))
        assertTrue(stringMatch("user", obj.useContext[5].code.code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.useContext[5].valueCodeableConcept.coding[0].system))
        assertTrue(stringMatch("309343006", obj.useContext[5].valueCodeableConcept.coding[0].code))
        assertTrue(stringMatch("Physician", obj.useContext[5].valueCodeableConcept.coding[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/usage-con", obj.useContext[6].code.system))
        assertTrue(stringMatch("venue", obj.useContext[6].code.code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.useContext[6].valueCodeableConcept.coding[0].system))
        assertTrue(stringMatch("440655000", obj.useContext[6].valueCodeableConcept.coding[0].code))
        assertTrue(stringMatch("Outpatient environment", obj.useContext[6].valueCodeableConcept.coding[0].display))
        assertTrue(stringMatch("urn:iso:std:iso:3166", obj.jurisdiction[0].coding[0].system))
        assertTrue(stringMatch("US", obj.jurisdiction[0].coding[0].code))
        assertTrue(stringMatch("Mental Health Treatment", obj.topic[0].text))
        assertTrue(stringMatch("author", obj.contributor[0].type))
        assertTrue(stringMatch("Motive Medical Intelligence", obj.contributor[0].name))
        assertTrue(stringMatch("phone", obj.contributor[0].contact[0].telecom[0].system))
        assertTrue(stringMatch("415-362-4007", obj.contributor[0].contact[0].telecom[0].value))
        assertTrue(stringMatch("work", obj.contributor[0].contact[0].telecom[0].use))
        assertTrue(stringMatch("email", obj.contributor[0].contact[0].telecom[1].system))
        assertTrue(stringMatch("info@motivemi.com", obj.contributor[0].contact[0].telecom[1].value))
        assertTrue(stringMatch("work", obj.contributor[0].contact[0].telecom[1].use))
        assertTrue(stringMatch("phone", obj.contact[0].telecom[0].system))
        assertTrue(stringMatch("415-362-4007", obj.contact[0].telecom[0].value))
        assertTrue(stringMatch("work", obj.contact[0].telecom[0].use))
        assertTrue(stringMatch("email", obj.contact[0].telecom[1].system))
        assertTrue(stringMatch("info@motivemi.com", obj.contact[0].telecom[1].value))
        assertTrue(stringMatch("work", obj.contact[0].telecom[1].use))
        assertTrue(stringMatch("Â© Copyright 2016 Motive Medic", obj.copyright))
        assertTrue(stringMatch("citation", obj.relatedArtifact[0].type))
        assertTrue(stringMatch("Practice Guideline for the Tr", obj.relatedArtifact[0].display))
        assertTrue(stringMatch("http://psychiatryonline.org/p", obj.relatedArtifact[0].url))
        assertTrue(stringMatch("composed-of", obj.relatedArtifact[1].type))
        assertTrue(stringMatch("#citalopramMedication", obj.relatedArtifact[1].resource!!.reference))
        assertTrue(stringMatch("MedicationRequest", obj.kind))
        assertTrue(stringMatch("#citalopramMedication", obj.productReference!!.reference))
        assertTrue(stringMatch("1 tablet oral 1 time daily", obj.dosage[0].text))
        assertEquals(1, obj.dosage[0].timing!!.repeat!!.frequency)
        assertTrue(stringMatch("%.2f".format(1f), "%.2f".format(obj.dosage[0].timing!!.repeat!!.period)))
        assertTrue(stringMatch("d", obj.dosage[0].timing!!.repeat!!.periodUnit))
        assertTrue(stringMatch("26643006", obj.dosage[0].route!!.coding[0].code))
        assertTrue(stringMatch("Oral route (qualifier value)", obj.dosage[0].route!!.coding[0].display))
        assertTrue(stringMatch("Oral route (qualifier value)", obj.dosage[0].route!!.text))
        assertTrue(stringMatch("%.2f".format(1f), "%.2f".format(obj.dosage[0].doseQuantity!!.value)))
        assertTrue(stringMatch("{tbl}", obj.dosage[0].doseQuantity!!.unit))
        assertTrue(stringMatch("dispenseRequest.numberOfRepea", obj.dynamicValue[0].description))
        assertTrue(stringMatch("dispenseRequest.numberOfRepea", obj.dynamicValue[0].path))
        assertTrue(stringMatch("text/cql", obj.dynamicValue[0].language))
        assertTrue(stringMatch("3", obj.dynamicValue[0].expression))
        assertTrue(stringMatch("dispenseRequest.quantity is t", obj.dynamicValue[1].description))
        assertTrue(stringMatch("dispenseRequest.quantity", obj.dynamicValue[1].path))
        assertTrue(stringMatch("text/cql", obj.dynamicValue[1].language))
        assertTrue(stringMatch("30 '{tbl}'", obj.dynamicValue[1].expression))
    }

    @Test
    fun `activitydefinition-example 823 Test`() {
        val json = File("./src/test/resources/model/sample_data/activitydefinition-example.json").readTextAndClose()
        val obj = mapper.fromJson(json, ActivityDefinition::class.java)
        assertTrue(stringMatch("ActivityDefinition", obj.resourceType))
        assertTrue(stringMatch("referralPrimaryCareMentalHeal", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://motivemi.com/artifacts", obj.url))
        assertTrue(stringMatch("official", obj.identifier[0].use))
        assertTrue(stringMatch("http://motivemi.com/artifacts", obj.identifier[0].system))
        assertTrue(stringMatch("referralPrimaryCareMentalHeal", obj.identifier[0].value))
        assertTrue(stringMatch("1.1.0", obj.version))
        assertTrue(stringMatch("ReferralPrimaryCareMentalHeal", obj.name))
        assertTrue(stringMatch("Referral to Primary Care Ment", obj.title))
        assertTrue(stringMatch("active", obj.status))
        assertEquals(true, if (obj.experimental != null) obj.experimental else false, "Field: obj.experimental")
        assertEquals("2017-03-03T14:06:00Z", obj.date.toString())
    }

    @Test
    fun `activitydefinition-example 824 Test`() {
        val json = File("./src/test/resources/model/sample_data/activitydefinition-example.json").readTextAndClose()
        val obj = mapper.fromJson(json, ActivityDefinition::class.java)
        assertTrue(stringMatch("Motive Medical Intelligence", obj.publisher))
        assertTrue(stringMatch("refer to primary care mental-", obj.description))
        assertTrue(stringMatch("Defines a referral to a menta", obj.purpose))
        assertTrue(stringMatch("This activity definition is u", obj.usage))
        assertEquals("2017-03-01", obj.approvalDate.toString())
        assertEquals("2017-03-01", obj.lastReviewDate.toString())
        assertEquals("2017-03-01", obj.effectivePeriod!!.start.toString())
        assertEquals("2017-12-31", obj.effectivePeriod!!.end.toString())
        assertTrue(stringMatch("http://hl7.org/fhir/usage-con", obj.useContext[0].code.system))
        assertTrue(stringMatch("age", obj.useContext[0].code.code))
        assertTrue(stringMatch("https://meshb.nlm.nih.gov", obj.useContext[0].valueCodeableConcept.coding[0].system))
        assertTrue(stringMatch("D000328", obj.useContext[0].valueCodeableConcept.coding[0].code))
        assertTrue(stringMatch("Adult", obj.useContext[0].valueCodeableConcept.coding[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/usage-con", obj.useContext[1].code.system))
        assertTrue(stringMatch("focus", obj.useContext[1].code.code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.useContext[1].valueCodeableConcept.coding[0].system))
        assertTrue(stringMatch("87512008", obj.useContext[1].valueCodeableConcept.coding[0].code))
        assertTrue(stringMatch("Mild major depression", obj.useContext[1].valueCodeableConcept.coding[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/usage-con", obj.useContext[2].code.system))
        assertTrue(stringMatch("focus", obj.useContext[2].code.code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.useContext[2].valueCodeableConcept.coding[0].system))
        assertTrue(stringMatch("40379007", obj.useContext[2].valueCodeableConcept.coding[0].code))
        assertTrue(stringMatch("Major depression, recurrent, ", obj.useContext[2].valueCodeableConcept.coding[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/usage-con", obj.useContext[3].code.system))
        assertTrue(stringMatch("focus", obj.useContext[3].code.code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.useContext[3].valueCodeableConcept.coding[0].system))
        assertTrue(stringMatch("225444004", obj.useContext[3].valueCodeableConcept.coding[0].code))
        assertTrue(stringMatch("At risk for suicide (finding)", obj.useContext[3].valueCodeableConcept.coding[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/usage-con", obj.useContext[4].code.system))
        assertTrue(stringMatch("focus", obj.useContext[4].code.code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.useContext[4].valueCodeableConcept.coding[0].system))
        assertTrue(stringMatch("306206005", obj.useContext[4].valueCodeableConcept.coding[0].code))
        assertTrue(stringMatch("Referral to service (procedur", obj.useContext[4].valueCodeableConcept.coding[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/usage-con", obj.useContext[5].code.system))
        assertTrue(stringMatch("user", obj.useContext[5].code.code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.useContext[5].valueCodeableConcept.coding[0].system))
        assertTrue(stringMatch("309343006", obj.useContext[5].valueCodeableConcept.coding[0].code))
        assertTrue(stringMatch("Physician", obj.useContext[5].valueCodeableConcept.coding[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/usage-con", obj.useContext[6].code.system))
        assertTrue(stringMatch("venue", obj.useContext[6].code.code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.useContext[6].valueCodeableConcept.coding[0].system))
        assertTrue(stringMatch("440655000", obj.useContext[6].valueCodeableConcept.coding[0].code))
        assertTrue(stringMatch("Outpatient environment", obj.useContext[6].valueCodeableConcept.coding[0].display))
        assertTrue(stringMatch("urn:iso:std:iso:3166", obj.jurisdiction[0].coding[0].system))
        assertTrue(stringMatch("US", obj.jurisdiction[0].coding[0].code))
        assertTrue(stringMatch("Mental Health Referral", obj.topic[0].text))
        assertTrue(stringMatch("author", obj.contributor[0].type))
        assertTrue(stringMatch("Motive Medical Intelligence", obj.contributor[0].name))
        assertTrue(stringMatch("phone", obj.contributor[0].contact[0].telecom[0].system))
        assertTrue(stringMatch("415-362-4007", obj.contributor[0].contact[0].telecom[0].value))
        assertTrue(stringMatch("work", obj.contributor[0].contact[0].telecom[0].use))
        assertTrue(stringMatch("email", obj.contributor[0].contact[0].telecom[1].system))
        assertTrue(stringMatch("info@motivemi.com", obj.contributor[0].contact[0].telecom[1].value))
        assertTrue(stringMatch("work", obj.contributor[0].contact[0].telecom[1].use))
        assertTrue(stringMatch("phone", obj.contact[0].telecom[0].system))
        assertTrue(stringMatch("415-362-4007", obj.contact[0].telecom[0].value))
        assertTrue(stringMatch("work", obj.contact[0].telecom[0].use))
        assertTrue(stringMatch("email", obj.contact[0].telecom[1].system))
        assertTrue(stringMatch("info@motivemi.com", obj.contact[0].telecom[1].value))
        assertTrue(stringMatch("work", obj.contact[0].telecom[1].use))
        assertTrue(stringMatch("Â© Copyright 2016 Motive Medic", obj.copyright))
        assertTrue(stringMatch("citation", obj.relatedArtifact[0].type))
        assertTrue(stringMatch("Practice Guideline for the Tr", obj.relatedArtifact[0].display))
        assertTrue(stringMatch("http://psychiatryonline.org/p", obj.relatedArtifact[0].url))
        assertTrue(stringMatch("predecessor", obj.relatedArtifact[1].type))
        assertTrue(stringMatch("ActivityDefinition/referralPr", obj.relatedArtifact[1].resource!!.reference))
        assertTrue(stringMatch("ReferralRequest", obj.kind))
        assertTrue(stringMatch("http://snomed.info/sct", obj.code!!.coding[0].system))
        assertTrue(stringMatch("306206005", obj.code!!.coding[0].code))
        assertTrue(stringMatch("Referral to service (procedur", obj.code!!.text))
        assertTrue(stringMatch("practitioner", obj.participant[0].type))
    }

    @Test
    fun `activitydefinition-supplyrequest-example 825 Test`() {
        val json = File("./src/test/resources/model/sample_data/activitydefinition-supplyrequest-example.json").readTextAndClose()
        val obj = mapper.fromJson(json, ActivityDefinition::class.java)
    }

    @Test
    fun `activitydefinition-supplyrequest-example 826 Test`() {
        val json = File("./src/test/resources/model/sample_data/activitydefinition-supplyrequest-example.json").readTextAndClose()
        val obj = mapper.fromJson(json, ActivityDefinition::class.java)
        assertTrue(stringMatch("ActivityDefinition", obj.resourceType))
        assertTrue(stringMatch("blood-tubes-supply", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("draft", obj.status))
        assertTrue(stringMatch("10 Blood collect tubes blue c", obj.description))
        assertTrue(stringMatch("Describes a request for 10 Bl", obj.purpose))
        assertTrue(stringMatch("This activity definition is u", obj.usage))
        assertTrue(stringMatch("SupplyRequest", obj.kind))
        assertTrue(stringMatch("BlueTubes", obj.code!!.coding[0].code))
        assertTrue(stringMatch("Blood collect tubes blue cap", obj.code!!.coding[0].display))
        assertTrue(stringMatch("%.2f".format(10f), "%.2f".format(obj.quantity!!.value)))
        assertTrue(stringMatch("StructureMap/supplyrequest-tr", obj.transform!!.reference))
    }
}
