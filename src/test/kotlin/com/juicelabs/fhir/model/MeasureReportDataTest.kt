package com.juicelabs.fhir.model

import java.io.File
import java.lang.SuppressWarnings
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.junit.jupiter.api.Test

class MeasureReportDataTest : DataTests() {
    @Test
    fun `measurereport-cms146-cat1-example 323 Test`() {
        val json = File("./src/test/resources/model/sample_data/measurereport-cms146-cat1-example.json").readTextAndClose()
        val obj = mapper.fromJson(json, MeasureReport::class.java)
        assertTrue(stringMatch("MeasureReport", obj.resourceType))
        assertTrue(stringMatch("measurereport-cms146-cat1-exa", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("Organization", (obj.contained[0] as Organization).resourceType))
        assertTrue(stringMatch("reporter", (obj.contained[0] as Organization).id))
        assertTrue(stringMatch("Good Health Hospital", (obj.contained[0] as Organization).name))
        assertTrue(stringMatch("measurereport-cms146-cat1-exa", obj.identifier!!.value))
        assertTrue(stringMatch("complete", obj.status))
        assertTrue(stringMatch("individual", obj.type))
        assertTrue(stringMatch("Measure/CMS146", obj.measure.reference))
        assertTrue(stringMatch("Patient/123", obj.patient!!.reference))
        assertTrue(stringMatch("#reporter", obj.reportingOrganization!!.reference))
        assertTrue(stringMatch("2014-01-01", obj.period.start))
        assertTrue(stringMatch("2014-03-31", obj.period.end))
        assertTrue(stringMatch("CMS146-group-1", obj.group[0].identifier.value))
        assertTrue(stringMatch("initial-population", obj.group[0].population[0].code!!.coding[0].code))
        assertEquals(1, obj.group[0].population[0].count)
        assertTrue(stringMatch("numerator", obj.group[0].population[1].code!!.coding[0].code))
        assertEquals(1, obj.group[0].population[1].count)
        assertTrue(stringMatch("denominator", obj.group[0].population[2].code!!.coding[0].code))
        assertEquals(1, obj.group[0].population[2].count)
        assertTrue(stringMatch("denominator-exclusion", obj.group[0].population[3].code!!.coding[0].code))
        assertEquals(0, obj.group[0].population[3].count)
        assertTrue(stringMatch("stratifier-ages-up-to-9", obj.group[0].stratifier[0].identifier!!.value))
        assertTrue(stringMatch("true", obj.group[0].stratifier[0].stratum[0].value))
        assertTrue(stringMatch("initial-population", obj.group[0].stratifier[0].stratum[0].population[0].code!!.coding[0].code))
        assertEquals(1, obj.group[0].stratifier[0].stratum[0].population[0].count)
        assertTrue(stringMatch("numerator", obj.group[0].stratifier[0].stratum[0].population[1].code!!.coding[0].code))
        assertEquals(1, obj.group[0].stratifier[0].stratum[0].population[1].count)
        assertTrue(stringMatch("denominator", obj.group[0].stratifier[0].stratum[0].population[2].code!!.coding[0].code))
        assertEquals(1, obj.group[0].stratifier[0].stratum[0].population[2].count)
        assertTrue(stringMatch("denominator-exclusion", obj.group[0].stratifier[0].stratum[0].population[3].code!!.coding[0].code))
        assertEquals(0, obj.group[0].stratifier[0].stratum[0].population[3].count)
        assertTrue(stringMatch("false", obj.group[0].stratifier[0].stratum[1].value))
        assertTrue(stringMatch("initial-population", obj.group[0].stratifier[0].stratum[1].population[0].code!!.coding[0].code))
        assertEquals(0, obj.group[0].stratifier[0].stratum[1].population[0].count)
        assertTrue(stringMatch("numerator", obj.group[0].stratifier[0].stratum[1].population[1].code!!.coding[0].code))
        assertEquals(0, obj.group[0].stratifier[0].stratum[1].population[1].count)
        assertTrue(stringMatch("denominator", obj.group[0].stratifier[0].stratum[1].population[2].code!!.coding[0].code))
        assertEquals(0, obj.group[0].stratifier[0].stratum[1].population[2].count)
        assertTrue(stringMatch("denominator-exclusion", obj.group[0].stratifier[0].stratum[1].population[3].code!!.coding[0].code))
        assertEquals(0, obj.group[0].stratifier[0].stratum[1].population[3].count)
        assertTrue(stringMatch("stratifier-ages-10-plus", obj.group[0].stratifier[1].identifier!!.value))
        assertTrue(stringMatch("true", obj.group[0].stratifier[1].stratum[0].value))
        assertTrue(stringMatch("initial-population", obj.group[0].stratifier[1].stratum[0].population[0].code!!.coding[0].code))
        assertEquals(0, obj.group[0].stratifier[1].stratum[0].population[0].count)
        assertTrue(stringMatch("numerator", obj.group[0].stratifier[1].stratum[0].population[1].code!!.coding[0].code))
        assertEquals(0, obj.group[0].stratifier[1].stratum[0].population[1].count)
        assertTrue(stringMatch("denominator", obj.group[0].stratifier[1].stratum[0].population[2].code!!.coding[0].code))
        assertEquals(0, obj.group[0].stratifier[1].stratum[0].population[2].count)
        assertTrue(stringMatch("denominator-exclusion", obj.group[0].stratifier[1].stratum[0].population[3].code!!.coding[0].code))
        assertEquals(0, obj.group[0].stratifier[1].stratum[0].population[3].count)
        assertTrue(stringMatch("false", obj.group[0].stratifier[1].stratum[1].value))
        assertTrue(stringMatch("initial-population", obj.group[0].stratifier[1].stratum[1].population[0].code!!.coding[0].code))
        assertEquals(1, obj.group[0].stratifier[1].stratum[1].population[0].count)
        assertTrue(stringMatch("numerator", obj.group[0].stratifier[1].stratum[1].population[1].code!!.coding[0].code))
        assertEquals(1, obj.group[0].stratifier[1].stratum[1].population[1].count)
        assertTrue(stringMatch("denominator", obj.group[0].stratifier[1].stratum[1].population[2].code!!.coding[0].code))
        assertEquals(1, obj.group[0].stratifier[1].stratum[1].population[2].count)
        assertTrue(stringMatch("denominator-exclusion", obj.group[0].stratifier[1].stratum[1].population[3].code!!.coding[0].code))
        assertEquals(0, obj.group[0].stratifier[1].stratum[1].population[3].count)
        assertTrue(stringMatch("stratifier-gender", obj.group[0].stratifier[2].identifier!!.value))
        assertTrue(stringMatch("male", obj.group[0].stratifier[2].stratum[0].value))
        assertTrue(stringMatch("initial-population", obj.group[0].stratifier[2].stratum[0].population[0].code!!.coding[0].code))
        assertEquals(1, obj.group[0].stratifier[2].stratum[0].population[0].count)
        assertTrue(stringMatch("numerator", obj.group[0].stratifier[2].stratum[0].population[1].code!!.coding[0].code))
        assertEquals(1, obj.group[0].stratifier[2].stratum[0].population[1].count)
        assertTrue(stringMatch("denominator", obj.group[0].stratifier[2].stratum[0].population[2].code!!.coding[0].code))
        assertEquals(1, obj.group[0].stratifier[2].stratum[0].population[2].count)
        assertTrue(stringMatch("denominator-exclusion", obj.group[0].stratifier[2].stratum[0].population[3].code!!.coding[0].code))
        assertEquals(0, obj.group[0].stratifier[2].stratum[0].population[3].count)
        assertTrue(stringMatch("female", obj.group[0].stratifier[2].stratum[1].value))
        assertTrue(stringMatch("initial-population", obj.group[0].stratifier[2].stratum[1].population[0].code!!.coding[0].code))
        assertEquals(0, obj.group[0].stratifier[2].stratum[1].population[0].count)
        assertTrue(stringMatch("numerator", obj.group[0].stratifier[2].stratum[1].population[1].code!!.coding[0].code))
        assertEquals(0, obj.group[0].stratifier[2].stratum[1].population[1].count)
        assertTrue(stringMatch("denominator", obj.group[0].stratifier[2].stratum[1].population[2].code!!.coding[0].code))
        assertEquals(0, obj.group[0].stratifier[2].stratum[1].population[2].count)
        assertTrue(stringMatch("denominator-exclusion", obj.group[0].stratifier[2].stratum[1].population[3].code!!.coding[0].code))
    }

    @Test
    fun `measurereport-cms146-cat1-example 324 Test`() {
        val json = File("./src/test/resources/model/sample_data/measurereport-cms146-cat1-example.json").readTextAndClose()
        val obj = mapper.fromJson(json, MeasureReport::class.java)
        assertEquals(0, obj.group[0].stratifier[2].stratum[1].population[3].count)
        assertTrue(stringMatch("other", obj.group[0].stratifier[2].stratum[2].value))
        assertTrue(stringMatch("initial-population", obj.group[0].stratifier[2].stratum[2].population[0].code!!.coding[0].code))
        assertEquals(0, obj.group[0].stratifier[2].stratum[2].population[0].count)
        assertTrue(stringMatch("numerator", obj.group[0].stratifier[2].stratum[2].population[1].code!!.coding[0].code))
        assertEquals(0, obj.group[0].stratifier[2].stratum[2].population[1].count)
        assertTrue(stringMatch("denominator", obj.group[0].stratifier[2].stratum[2].population[2].code!!.coding[0].code))
        assertEquals(0, obj.group[0].stratifier[2].stratum[2].population[2].count)
        assertTrue(stringMatch("denominator-exclusion", obj.group[0].stratifier[2].stratum[2].population[3].code!!.coding[0].code))
        assertEquals(0, obj.group[0].stratifier[2].stratum[2].population[3].count)
        assertTrue(stringMatch("unknown", obj.group[0].stratifier[2].stratum[3].value))
        assertTrue(stringMatch("initial-population", obj.group[0].stratifier[2].stratum[3].population[0].code!!.coding[0].code))
        assertEquals(0, obj.group[0].stratifier[2].stratum[3].population[0].count)
        assertTrue(stringMatch("numerator", obj.group[0].stratifier[2].stratum[3].population[1].code!!.coding[0].code))
        assertEquals(0, obj.group[0].stratifier[2].stratum[3].population[1].count)
        assertTrue(stringMatch("denominator", obj.group[0].stratifier[2].stratum[3].population[2].code!!.coding[0].code))
        assertEquals(0, obj.group[0].stratifier[2].stratum[3].population[2].count)
        assertTrue(stringMatch("denominator-exclusion", obj.group[0].stratifier[2].stratum[3].population[3].code!!.coding[0].code))
        assertEquals(0, obj.group[0].stratifier[2].stratum[3].population[3].count)
        assertTrue(stringMatch("Bundle/456", obj.evaluatedResources!!.reference))
    }

    fun `measurereport-cms146-cat1-example Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `measurereport-cms146-cat2-example 325 Test`() {
        val json = File("./src/test/resources/model/sample_data/measurereport-cms146-cat2-example.json").readTextAndClose()
        val obj = mapper.fromJson(json, MeasureReport::class.java)
        assertTrue(stringMatch("MeasureReport", obj.resourceType))
        assertTrue(stringMatch("measurereport-cms146-cat2-exa", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("Organization", (obj.contained[0] as Organization).resourceType))
        assertTrue(stringMatch("reporter", (obj.contained[0] as Organization).id))
        assertTrue(stringMatch("Good Health Hospital", (obj.contained[0] as Organization).name))
        assertTrue(stringMatch("measurereport-cms146-cat2-exa", obj.identifier!!.value))
        assertTrue(stringMatch("complete", obj.status))
        assertTrue(stringMatch("patient-list", obj.type))
        assertTrue(stringMatch("Measure/CMS146", obj.measure.reference))
        assertTrue(stringMatch("#reporter", obj.reportingOrganization!!.reference))
        assertTrue(stringMatch("2014-01-01", obj.period.start))
        assertTrue(stringMatch("2014-03-31", obj.period.end))
        assertTrue(stringMatch("CMS146-group-1", obj.group[0].identifier.value))
        assertTrue(stringMatch("initial-population", obj.group[0].population[0].code!!.coding[0].code))
        assertEquals(500, obj.group[0].population[0].count)
        assertTrue(stringMatch("List/CMS146-initial-populatio", obj.group[0].population[0].patients!!.reference))
        assertTrue(stringMatch("numerator", obj.group[0].population[1].code!!.coding[0].code))
        assertEquals(200, obj.group[0].population[1].count)
        assertTrue(stringMatch("List/CMS146-numerator", obj.group[0].population[1].patients!!.reference))
        assertTrue(stringMatch("denominator", obj.group[0].population[2].code!!.coding[0].code))
        assertEquals(500, obj.group[0].population[2].count)
        assertTrue(stringMatch("List/CMS146-denominator", obj.group[0].population[2].patients!!.reference))
        assertTrue(stringMatch("denominator-exclusion", obj.group[0].population[3].code!!.coding[0].code))
        assertEquals(100, obj.group[0].population[3].count)
        assertTrue(stringMatch("List/CMS146-denominator-exclu", obj.group[0].population[3].patients!!.reference))
        assertTrue(stringMatch("stratifier-ages-up-to-9", obj.group[0].stratifier[0].identifier!!.value))
        assertTrue(stringMatch("true", obj.group[0].stratifier[0].stratum[0].value))
        assertTrue(stringMatch("initial-population", obj.group[0].stratifier[0].stratum[0].population[0].code!!.coding[0].code))
        assertEquals(250, obj.group[0].stratifier[0].stratum[0].population[0].count)
        assertTrue(stringMatch("List/CMS146-stratifier-ages-u", obj.group[0].stratifier[0].stratum[0].population[0].patients!!.reference))
        assertTrue(stringMatch("numerator", obj.group[0].stratifier[0].stratum[0].population[1].code!!.coding[0].code))
        assertEquals(100, obj.group[0].stratifier[0].stratum[0].population[1].count)
        assertTrue(stringMatch("List/CMS146-stratifier-ages-u", obj.group[0].stratifier[0].stratum[0].population[1].patients!!.reference))
        assertTrue(stringMatch("denominator", obj.group[0].stratifier[0].stratum[0].population[2].code!!.coding[0].code))
        assertEquals(250, obj.group[0].stratifier[0].stratum[0].population[2].count)
        assertTrue(stringMatch("List/CMS146-stratifier-ages-u", obj.group[0].stratifier[0].stratum[0].population[2].patients!!.reference))
        assertTrue(stringMatch("denominator-exclusion", obj.group[0].stratifier[0].stratum[0].population[3].code!!.coding[0].code))
        assertEquals(50, obj.group[0].stratifier[0].stratum[0].population[3].count)
        assertTrue(stringMatch("List/CMS146-stratifier-ages-u", obj.group[0].stratifier[0].stratum[0].population[3].patients!!.reference))
        assertTrue(stringMatch("false", obj.group[0].stratifier[0].stratum[1].value))
        assertTrue(stringMatch("initial-population", obj.group[0].stratifier[0].stratum[1].population[0].code!!.coding[0].code))
        assertEquals(250, obj.group[0].stratifier[0].stratum[1].population[0].count)
        assertTrue(stringMatch("List/CMS146-stratifier-ages-u", obj.group[0].stratifier[0].stratum[1].population[0].patients!!.reference))
        assertTrue(stringMatch("numerator", obj.group[0].stratifier[0].stratum[1].population[1].code!!.coding[0].code))
        assertEquals(100, obj.group[0].stratifier[0].stratum[1].population[1].count)
        assertTrue(stringMatch("List/CMS146-stratifier-ages-u", obj.group[0].stratifier[0].stratum[1].population[1].patients!!.reference))
        assertTrue(stringMatch("denominator", obj.group[0].stratifier[0].stratum[1].population[2].code!!.coding[0].code))
        assertEquals(250, obj.group[0].stratifier[0].stratum[1].population[2].count)
        assertTrue(stringMatch("List/CMS146-stratifier-ages-u", obj.group[0].stratifier[0].stratum[1].population[2].patients!!.reference))
        assertTrue(stringMatch("denominator-exclusion", obj.group[0].stratifier[0].stratum[1].population[3].code!!.coding[0].code))
        assertEquals(50, obj.group[0].stratifier[0].stratum[1].population[3].count)
        assertTrue(stringMatch("List/CMS146-stratifier-ages-u", obj.group[0].stratifier[0].stratum[1].population[3].patients!!.reference))
        assertTrue(stringMatch("stratifier-ages-10-plus", obj.group[0].stratifier[1].identifier!!.value))
        assertTrue(stringMatch("true", obj.group[0].stratifier[1].stratum[0].value))
        assertTrue(stringMatch("initial-population", obj.group[0].stratifier[1].stratum[0].population[0].code!!.coding[0].code))
        assertEquals(250, obj.group[0].stratifier[1].stratum[0].population[0].count)
        assertTrue(stringMatch("List/CMS146-stratifier-ages-1", obj.group[0].stratifier[1].stratum[0].population[0].patients!!.reference))
        assertTrue(stringMatch("numerator", obj.group[0].stratifier[1].stratum[0].population[1].code!!.coding[0].code))
        assertEquals(100, obj.group[0].stratifier[1].stratum[0].population[1].count)
        assertTrue(stringMatch("List/CMS146-stratifier-ages-1", obj.group[0].stratifier[1].stratum[0].population[1].patients!!.reference))
        assertTrue(stringMatch("denominator", obj.group[0].stratifier[1].stratum[0].population[2].code!!.coding[0].code))
        assertEquals(250, obj.group[0].stratifier[1].stratum[0].population[2].count)
        assertTrue(stringMatch("List/CMS146-stratifier-ages-1", obj.group[0].stratifier[1].stratum[0].population[2].patients!!.reference))
        assertTrue(stringMatch("denominator-exclusion", obj.group[0].stratifier[1].stratum[0].population[3].code!!.coding[0].code))
        assertEquals(50, obj.group[0].stratifier[1].stratum[0].population[3].count)
        assertTrue(stringMatch("List/CMS146-stratifier-ages-1", obj.group[0].stratifier[1].stratum[0].population[3].patients!!.reference))
        assertTrue(stringMatch("false", obj.group[0].stratifier[1].stratum[1].value))
        assertTrue(stringMatch("initial-population", obj.group[0].stratifier[1].stratum[1].population[0].code!!.coding[0].code))
        assertEquals(250, obj.group[0].stratifier[1].stratum[1].population[0].count)
        assertTrue(stringMatch("List/CMS146-stratifier-ages-1", obj.group[0].stratifier[1].stratum[1].population[0].patients!!.reference))
        assertTrue(stringMatch("numerator", obj.group[0].stratifier[1].stratum[1].population[1].code!!.coding[0].code))
        assertEquals(100, obj.group[0].stratifier[1].stratum[1].population[1].count)
        assertTrue(stringMatch("List/CMS146-stratifier-ages-1", obj.group[0].stratifier[1].stratum[1].population[1].patients!!.reference))
        assertTrue(stringMatch("denominator", obj.group[0].stratifier[1].stratum[1].population[2].code!!.coding[0].code))
        assertEquals(250, obj.group[0].stratifier[1].stratum[1].population[2].count)
        assertTrue(stringMatch("List/CMS146-stratifier-ages-1", obj.group[0].stratifier[1].stratum[1].population[2].patients!!.reference))
        assertTrue(stringMatch("denominator-exclusion", obj.group[0].stratifier[1].stratum[1].population[3].code!!.coding[0].code))
        assertEquals(50, obj.group[0].stratifier[1].stratum[1].population[3].count)
        assertTrue(stringMatch("List/CMS146-stratifier-ages-1", obj.group[0].stratifier[1].stratum[1].population[3].patients!!.reference))
        assertTrue(stringMatch("stratifier-gender", obj.group[0].stratifier[2].identifier!!.value))
        assertTrue(stringMatch("male", obj.group[0].stratifier[2].stratum[0].value))
        assertTrue(stringMatch("initial-population", obj.group[0].stratifier[2].stratum[0].population[0].code!!.coding[0].code))
        assertEquals(250, obj.group[0].stratifier[2].stratum[0].population[0].count)
        assertTrue(stringMatch("List/CMS146-stratifier-gender", obj.group[0].stratifier[2].stratum[0].population[0].patients!!.reference))
        assertTrue(stringMatch("numerator", obj.group[0].stratifier[2].stratum[0].population[1].code!!.coding[0].code))
        assertEquals(100, obj.group[0].stratifier[2].stratum[0].population[1].count)
        assertTrue(stringMatch("List/CMS146-stratifier-gender", obj.group[0].stratifier[2].stratum[0].population[1].patients!!.reference))
        assertTrue(stringMatch("denominator", obj.group[0].stratifier[2].stratum[0].population[2].code!!.coding[0].code))
        assertEquals(250, obj.group[0].stratifier[2].stratum[0].population[2].count)
        assertTrue(stringMatch("List/CMS146-stratifier-gender", obj.group[0].stratifier[2].stratum[0].population[2].patients!!.reference))
        assertTrue(stringMatch("denominator-exclusion", obj.group[0].stratifier[2].stratum[0].population[3].code!!.coding[0].code))
        assertEquals(50, obj.group[0].stratifier[2].stratum[0].population[3].count)
        assertTrue(stringMatch("List/CMS146-stratifier-gender", obj.group[0].stratifier[2].stratum[0].population[3].patients!!.reference))
        assertTrue(stringMatch("female", obj.group[0].stratifier[2].stratum[1].value))
        assertTrue(stringMatch("initial-population", obj.group[0].stratifier[2].stratum[1].population[0].code!!.coding[0].code))
        assertEquals(250, obj.group[0].stratifier[2].stratum[1].population[0].count)
        assertTrue(stringMatch("List/CMS146-stratifier-gender", obj.group[0].stratifier[2].stratum[1].population[0].patients!!.reference))
        assertTrue(stringMatch("numerator", obj.group[0].stratifier[2].stratum[1].population[1].code!!.coding[0].code))
        assertEquals(100, obj.group[0].stratifier[2].stratum[1].population[1].count)
        assertTrue(stringMatch("List/CMS146-stratifier-gender", obj.group[0].stratifier[2].stratum[1].population[1].patients!!.reference))
        assertTrue(stringMatch("denominator", obj.group[0].stratifier[2].stratum[1].population[2].code!!.coding[0].code))
        assertEquals(250, obj.group[0].stratifier[2].stratum[1].population[2].count)
        assertTrue(stringMatch("List/CMS146-stratifier-gender", obj.group[0].stratifier[2].stratum[1].population[2].patients!!.reference))
        assertTrue(stringMatch("denominator-exclusion", obj.group[0].stratifier[2].stratum[1].population[3].code!!.coding[0].code))
        assertEquals(50, obj.group[0].stratifier[2].stratum[1].population[3].count)
        assertTrue(stringMatch("List/CMS146-stratifier-gender", obj.group[0].stratifier[2].stratum[1].population[3].patients!!.reference))
        assertTrue(stringMatch("other", obj.group[0].stratifier[2].stratum[2].value))
        assertTrue(stringMatch("initial-population", obj.group[0].stratifier[2].stratum[2].population[0].code!!.coding[0].code))
        assertEquals(0, obj.group[0].stratifier[2].stratum[2].population[0].count)
        assertTrue(stringMatch("List/CMS146-stratifier-gender", obj.group[0].stratifier[2].stratum[2].population[0].patients!!.reference))
        assertTrue(stringMatch("numerator", obj.group[0].stratifier[2].stratum[2].population[1].code!!.coding[0].code))
        assertEquals(0, obj.group[0].stratifier[2].stratum[2].population[1].count)
        assertTrue(stringMatch("List/CMS146-stratifier-gender", obj.group[0].stratifier[2].stratum[2].population[1].patients!!.reference))
        assertTrue(stringMatch("denominator", obj.group[0].stratifier[2].stratum[2].population[2].code!!.coding[0].code))
        assertEquals(0, obj.group[0].stratifier[2].stratum[2].population[2].count)
        assertTrue(stringMatch("List/CMS146-stratifier-gender", obj.group[0].stratifier[2].stratum[2].population[2].patients!!.reference))
        assertTrue(stringMatch("denominator-exclusion", obj.group[0].stratifier[2].stratum[2].population[3].code!!.coding[0].code))
        assertEquals(0, obj.group[0].stratifier[2].stratum[2].population[3].count)
        assertTrue(stringMatch("List/CMS146-stratifier-gender", obj.group[0].stratifier[2].stratum[2].population[3].patients!!.reference))
        assertTrue(stringMatch("unknown", obj.group[0].stratifier[2].stratum[3].value))
        assertTrue(stringMatch("initial-population", obj.group[0].stratifier[2].stratum[3].population[0].code!!.coding[0].code))
        assertEquals(0, obj.group[0].stratifier[2].stratum[3].population[0].count)
        assertTrue(stringMatch("List/CMS146-stratifier-gender", obj.group[0].stratifier[2].stratum[3].population[0].patients!!.reference))
        assertTrue(stringMatch("numerator", obj.group[0].stratifier[2].stratum[3].population[1].code!!.coding[0].code))
        assertEquals(0, obj.group[0].stratifier[2].stratum[3].population[1].count)
        assertTrue(stringMatch("List/CMS146-stratifier-gender", obj.group[0].stratifier[2].stratum[3].population[1].patients!!.reference))
        assertTrue(stringMatch("denominator", obj.group[0].stratifier[2].stratum[3].population[2].code!!.coding[0].code))
        assertEquals(0, obj.group[0].stratifier[2].stratum[3].population[2].count)
        assertTrue(stringMatch("List/CMS146-stratifier-gender", obj.group[0].stratifier[2].stratum[3].population[2].patients!!.reference))
        assertTrue(stringMatch("denominator-exclusions", obj.group[0].stratifier[2].stratum[3].population[3].code!!.coding[0].code))
        assertEquals(0, obj.group[0].stratifier[2].stratum[3].population[3].count)
        assertTrue(stringMatch("List/CMS146-stratifier-gender", obj.group[0].stratifier[2].stratum[3].population[3].patients!!.reference))
    }

    fun `measurereport-cms146-cat2-example Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `measurereport-cms146-cat3-example 326 Test`() {
        val json = File("./src/test/resources/model/sample_data/measurereport-cms146-cat3-example.json").readTextAndClose()
        val obj = mapper.fromJson(json, MeasureReport::class.java)
        assertTrue(stringMatch("MeasureReport", obj.resourceType))
        assertTrue(stringMatch("measurereport-cms146-cat3-exa", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("Organization", (obj.contained[0] as Organization).resourceType))
        assertTrue(stringMatch("reporter", (obj.contained[0] as Organization).id))
        assertTrue(stringMatch("Good Health Hospital", (obj.contained[0] as Organization).name))
        assertTrue(stringMatch("measurereport-cms146-cat3-exa", obj.identifier!!.value))
        assertTrue(stringMatch("complete", obj.status))
        assertTrue(stringMatch("summary", obj.type))
        assertTrue(stringMatch("Measure/CMS146", obj.measure.reference))
        assertTrue(stringMatch("#reporter", obj.reportingOrganization!!.reference))
        assertTrue(stringMatch("2014-01-01", obj.period.start))
        assertTrue(stringMatch("2014-03-31", obj.period.end))
        assertTrue(stringMatch("CMS146-group-1", obj.group[0].identifier.value))
        assertTrue(stringMatch("initial-population", obj.group[0].population[0].code!!.coding[0].code))
        assertEquals(500, obj.group[0].population[0].count)
        assertTrue(stringMatch("numerator", obj.group[0].population[1].code!!.coding[0].code))
        assertEquals(200, obj.group[0].population[1].count)
        assertTrue(stringMatch("denominator", obj.group[0].population[2].code!!.coding[0].code))
        assertEquals(500, obj.group[0].population[2].count)
        assertTrue(stringMatch("denominator-exclusion", obj.group[0].population[3].code!!.coding[0].code))
        assertEquals(100, obj.group[0].population[3].count)
        assertTrue(stringMatch("stratifier-ages-up-to-9", obj.group[0].stratifier[0].identifier!!.value))
        assertTrue(stringMatch("true", obj.group[0].stratifier[0].stratum[0].value))
        assertTrue(stringMatch("initial-population", obj.group[0].stratifier[0].stratum[0].population[0].code!!.coding[0].code))
        assertEquals(250, obj.group[0].stratifier[0].stratum[0].population[0].count)
        assertTrue(stringMatch("numerator", obj.group[0].stratifier[0].stratum[0].population[1].code!!.coding[0].code))
        assertEquals(100, obj.group[0].stratifier[0].stratum[0].population[1].count)
        assertTrue(stringMatch("denominator", obj.group[0].stratifier[0].stratum[0].population[2].code!!.coding[0].code))
        assertEquals(250, obj.group[0].stratifier[0].stratum[0].population[2].count)
        assertTrue(stringMatch("denominator-exclusion", obj.group[0].stratifier[0].stratum[0].population[3].code!!.coding[0].code))
        assertEquals(50, obj.group[0].stratifier[0].stratum[0].population[3].count)
        assertTrue(stringMatch("false", obj.group[0].stratifier[0].stratum[1].value))
        assertTrue(stringMatch("initial-population", obj.group[0].stratifier[0].stratum[1].population[0].code!!.coding[0].code))
        assertEquals(250, obj.group[0].stratifier[0].stratum[1].population[0].count)
        assertTrue(stringMatch("numerator", obj.group[0].stratifier[0].stratum[1].population[1].code!!.coding[0].code))
        assertEquals(100, obj.group[0].stratifier[0].stratum[1].population[1].count)
        assertTrue(stringMatch("denominator", obj.group[0].stratifier[0].stratum[1].population[2].code!!.coding[0].code))
        assertEquals(250, obj.group[0].stratifier[0].stratum[1].population[2].count)
        assertTrue(stringMatch("denominator-exclusion", obj.group[0].stratifier[0].stratum[1].population[3].code!!.coding[0].code))
        assertEquals(50, obj.group[0].stratifier[0].stratum[1].population[3].count)
        assertTrue(stringMatch("stratifier-ages-10-plus", obj.group[0].stratifier[1].identifier!!.value))
        assertTrue(stringMatch("true", obj.group[0].stratifier[1].stratum[0].value))
        assertTrue(stringMatch("initial-population", obj.group[0].stratifier[1].stratum[0].population[0].code!!.coding[0].code))
        assertEquals(250, obj.group[0].stratifier[1].stratum[0].population[0].count)
        assertTrue(stringMatch("numerator", obj.group[0].stratifier[1].stratum[0].population[1].code!!.coding[0].code))
        assertEquals(100, obj.group[0].stratifier[1].stratum[0].population[1].count)
        assertTrue(stringMatch("denominator", obj.group[0].stratifier[1].stratum[0].population[2].code!!.coding[0].code))
        assertEquals(250, obj.group[0].stratifier[1].stratum[0].population[2].count)
        assertTrue(stringMatch("denominator-exclusion", obj.group[0].stratifier[1].stratum[0].population[3].code!!.coding[0].code))
        assertEquals(50, obj.group[0].stratifier[1].stratum[0].population[3].count)
        assertTrue(stringMatch("false", obj.group[0].stratifier[1].stratum[1].value))
        assertTrue(stringMatch("initial-population", obj.group[0].stratifier[1].stratum[1].population[0].code!!.coding[0].code))
        assertEquals(250, obj.group[0].stratifier[1].stratum[1].population[0].count)
        assertTrue(stringMatch("numerator", obj.group[0].stratifier[1].stratum[1].population[1].code!!.coding[0].code))
        assertEquals(100, obj.group[0].stratifier[1].stratum[1].population[1].count)
        assertTrue(stringMatch("denominator", obj.group[0].stratifier[1].stratum[1].population[2].code!!.coding[0].code))
        assertEquals(250, obj.group[0].stratifier[1].stratum[1].population[2].count)
        assertTrue(stringMatch("denominator-exclusion", obj.group[0].stratifier[1].stratum[1].population[3].code!!.coding[0].code))
        assertEquals(50, obj.group[0].stratifier[1].stratum[1].population[3].count)
        assertTrue(stringMatch("stratifier-gender", obj.group[0].stratifier[2].identifier!!.value))
        assertTrue(stringMatch("male", obj.group[0].stratifier[2].stratum[0].value))
        assertTrue(stringMatch("initial-population", obj.group[0].stratifier[2].stratum[0].population[0].code!!.coding[0].code))
        assertEquals(250, obj.group[0].stratifier[2].stratum[0].population[0].count)
        assertTrue(stringMatch("numerator", obj.group[0].stratifier[2].stratum[0].population[1].code!!.coding[0].code))
        assertEquals(100, obj.group[0].stratifier[2].stratum[0].population[1].count)
        assertTrue(stringMatch("denominator", obj.group[0].stratifier[2].stratum[0].population[2].code!!.coding[0].code))
        assertEquals(250, obj.group[0].stratifier[2].stratum[0].population[2].count)
        assertTrue(stringMatch("denominator-exclusion", obj.group[0].stratifier[2].stratum[0].population[3].code!!.coding[0].code))
        assertEquals(50, obj.group[0].stratifier[2].stratum[0].population[3].count)
        assertTrue(stringMatch("female", obj.group[0].stratifier[2].stratum[1].value))
        assertTrue(stringMatch("initial-population", obj.group[0].stratifier[2].stratum[1].population[0].code!!.coding[0].code))
        assertEquals(250, obj.group[0].stratifier[2].stratum[1].population[0].count)
        assertTrue(stringMatch("numerator", obj.group[0].stratifier[2].stratum[1].population[1].code!!.coding[0].code))
        assertEquals(100, obj.group[0].stratifier[2].stratum[1].population[1].count)
        assertTrue(stringMatch("denominator", obj.group[0].stratifier[2].stratum[1].population[2].code!!.coding[0].code))
        assertEquals(250, obj.group[0].stratifier[2].stratum[1].population[2].count)
        assertTrue(stringMatch("denominator-exclusion", obj.group[0].stratifier[2].stratum[1].population[3].code!!.coding[0].code))
        assertEquals(50, obj.group[0].stratifier[2].stratum[1].population[3].count)
        assertTrue(stringMatch("other", obj.group[0].stratifier[2].stratum[2].value))
        assertTrue(stringMatch("initial-population", obj.group[0].stratifier[2].stratum[2].population[0].code!!.coding[0].code))
        assertEquals(0, obj.group[0].stratifier[2].stratum[2].population[0].count)
        assertTrue(stringMatch("numerator", obj.group[0].stratifier[2].stratum[2].population[1].code!!.coding[0].code))
        assertEquals(0, obj.group[0].stratifier[2].stratum[2].population[1].count)
        assertTrue(stringMatch("denominator", obj.group[0].stratifier[2].stratum[2].population[2].code!!.coding[0].code))
        assertEquals(0, obj.group[0].stratifier[2].stratum[2].population[2].count)
        assertTrue(stringMatch("denominator-exclusion", obj.group[0].stratifier[2].stratum[2].population[3].code!!.coding[0].code))
        assertEquals(0, obj.group[0].stratifier[2].stratum[2].population[3].count)
        assertTrue(stringMatch("unknown", obj.group[0].stratifier[2].stratum[3].value))
        assertTrue(stringMatch("initial-population", obj.group[0].stratifier[2].stratum[3].population[0].code!!.coding[0].code))
        assertEquals(0, obj.group[0].stratifier[2].stratum[3].population[0].count)
        assertTrue(stringMatch("numerator", obj.group[0].stratifier[2].stratum[3].population[1].code!!.coding[0].code))
        assertEquals(0, obj.group[0].stratifier[2].stratum[3].population[1].count)
        assertTrue(stringMatch("denominator", obj.group[0].stratifier[2].stratum[3].population[2].code!!.coding[0].code))
        assertEquals(0, obj.group[0].stratifier[2].stratum[3].population[2].count)
        assertTrue(stringMatch("denominator-exclusion", obj.group[0].stratifier[2].stratum[3].population[3].code!!.coding[0].code))
        assertEquals(0, obj.group[0].stratifier[2].stratum[3].population[3].count)
    }

    fun `measurereport-cms146-cat3-example Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }
}
