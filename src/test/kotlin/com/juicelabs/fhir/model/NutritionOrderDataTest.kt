package com.juicelabs.fhir.model

import java.io.File
import java.lang.SuppressWarnings
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.junit.jupiter.api.Test

class NutritionOrderDataTest : DataTests() {
    @Test
    fun `nutritionorder-example-diabeticsupplement 227 Test`() {
        val json = File("./src/test/resources/model/sample_data/nutritionorder-example-diabeticsupplement.json").readTextAndClose()
        val obj = mapper.fromJson(json, NutritionOrder::class.java)
        assertTrue(stringMatch("NutritionOrder", obj.resourceType))
        assertTrue(stringMatch("diabeticsupplement", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://goodhealthhospital.org", obj.identifier[0].system))
        assertTrue(stringMatch("123", obj.identifier[0].value))
        assertTrue(stringMatch("active", obj.status))
        assertTrue(stringMatch("Patient/example", obj.patient.reference))
        assertTrue(stringMatch("Peter Chalmers", obj.patient.display))
        assertTrue(stringMatch("Encounter/example", obj.encounter!!.reference))
        assertTrue(stringMatch("Inpatient", obj.encounter!!.display))
        assertTrue(stringMatch("2014-09-17", obj.dateTime))
        assertTrue(stringMatch("Practitioner/example", obj.orderer!!.reference))
        assertTrue(stringMatch("Dr Adam Careful", obj.orderer!!.display))
        assertTrue(stringMatch("AllergyIntolerance/example", obj.allergyIntolerance[0].reference))
        assertTrue(stringMatch("Cashew Nuts", obj.allergyIntolerance[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/diet", obj.foodPreferenceModifier[0].coding[0].system))
        assertTrue(stringMatch("kosher", obj.foodPreferenceModifier[0].coding[0].code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.excludeFoodModifier[0].coding[0].system))
        assertTrue(stringMatch("20140730", obj.excludeFoodModifier[0].coding[0].version))
        assertTrue(stringMatch("227493005", obj.excludeFoodModifier[0].coding[0].code))
        assertTrue(stringMatch("Cashew Nut", obj.excludeFoodModifier[0].coding[0].display))
        assertTrue(stringMatch("http://snomed.info/sct", obj.supplement[0].type!!.coding[0].system))
        assertTrue(stringMatch("443051000124104", obj.supplement[0].type!!.coding[0].code))
        assertTrue(stringMatch("Adult diabetes specialty form", obj.supplement[0].type!!.coding[0].display))
        assertTrue(stringMatch("http://goodhealthhospital.org", obj.supplement[0].type!!.coding[1].system))
        assertTrue(stringMatch("1010", obj.supplement[0].type!!.coding[1].code))
        assertTrue(stringMatch("Adult diabetic formula", obj.supplement[0].type!!.coding[1].display))
        assertTrue(stringMatch("Adult diabetic formula", obj.supplement[0].type!!.text))
        assertTrue(stringMatch("Glucerna", obj.supplement[0].productName))
        assertTrue(stringMatch("2015-02-10T15:00:00Z", obj.supplement[0].schedule[0].repeat!!.boundsPeriod!!.start))
        assertEquals(1, obj.supplement[0].schedule[0].repeat!!.frequency)
        assertTrue(stringMatch("%.2f".format(24f), "%.2f".format(obj.supplement[0].schedule[0].repeat!!.period)))
        assertTrue(stringMatch("h", obj.supplement[0].schedule[0].repeat!!.periodUnit))
        assertTrue(stringMatch("%.2f".format(1f), "%.2f".format(obj.supplement[0].schedule[1].repeat!!.duration)))
        assertTrue(stringMatch("h", obj.supplement[0].schedule[1].repeat!!.durationUnit))
        assertTrue(stringMatch("HS", obj.supplement[0].schedule[1].repeat!!.when_fhir[0]))
        assertTrue(stringMatch("%.2f".format(1f), "%.2f".format(obj.supplement[0].quantity!!.value)))
        assertTrue(stringMatch("8 oz bottle", obj.supplement[0].quantity!!.unit))
    }

    fun `nutritionorder-example-diabeticsupplement Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `nutritionorder-example-enteralbolus 228 Test`() {
        val json = File("./src/test/resources/model/sample_data/nutritionorder-example-enteralbolus.json").readTextAndClose()
        val obj = mapper.fromJson(json, NutritionOrder::class.java)
        assertTrue(stringMatch("NutritionOrder", obj.resourceType))
        assertTrue(stringMatch("enteralbolus", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://www.acme.org/nutrition", obj.identifier[0].system))
        assertTrue(stringMatch("123", obj.identifier[0].value))
        assertTrue(stringMatch("active", obj.status))
        assertTrue(stringMatch("Patient/example", obj.patient.reference))
        assertTrue(stringMatch("Peter Chalmers", obj.patient.display))
        assertTrue(stringMatch("Encounter/example", obj.encounter!!.reference))
        assertTrue(stringMatch("Inpatient", obj.encounter!!.display))
        assertTrue(stringMatch("2014-09-17", obj.dateTime))
        assertTrue(stringMatch("Practitioner/example", obj.orderer!!.reference))
        assertTrue(stringMatch("Dr Adam Careful", obj.orderer!!.display))
        assertTrue(stringMatch("AllergyIntolerance/example", obj.allergyIntolerance[0].reference))
        assertTrue(stringMatch("Cashew Nuts", obj.allergyIntolerance[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/diet", obj.foodPreferenceModifier[0].coding[0].system))
        assertTrue(stringMatch("dairy-free", obj.foodPreferenceModifier[0].coding[0].code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.excludeFoodModifier[0].coding[0].system))
        assertTrue(stringMatch("20140730", obj.excludeFoodModifier[0].coding[0].version))
        assertTrue(stringMatch("227493005", obj.excludeFoodModifier[0].coding[0].code))
        assertTrue(stringMatch("Cashew Nut", obj.excludeFoodModifier[0].coding[0].display))
        assertTrue(stringMatch("http://usextension/snomed.inf", obj.enteralFormula!!.baseFormulaType!!.coding[0].system))
        assertTrue(stringMatch("659311000124118", obj.enteralFormula!!.baseFormulaType!!.coding[0].code))
        assertTrue(stringMatch("Adult high protein formula", obj.enteralFormula!!.baseFormulaType!!.coding[0].display))
        assertTrue(stringMatch("Acme High Protein Formula", obj.enteralFormula!!.baseFormulaProductName))
        assertTrue(stringMatch("http://hl7.org/fhir/entformul", obj.enteralFormula!!.additiveType!!.coding[0].system))
        assertTrue(stringMatch("lipid", obj.enteralFormula!!.additiveType!!.coding[0].code))
        assertTrue(stringMatch("Lipid", obj.enteralFormula!!.additiveType!!.coding[0].display))
        assertTrue(stringMatch("Acme Lipid Additive", obj.enteralFormula!!.additiveProductName))
        assertTrue(stringMatch("%.2f".format(1.5f), "%.2f".format(obj.enteralFormula!!.caloricDensity!!.value)))
        assertTrue(stringMatch("calories per milliliter", obj.enteralFormula!!.caloricDensity!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.enteralFormula!!.caloricDensity!!.system))
        assertTrue(stringMatch("cal/mL", obj.enteralFormula!!.caloricDensity!!.code))
        assertTrue(stringMatch("http://hl7.org/fhir/v3/RouteO", obj.enteralFormula!!.routeofAdministration!!.coding[0].system))
        assertTrue(stringMatch("GT", obj.enteralFormula!!.routeofAdministration!!.coding[0].code))
        assertTrue(stringMatch("Instillation, gastrostomy tub", obj.enteralFormula!!.routeofAdministration!!.coding[0].display))
        assertTrue(stringMatch("2014-09-17T16:00:00Z", obj.enteralFormula!!.administration[0].schedule!!.repeat!!.boundsPeriod!!.start))
        assertEquals(1, obj.enteralFormula!!.administration[0].schedule!!.repeat!!.frequency)
        assertTrue(stringMatch("%.2f".format(4f), "%.2f".format(obj.enteralFormula!!.administration[0].schedule!!.repeat!!.period)))
        assertTrue(stringMatch("h", obj.enteralFormula!!.administration[0].schedule!!.repeat!!.periodUnit))
        assertTrue(stringMatch("%.2f".format(240f), "%.2f".format(obj.enteralFormula!!.administration[0].quantity!!.value)))
        assertTrue(stringMatch("milliliters", obj.enteralFormula!!.administration[0].quantity!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.enteralFormula!!.administration[0].quantity!!.system))
        assertTrue(stringMatch("mL", obj.enteralFormula!!.administration[0].quantity!!.code))
        assertTrue(stringMatch("%.2f".format(1440f), "%.2f".format(obj.enteralFormula!!.maxVolumeToDeliver!!.value)))
        assertTrue(stringMatch("milliliter/day", obj.enteralFormula!!.maxVolumeToDeliver!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.enteralFormula!!.maxVolumeToDeliver!!.system))
        assertTrue(stringMatch("mL/d", obj.enteralFormula!!.maxVolumeToDeliver!!.code))
        assertTrue(stringMatch("240 mls every 4hrs ", obj.enteralFormula!!.administrationInstruction))
    }

    fun `nutritionorder-example-enteralbolus Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `nutritionorder-example-fiberrestricteddiet 229 Test`() {
        val json = File("./src/test/resources/model/sample_data/nutritionorder-example-fiberrestricteddiet.json").readTextAndClose()
        val obj = mapper.fromJson(json, NutritionOrder::class.java)
        assertTrue(stringMatch("NutritionOrder", obj.resourceType))
        assertTrue(stringMatch("fiberrestricteddiet", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://goodhealthhospital.org", obj.identifier[0].system))
        assertTrue(stringMatch("123", obj.identifier[0].value))
        assertTrue(stringMatch("active", obj.status))
        assertTrue(stringMatch("Patient/example", obj.patient.reference))
        assertTrue(stringMatch("Peter Chalmers", obj.patient.display))
        assertTrue(stringMatch("Encounter/example", obj.encounter!!.reference))
        assertTrue(stringMatch("Inpatient", obj.encounter!!.display))
        assertTrue(stringMatch("2014-09-17", obj.dateTime))
        assertTrue(stringMatch("Practitioner/example", obj.orderer!!.reference))
        assertTrue(stringMatch("Dr Adam Careful", obj.orderer!!.display))
        assertTrue(stringMatch("AllergyIntolerance/example", obj.allergyIntolerance[0].reference))
        assertTrue(stringMatch("Cashew Nuts", obj.allergyIntolerance[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/diet", obj.foodPreferenceModifier[0].coding[0].system))
        assertTrue(stringMatch("dairy-free", obj.foodPreferenceModifier[0].coding[0].code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.excludeFoodModifier[0].coding[0].system))
        assertTrue(stringMatch("20140730", obj.excludeFoodModifier[0].coding[0].version))
        assertTrue(stringMatch("227493005", obj.excludeFoodModifier[0].coding[0].code))
        assertTrue(stringMatch("Cashew Nut", obj.excludeFoodModifier[0].coding[0].display))
        assertTrue(stringMatch("http://snomed.info/sct", obj.oralDiet!!.type[0].coding[0].system))
        assertTrue(stringMatch("15108003", obj.oralDiet!!.type[0].coding[0].code))
        assertTrue(stringMatch("Restricted fiber diet", obj.oralDiet!!.type[0].coding[0].display))
        assertTrue(stringMatch("http://goodhealthhospital.org", obj.oralDiet!!.type[0].coding[1].system))
        assertTrue(stringMatch("1000", obj.oralDiet!!.type[0].coding[1].code))
        assertTrue(stringMatch("Fiber restricted", obj.oralDiet!!.type[0].coding[1].display))
        assertTrue(stringMatch("Fiber restricted diet", obj.oralDiet!!.type[0].text))
        assertTrue(stringMatch("http://snomed.info/sct", obj.oralDiet!!.type[1].coding[0].system))
        assertTrue(stringMatch("16208003", obj.oralDiet!!.type[1].coding[0].code))
        assertTrue(stringMatch("Low fat diet", obj.oralDiet!!.type[1].coding[0].display))
        assertTrue(stringMatch("http://goodhealthhospital.org", obj.oralDiet!!.type[1].coding[1].system))
        assertTrue(stringMatch("1100", obj.oralDiet!!.type[1].coding[1].code))
        assertTrue(stringMatch("Low Fat", obj.oralDiet!!.type[1].coding[1].display))
        assertTrue(stringMatch("Low fat diet", obj.oralDiet!!.type[1].text))
        assertTrue(stringMatch("2015-02-10", obj.oralDiet!!.schedule[0].repeat!!.boundsPeriod!!.start))
        assertEquals(3, obj.oralDiet!!.schedule[0].repeat!!.frequency)
        assertTrue(stringMatch("%.2f".format(1f), "%.2f".format(obj.oralDiet!!.schedule[0].repeat!!.period)))
        assertTrue(stringMatch("d", obj.oralDiet!!.schedule[0].repeat!!.periodUnit))
        assertTrue(stringMatch("http://snomed.info/sct", obj.oralDiet!!.nutrient[0].modifier!!.coding[0].system))
        assertTrue(stringMatch("256674009", obj.oralDiet!!.nutrient[0].modifier!!.coding[0].code))
        assertTrue(stringMatch("Fat", obj.oralDiet!!.nutrient[0].modifier!!.coding[0].display))
        assertTrue(stringMatch("%.2f".format(50f), "%.2f".format(obj.oralDiet!!.nutrient[0].amount!!.value)))
        assertTrue(stringMatch("grams", obj.oralDiet!!.nutrient[0].amount!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.oralDiet!!.nutrient[0].amount!!.system))
        assertTrue(stringMatch("g", obj.oralDiet!!.nutrient[0].amount!!.code))
    }

    fun `nutritionorder-example-fiberrestricteddiet Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `nutritionorder-example-texture-modified 230 Test`() {
        val json = File("./src/test/resources/model/sample_data/nutritionorder-example-texture-modified.json").readTextAndClose()
        val obj = mapper.fromJson(json, NutritionOrder::class.java)
        assertTrue(stringMatch("NutritionOrder", obj.resourceType))
        assertTrue(stringMatch("texturemodified", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://goodhealthhospital.org", obj.identifier[0].system))
        assertTrue(stringMatch("123", obj.identifier[0].value))
        assertTrue(stringMatch("active", obj.status))
        assertTrue(stringMatch("Patient/example", obj.patient.reference))
        assertTrue(stringMatch("Peter Chalmers", obj.patient.display))
        assertTrue(stringMatch("2014-09-17", obj.dateTime))
        assertTrue(stringMatch("Practitioner/example", obj.orderer!!.reference))
        assertTrue(stringMatch("Dr Adam Careful", obj.orderer!!.display))
        assertTrue(stringMatch("http://snomed.info/sct", obj.oralDiet!!.type[0].coding[0].system))
        assertTrue(stringMatch("435801000124108", obj.oralDiet!!.type[0].coding[0].code))
        assertTrue(stringMatch("Texture modified diet", obj.oralDiet!!.type[0].coding[0].display))
        assertTrue(stringMatch("http://goodhealthhospital.org", obj.oralDiet!!.type[0].coding[1].system))
        assertTrue(stringMatch("1010", obj.oralDiet!!.type[0].coding[1].code))
        assertTrue(stringMatch("Texture modified diet", obj.oralDiet!!.type[0].coding[1].display))
        assertTrue(stringMatch("Texture modified diet", obj.oralDiet!!.type[0].text))
        assertTrue(stringMatch("2015-02-10", obj.oralDiet!!.schedule[0].repeat!!.boundsPeriod!!.start))
        assertEquals(3, obj.oralDiet!!.schedule[0].repeat!!.frequency)
        assertTrue(stringMatch("%.2f".format(1f), "%.2f".format(obj.oralDiet!!.schedule[0].repeat!!.period)))
        assertTrue(stringMatch("d", obj.oralDiet!!.schedule[0].repeat!!.periodUnit))
        assertTrue(stringMatch("http://snomed.info/sct", obj.oralDiet!!.texture[0].modifier!!.coding[0].system))
        assertTrue(stringMatch("228049004", obj.oralDiet!!.texture[0].modifier!!.coding[0].code))
        assertTrue(stringMatch("Chopped food", obj.oralDiet!!.texture[0].modifier!!.coding[0].display))
        assertTrue(stringMatch("Regular, Chopped Meat", obj.oralDiet!!.texture[0].modifier!!.text))
        assertTrue(stringMatch("http://snomed.info/sct", obj.oralDiet!!.texture[0].foodType!!.coding[0].system))
        assertTrue(stringMatch("28647000", obj.oralDiet!!.texture[0].foodType!!.coding[0].code))
        assertTrue(stringMatch("Meat", obj.oralDiet!!.texture[0].foodType!!.coding[0].display))
        assertTrue(stringMatch("Regular, Chopped Meat", obj.oralDiet!!.texture[0].foodType!!.text))
    }

    fun `nutritionorder-example-texture-modified Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `nutritionorder-example-pureeddiet-simple 231 Test`() {
        val json = File("./src/test/resources/model/sample_data/nutritionorder-example-pureeddiet-simple.json").readTextAndClose()
        val obj = mapper.fromJson(json, NutritionOrder::class.java)
        assertTrue(stringMatch("NutritionOrder", obj.resourceType))
        assertTrue(stringMatch("pureeddiet-simple", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://goodhealthhospital.org", obj.identifier[0].system))
        assertTrue(stringMatch("123", obj.identifier[0].value))
        assertTrue(stringMatch("active", obj.status))
        assertTrue(stringMatch("Patient/example", obj.patient.reference))
        assertTrue(stringMatch("Peter Chalmers", obj.patient.display))
        assertTrue(stringMatch("2014-09-17", obj.dateTime))
        assertTrue(stringMatch("Practitioner/example", obj.orderer!!.reference))
        assertTrue(stringMatch("Dr Adam Careful", obj.orderer!!.display))
        assertTrue(stringMatch("http://snomed.info/sct", obj.oralDiet!!.type[0].coding[0].system))
        assertTrue(stringMatch("226211001", obj.oralDiet!!.type[0].coding[0].code))
        assertTrue(stringMatch("Pureed diet", obj.oralDiet!!.type[0].coding[0].display))
        assertTrue(stringMatch("http://goodhealthhospital.org", obj.oralDiet!!.type[0].coding[1].system))
        assertTrue(stringMatch("1010", obj.oralDiet!!.type[0].coding[1].code))
        assertTrue(stringMatch("Pureed diet", obj.oralDiet!!.type[0].coding[1].display))
        assertTrue(stringMatch("Pureed diet", obj.oralDiet!!.type[0].text))
        assertTrue(stringMatch("2015-02-10", obj.oralDiet!!.schedule[0].repeat!!.boundsPeriod!!.start))
        assertEquals(3, obj.oralDiet!!.schedule[0].repeat!!.frequency)
        assertTrue(stringMatch("%.2f".format(1f), "%.2f".format(obj.oralDiet!!.schedule[0].repeat!!.period)))
        assertTrue(stringMatch("d", obj.oralDiet!!.schedule[0].repeat!!.periodUnit))
        assertTrue(stringMatch("http://snomed.info/sct", obj.oralDiet!!.texture[0].modifier!!.coding[0].system))
        assertTrue(stringMatch("228055009", obj.oralDiet!!.texture[0].modifier!!.coding[0].code))
        assertTrue(stringMatch("Liquidized food", obj.oralDiet!!.texture[0].modifier!!.coding[0].display))
        assertTrue(stringMatch("Pureed", obj.oralDiet!!.texture[0].modifier!!.text))
        assertTrue(stringMatch("http://snomed.info/sct", obj.oralDiet!!.fluidConsistencyType[0].coding[0].system))
        assertTrue(stringMatch("439021000124105", obj.oralDiet!!.fluidConsistencyType[0].coding[0].code))
        assertTrue(stringMatch("Dietary liquid consistency - ", obj.oralDiet!!.fluidConsistencyType[0].coding[0].display))
        assertTrue(stringMatch("Nectar thick liquids", obj.oralDiet!!.fluidConsistencyType[0].text))
        assertTrue(stringMatch("http://snomed.info/sct", obj.supplement[0].type!!.coding[0].system))
        assertTrue(stringMatch("442971000124100", obj.supplement[0].type!!.coding[0].code))
        assertTrue(stringMatch("Adult high energy formula", obj.supplement[0].type!!.coding[0].display))
        assertTrue(stringMatch("http://goodhealthhospital.org", obj.supplement[0].type!!.coding[1].system))
        assertTrue(stringMatch("1040", obj.supplement[0].type!!.coding[1].code))
        assertTrue(stringMatch("Adult high energy pudding", obj.supplement[0].type!!.coding[1].display))
        assertTrue(stringMatch("Adult high energy pudding", obj.supplement[0].type!!.text))
        assertTrue(stringMatch("Ensure Pudding 4 oz container", obj.supplement[0].productName))
        assertTrue(stringMatch("Ensure Pudding at breakfast, ", obj.supplement[0].instruction))
    }

    fun `nutritionorder-example-pureeddiet-simple Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `nutritionorder-example-infantenteral 232 Test`() {
        val json = File("./src/test/resources/model/sample_data/nutritionorder-example-infantenteral.json").readTextAndClose()
        val obj = mapper.fromJson(json, NutritionOrder::class.java)
        assertTrue(stringMatch("NutritionOrder", obj.resourceType))
        assertTrue(stringMatch("infantenteral", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://www.acme.org/nutrition", obj.identifier[0].system))
        assertTrue(stringMatch("123", obj.identifier[0].value))
        assertTrue(stringMatch("active", obj.status))
        assertTrue(stringMatch("Patient/example", obj.patient.reference))
        assertTrue(stringMatch("Peter Chalmers", obj.patient.display))
        assertTrue(stringMatch("Encounter/example", obj.encounter!!.reference))
        assertTrue(stringMatch("Inpatient", obj.encounter!!.display))
        assertTrue(stringMatch("2014-09-17", obj.dateTime))
        assertTrue(stringMatch("Practitioner/example", obj.orderer!!.reference))
        assertTrue(stringMatch("Dr Adam Careful", obj.orderer!!.display))
        assertTrue(stringMatch("http://snomed.info/sct", obj.enteralFormula!!.baseFormulaType!!.coding[0].system))
        assertTrue(stringMatch("412414007", obj.enteralFormula!!.baseFormulaType!!.coding[0].code))
        assertTrue(stringMatch("infant formula + iron", obj.enteralFormula!!.baseFormulaType!!.coding[0].display))
        assertTrue(stringMatch("Acme Infant Formula + Iron", obj.enteralFormula!!.baseFormulaProductName))
        assertTrue(stringMatch("http://hl7.org/fhir/entformul", obj.enteralFormula!!.additiveType!!.coding[0].system))
        assertTrue(stringMatch("carbohydrate", obj.enteralFormula!!.additiveType!!.coding[0].code))
        assertTrue(stringMatch("Carbohydrate", obj.enteralFormula!!.additiveType!!.coding[0].display))
        assertTrue(stringMatch("Acme High Carbohydrate Additi", obj.enteralFormula!!.additiveProductName))
        assertTrue(stringMatch("%.2f".format(20f), "%.2f".format(obj.enteralFormula!!.caloricDensity!!.value)))
        assertTrue(stringMatch("calories per ounce", obj.enteralFormula!!.caloricDensity!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.enteralFormula!!.caloricDensity!!.system))
        assertTrue(stringMatch("cal/[foz_us]", obj.enteralFormula!!.caloricDensity!!.code))
        assertTrue(stringMatch("http://hl7.org/fhir/v3/RouteO", obj.enteralFormula!!.routeofAdministration!!.coding[0].system))
        assertTrue(stringMatch("PO", obj.enteralFormula!!.routeofAdministration!!.coding[0].code))
        assertTrue(stringMatch("Swallow, oral", obj.enteralFormula!!.routeofAdministration!!.coding[0].display))
        assertEquals(true, if (obj.enteralFormula!!.routeofAdministration!!.coding[0].userSelected != null) obj.enteralFormula!!.routeofAdministration!!.coding[0].userSelected else false, "Field: obj.enteralFormula!!.routeofAdministration!!.coding[0].userSelected")
        assertTrue(stringMatch("2014-09-17", obj.enteralFormula!!.administration[0].schedule!!.repeat!!.boundsPeriod!!.start))
        assertEquals(1, obj.enteralFormula!!.administration[0].schedule!!.repeat!!.frequency)
        assertTrue(stringMatch("%.2f".format(3f), "%.2f".format(obj.enteralFormula!!.administration[0].schedule!!.repeat!!.period)))
        assertTrue(stringMatch("h", obj.enteralFormula!!.administration[0].schedule!!.repeat!!.periodUnit))
        assertTrue(stringMatch("%.2f".format(4f), "%.2f".format(obj.enteralFormula!!.administration[0].quantity!!.value)))
        assertTrue(stringMatch("ounces", obj.enteralFormula!!.administration[0].quantity!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.enteralFormula!!.administration[0].quantity!!.system))
        assertTrue(stringMatch("[foz_us]", obj.enteralFormula!!.administration[0].quantity!!.code))
        assertTrue(stringMatch("%.2f".format(32f), "%.2f".format(obj.enteralFormula!!.maxVolumeToDeliver!!.value)))
        assertTrue(stringMatch("ounces", obj.enteralFormula!!.maxVolumeToDeliver!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.enteralFormula!!.maxVolumeToDeliver!!.system))
        assertTrue(stringMatch("[foz_us]", obj.enteralFormula!!.maxVolumeToDeliver!!.code))
        assertTrue(stringMatch("Add high calorie high carbohy", obj.enteralFormula!!.administrationInstruction))
    }

    fun `nutritionorder-example-infantenteral Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `nutritionorder-example-enteralcontinuous 233 Test`() {
        val json = File("./src/test/resources/model/sample_data/nutritionorder-example-enteralcontinuous.json").readTextAndClose()
        val obj = mapper.fromJson(json, NutritionOrder::class.java)
        assertTrue(stringMatch("NutritionOrder", obj.resourceType))
        assertTrue(stringMatch("enteralcontinuous", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://www.acme.org/nutrition", obj.identifier[0].system))
        assertTrue(stringMatch("123", obj.identifier[0].value))
        assertTrue(stringMatch("active", obj.status))
        assertTrue(stringMatch("Patient/example", obj.patient.reference))
        assertTrue(stringMatch("Peter Chalmers", obj.patient.display))
        assertTrue(stringMatch("Encounter/example", obj.encounter!!.reference))
        assertTrue(stringMatch("Inpatient", obj.encounter!!.display))
        assertTrue(stringMatch("2014-09-17", obj.dateTime))
        assertTrue(stringMatch("Practitioner/example", obj.orderer!!.reference))
        assertTrue(stringMatch("Dr Adam Careful", obj.orderer!!.display))
        assertTrue(stringMatch("http://snomed/sct", obj.enteralFormula!!.baseFormulaType!!.coding[0].system))
        assertTrue(stringMatch("6547210000124112", obj.enteralFormula!!.baseFormulaType!!.coding[0].code))
        assertTrue(stringMatch("Diabetic specialty enteral fo", obj.enteralFormula!!.baseFormulaType!!.coding[0].display))
        assertTrue(stringMatch(" Acme Diabetes Formula", obj.enteralFormula!!.baseFormulaProductName))
        assertTrue(stringMatch("%.2f".format(1f), "%.2f".format(obj.enteralFormula!!.caloricDensity!!.value)))
        assertTrue(stringMatch("calories per milliliter", obj.enteralFormula!!.caloricDensity!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.enteralFormula!!.caloricDensity!!.system))
        assertTrue(stringMatch("cal/mL", obj.enteralFormula!!.caloricDensity!!.code))
        assertTrue(stringMatch("http://hl7.org/fhir/v3/RouteO", obj.enteralFormula!!.routeofAdministration!!.coding[0].system))
        assertTrue(stringMatch("NGT", obj.enteralFormula!!.routeofAdministration!!.coding[0].code))
        assertTrue(stringMatch("Instillation, nasogastric tub", obj.enteralFormula!!.routeofAdministration!!.coding[0].display))
        assertTrue(stringMatch("2014-09-17T07:00:00Z", obj.enteralFormula!!.administration[0].schedule!!.repeat!!.boundsPeriod!!.start))
        assertTrue(stringMatch("%.2f".format(60f), "%.2f".format(obj.enteralFormula!!.administration[0].rateQuantity!!.value)))
        assertTrue(stringMatch("ml/hr", obj.enteralFormula!!.administration[0].rateQuantity!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.enteralFormula!!.administration[0].rateQuantity!!.system))
        assertTrue(stringMatch("mL/h", obj.enteralFormula!!.administration[0].rateQuantity!!.code))
        assertTrue(stringMatch("2014-09-17T11:00:00Z", obj.enteralFormula!!.administration[1].schedule!!.repeat!!.boundsPeriod!!.start))
        assertTrue(stringMatch("%.2f".format(80f), "%.2f".format(obj.enteralFormula!!.administration[1].rateQuantity!!.value)))
        assertTrue(stringMatch("ml/hr", obj.enteralFormula!!.administration[1].rateQuantity!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.enteralFormula!!.administration[1].rateQuantity!!.system))
        assertTrue(stringMatch("mL/h", obj.enteralFormula!!.administration[1].rateQuantity!!.code))
        assertTrue(stringMatch("2014-09-17T15:00:00Z", obj.enteralFormula!!.administration[2].schedule!!.repeat!!.boundsPeriod!!.start))
        assertTrue(stringMatch("%.2f".format(100f), "%.2f".format(obj.enteralFormula!!.administration[2].rateQuantity!!.value)))
        assertTrue(stringMatch("ml/hr", obj.enteralFormula!!.administration[2].rateQuantity!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.enteralFormula!!.administration[2].rateQuantity!!.system))
        assertTrue(stringMatch("mL/h", obj.enteralFormula!!.administration[2].rateQuantity!!.code))
        assertTrue(stringMatch("%.2f".format(880f), "%.2f".format(obj.enteralFormula!!.maxVolumeToDeliver!!.value)))
        assertTrue(stringMatch("milliliter/day", obj.enteralFormula!!.maxVolumeToDeliver!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.enteralFormula!!.maxVolumeToDeliver!!.system))
        assertTrue(stringMatch("mL/d", obj.enteralFormula!!.maxVolumeToDeliver!!.code))
        assertTrue(stringMatch("Hold feedings from 7 pm to 7 ", obj.enteralFormula!!.administrationInstruction))
    }

    fun `nutritionorder-example-enteralcontinuous Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `nutritionorder-example-cardiacdiet 234 Test`() {
        val json = File("./src/test/resources/model/sample_data/nutritionorder-example-cardiacdiet.json").readTextAndClose()
        val obj = mapper.fromJson(json, NutritionOrder::class.java)
        assertTrue(stringMatch("NutritionOrder", obj.resourceType))
        assertTrue(stringMatch("cardiacdiet", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://goodhealthhospital.org", obj.identifier[0].system))
        assertTrue(stringMatch("123", obj.identifier[0].value))
        assertTrue(stringMatch("active", obj.status))
        assertTrue(stringMatch("Patient/example", obj.patient.reference))
        assertTrue(stringMatch("Peter Chalmers", obj.patient.display))
        assertTrue(stringMatch("Encounter/example", obj.encounter!!.reference))
        assertTrue(stringMatch("Inpatient", obj.encounter!!.display))
        assertTrue(stringMatch("2014-09-17", obj.dateTime))
        assertTrue(stringMatch("Practitioner/example", obj.orderer!!.reference))
        assertTrue(stringMatch("Dr Adam Careful", obj.orderer!!.display))
        assertTrue(stringMatch("AllergyIntolerance/example", obj.allergyIntolerance[0].reference))
        assertTrue(stringMatch("Cashew Nuts", obj.allergyIntolerance[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/diet", obj.foodPreferenceModifier[0].coding[0].system))
        assertTrue(stringMatch("dairy-free", obj.foodPreferenceModifier[0].coding[0].code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.excludeFoodModifier[0].coding[0].system))
        assertTrue(stringMatch("20140730", obj.excludeFoodModifier[0].coding[0].version))
        assertTrue(stringMatch("227493005", obj.excludeFoodModifier[0].coding[0].code))
        assertTrue(stringMatch("Cashew Nut", obj.excludeFoodModifier[0].coding[0].display))
        assertTrue(stringMatch("http://snomed.info/sct", obj.oralDiet!!.type[0].coding[0].system))
        assertTrue(stringMatch("386619000", obj.oralDiet!!.type[0].coding[0].code))
        assertTrue(stringMatch("Low sodium diet", obj.oralDiet!!.type[0].coding[0].display))
        assertTrue(stringMatch("http://goodhealthhospital.org", obj.oralDiet!!.type[0].coding[1].system))
        assertTrue(stringMatch("1040", obj.oralDiet!!.type[0].coding[1].code))
        assertTrue(stringMatch("Low Sodium Diet", obj.oralDiet!!.type[0].coding[1].display))
        assertTrue(stringMatch("Low sodium diet", obj.oralDiet!!.type[0].text))
        assertTrue(stringMatch("http://snomed.info/sct", obj.oralDiet!!.type[1].coding[0].system))
        assertTrue(stringMatch("226208002", obj.oralDiet!!.type[1].coding[0].code))
        assertTrue(stringMatch("Fluid restricted diet", obj.oralDiet!!.type[1].coding[0].display))
        assertTrue(stringMatch("http://goodhealthhospital.org", obj.oralDiet!!.type[1].coding[1].system))
        assertTrue(stringMatch("1040", obj.oralDiet!!.type[1].coding[1].code))
        assertTrue(stringMatch("Fluid restricted diet", obj.oralDiet!!.type[1].coding[1].display))
        assertTrue(stringMatch("Fluid restricted diet", obj.oralDiet!!.type[1].text))
        assertTrue(stringMatch("http://snomed.info/sct", obj.oralDiet!!.nutrient[0].modifier!!.coding[0].system))
        assertTrue(stringMatch("39972003", obj.oralDiet!!.nutrient[0].modifier!!.coding[0].code))
        assertTrue(stringMatch("Sodium", obj.oralDiet!!.nutrient[0].modifier!!.coding[0].display))
        assertTrue(stringMatch("%.2f".format(2f), "%.2f".format(obj.oralDiet!!.nutrient[0].amount!!.value)))
        assertTrue(stringMatch("grams", obj.oralDiet!!.nutrient[0].amount!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.oralDiet!!.nutrient[0].amount!!.system))
        assertTrue(stringMatch("g", obj.oralDiet!!.nutrient[0].amount!!.code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.oralDiet!!.nutrient[1].modifier!!.coding[0].system))
        assertTrue(stringMatch("33463005", obj.oralDiet!!.nutrient[1].modifier!!.coding[0].code))
        assertTrue(stringMatch("Fluid", obj.oralDiet!!.nutrient[1].modifier!!.coding[0].display))
        assertTrue(stringMatch("%.2f".format(1500f), "%.2f".format(obj.oralDiet!!.nutrient[1].amount!!.value)))
        assertTrue(stringMatch("milliliter", obj.oralDiet!!.nutrient[1].amount!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.oralDiet!!.nutrient[1].amount!!.system))
        assertTrue(stringMatch("mL", obj.oralDiet!!.nutrient[1].amount!!.code))
        assertTrue(stringMatch("Starting on 2/10 breakfast, m", obj.oralDiet!!.instruction))
    }

    fun `nutritionorder-example-cardiacdiet Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `nutritionorder-example-pureeddiet 235 Test`() {
        val json = File("./src/test/resources/model/sample_data/nutritionorder-example-pureeddiet.json").readTextAndClose()
        val obj = mapper.fromJson(json, NutritionOrder::class.java)
        assertTrue(stringMatch("NutritionOrder", obj.resourceType))
        assertTrue(stringMatch("pureeddiet", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://goodhealthhospital.org", obj.identifier[0].system))
        assertTrue(stringMatch("123", obj.identifier[0].value))
        assertTrue(stringMatch("active", obj.status))
        assertTrue(stringMatch("Patient/example", obj.patient.reference))
        assertTrue(stringMatch("Peter Chalmers", obj.patient.display))
        assertTrue(stringMatch("Encounter/example", obj.encounter!!.reference))
        assertTrue(stringMatch("Inpatient", obj.encounter!!.display))
        assertTrue(stringMatch("2014-09-17", obj.dateTime))
        assertTrue(stringMatch("Practitioner/example", obj.orderer!!.reference))
        assertTrue(stringMatch("Dr Adam Careful", obj.orderer!!.display))
        assertTrue(stringMatch("AllergyIntolerance/example", obj.allergyIntolerance[0].reference))
        assertTrue(stringMatch("Cashew Nuts", obj.allergyIntolerance[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/diet", obj.foodPreferenceModifier[0].coding[0].system))
        assertTrue(stringMatch("dairy-free", obj.foodPreferenceModifier[0].coding[0].code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.excludeFoodModifier[0].coding[0].system))
        assertTrue(stringMatch("20140730", obj.excludeFoodModifier[0].coding[0].version))
        assertTrue(stringMatch("227493005", obj.excludeFoodModifier[0].coding[0].code))
        assertTrue(stringMatch("Cashew Nut", obj.excludeFoodModifier[0].coding[0].display))
        assertTrue(stringMatch("http://snomed.info/sct", obj.oralDiet!!.type[0].coding[0].system))
        assertTrue(stringMatch("226211001", obj.oralDiet!!.type[0].coding[0].code))
        assertTrue(stringMatch("Pureed diet", obj.oralDiet!!.type[0].coding[0].display))
        assertTrue(stringMatch("http://goodhealthhospital.org", obj.oralDiet!!.type[0].coding[1].system))
        assertTrue(stringMatch("1010", obj.oralDiet!!.type[0].coding[1].code))
        assertTrue(stringMatch("Pureed diet", obj.oralDiet!!.type[0].coding[1].display))
        assertTrue(stringMatch("Pureed diet", obj.oralDiet!!.type[0].text))
        assertTrue(stringMatch("2015-02-10", obj.oralDiet!!.schedule[0].repeat!!.boundsPeriod!!.start))
        assertEquals(3, obj.oralDiet!!.schedule[0].repeat!!.frequency)
        assertTrue(stringMatch("%.2f".format(1f), "%.2f".format(obj.oralDiet!!.schedule[0].repeat!!.period)))
        assertTrue(stringMatch("d", obj.oralDiet!!.schedule[0].repeat!!.periodUnit))
        assertTrue(stringMatch("http://snomed.info/sct", obj.oralDiet!!.texture[0].modifier!!.coding[0].system))
        assertTrue(stringMatch("228055009", obj.oralDiet!!.texture[0].modifier!!.coding[0].code))
        assertTrue(stringMatch("Liquidized food", obj.oralDiet!!.texture[0].modifier!!.coding[0].display))
        assertTrue(stringMatch("Pureed", obj.oralDiet!!.texture[0].modifier!!.text))
        assertTrue(stringMatch("http://snomed.info/sct", obj.oralDiet!!.fluidConsistencyType[0].coding[0].system))
        assertTrue(stringMatch("439021000124105", obj.oralDiet!!.fluidConsistencyType[0].coding[0].code))
        assertTrue(stringMatch("Dietary liquid consistency - ", obj.oralDiet!!.fluidConsistencyType[0].coding[0].display))
        assertTrue(stringMatch("Nectar thick liquids", obj.oralDiet!!.fluidConsistencyType[0].text))
    }

    fun `nutritionorder-example-pureeddiet Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `nutritionorder-example-diabeticdiet 236 Test`() {
        val json = File("./src/test/resources/model/sample_data/nutritionorder-example-diabeticdiet.json").readTextAndClose()
        val obj = mapper.fromJson(json, NutritionOrder::class.java)
        assertTrue(stringMatch("NutritionOrder", obj.resourceType))
        assertTrue(stringMatch("diabeticdiet", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://goodhealthhospital.org", obj.identifier[0].system))
        assertTrue(stringMatch("123", obj.identifier[0].value))
        assertTrue(stringMatch("active", obj.status))
        assertTrue(stringMatch("Patient/example", obj.patient.reference))
        assertTrue(stringMatch("Peter Chalmers", obj.patient.display))
        assertTrue(stringMatch("Encounter/example", obj.encounter!!.reference))
        assertTrue(stringMatch("Inpatient", obj.encounter!!.display))
        assertTrue(stringMatch("2014-09-17", obj.dateTime))
        assertTrue(stringMatch("Practitioner/example", obj.orderer!!.reference))
        assertTrue(stringMatch("Dr Adam Careful", obj.orderer!!.display))
        assertTrue(stringMatch("AllergyIntolerance/example", obj.allergyIntolerance[0].reference))
        assertTrue(stringMatch("Cashew Nuts", obj.allergyIntolerance[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/diet", obj.foodPreferenceModifier[0].coding[0].system))
        assertTrue(stringMatch("dairy-free", obj.foodPreferenceModifier[0].coding[0].code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.excludeFoodModifier[0].coding[0].system))
        assertTrue(stringMatch("20140730", obj.excludeFoodModifier[0].coding[0].version))
        assertTrue(stringMatch("227493005", obj.excludeFoodModifier[0].coding[0].code))
        assertTrue(stringMatch("Cashew Nut", obj.excludeFoodModifier[0].coding[0].display))
        assertTrue(stringMatch("http://snomed.info/sct", obj.oralDiet!!.type[0].coding[0].system))
        assertTrue(stringMatch("160670007", obj.oralDiet!!.type[0].coding[0].code))
        assertTrue(stringMatch("Diabetic diet", obj.oralDiet!!.type[0].coding[0].display))
        assertTrue(stringMatch("http://goodhealthhospital.org", obj.oralDiet!!.type[0].coding[1].system))
        assertTrue(stringMatch("1030", obj.oralDiet!!.type[0].coding[1].code))
        assertTrue(stringMatch("DD - Diabetic diet", obj.oralDiet!!.type[0].coding[1].display))
        assertTrue(stringMatch("DD - Diabetic diet", obj.oralDiet!!.type[0].text))
        assertTrue(stringMatch("2015-02-10", obj.oralDiet!!.schedule[0].repeat!!.boundsPeriod!!.start))
        assertEquals(3, obj.oralDiet!!.schedule[0].repeat!!.frequency)
        assertTrue(stringMatch("%.2f".format(1f), "%.2f".format(obj.oralDiet!!.schedule[0].repeat!!.period)))
        assertTrue(stringMatch("d", obj.oralDiet!!.schedule[0].repeat!!.periodUnit))
        assertTrue(stringMatch("http://snomed.info/sct", obj.oralDiet!!.nutrient[0].modifier!!.coding[0].system))
        assertTrue(stringMatch("2331003", obj.oralDiet!!.nutrient[0].modifier!!.coding[0].code))
        assertTrue(stringMatch("Carbohydrate", obj.oralDiet!!.nutrient[0].modifier!!.coding[0].display))
        assertTrue(stringMatch("%.2f".format(75f), "%.2f".format(obj.oralDiet!!.nutrient[0].amount!!.value)))
        assertTrue(stringMatch("grams", obj.oralDiet!!.nutrient[0].amount!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.oralDiet!!.nutrient[0].amount!!.system))
        assertTrue(stringMatch("g", obj.oralDiet!!.nutrient[0].amount!!.code))
    }

    fun `nutritionorder-example-diabeticdiet Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `nutritionorder-example-proteinsupplement 237 Test`() {
        val json = File("./src/test/resources/model/sample_data/nutritionorder-example-proteinsupplement.json").readTextAndClose()
        val obj = mapper.fromJson(json, NutritionOrder::class.java)
        assertTrue(stringMatch("NutritionOrder", obj.resourceType))
        assertTrue(stringMatch("proteinsupplement", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://goodhealthhospital.org", obj.identifier[0].system))
        assertTrue(stringMatch("123", obj.identifier[0].value))
        assertTrue(stringMatch("active", obj.status))
        assertTrue(stringMatch("Patient/example", obj.patient.reference))
        assertTrue(stringMatch("Peter Chalmers", obj.patient.display))
        assertTrue(stringMatch("Encounter/example", obj.encounter!!.reference))
        assertTrue(stringMatch("Inpatient", obj.encounter!!.display))
        assertTrue(stringMatch("2014-09-17", obj.dateTime))
        assertTrue(stringMatch("Practitioner/example", obj.orderer!!.reference))
        assertTrue(stringMatch("Dr Adam Careful", obj.orderer!!.display))
        assertTrue(stringMatch("http://snomed.info/sct", obj.supplement[0].type!!.coding[0].system))
        assertTrue(stringMatch("442991000124104", obj.supplement[0].type!!.coding[0].code))
        assertTrue(stringMatch("Adult high protein formula", obj.supplement[0].type!!.coding[0].display))
        assertTrue(stringMatch("http://goodhealthhospital.org", obj.supplement[0].type!!.coding[1].system))
        assertTrue(stringMatch("1000", obj.supplement[0].type!!.coding[1].code))
        assertTrue(stringMatch("High Protein Powder", obj.supplement[0].type!!.coding[1].display))
        assertTrue(stringMatch("High Protein Powder", obj.supplement[0].type!!.text))
        assertTrue(stringMatch("Beneprotein", obj.supplement[0].productName))
        assertTrue(stringMatch("2015-02-10", obj.supplement[0].schedule[0].repeat!!.boundsPeriod!!.start))
        assertTrue(stringMatch("C", obj.supplement[0].schedule[0].repeat!!.when_fhir[0]))
        assertTrue(stringMatch("%.2f".format(1f), "%.2f".format(obj.supplement[0].quantity!!.value)))
        assertTrue(stringMatch("scoop", obj.supplement[0].quantity!!.unit))
    }

    @Test
    fun `nutritionorder-example-proteinsupplement 238 Test`() {
        val json = File("./src/test/resources/model/sample_data/nutritionorder-example-proteinsupplement.json").readTextAndClose()
        val obj = mapper.fromJson(json, NutritionOrder::class.java)
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.supplement[0].quantity!!.system))
        assertTrue(stringMatch("{scoop}", obj.supplement[0].quantity!!.code))
        assertTrue(stringMatch("Beneprotein 1 scoop TID with ", obj.supplement[0].instruction))
    }

    fun `nutritionorder-example-proteinsupplement Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `nutritionorder-example-renaldiet 239 Test`() {
        val json = File("./src/test/resources/model/sample_data/nutritionorder-example-renaldiet.json").readTextAndClose()
        val obj = mapper.fromJson(json, NutritionOrder::class.java)
        assertTrue(stringMatch("NutritionOrder", obj.resourceType))
        assertTrue(stringMatch("renaldiet", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://goodhealthhospital.org", obj.identifier[0].system))
        assertTrue(stringMatch("123", obj.identifier[0].value))
        assertTrue(stringMatch("active", obj.status))
        assertTrue(stringMatch("Patient/example", obj.patient.reference))
        assertTrue(stringMatch("Peter Chalmers", obj.patient.display))
        assertTrue(stringMatch("Encounter/example", obj.encounter!!.reference))
        assertTrue(stringMatch("Inpatient", obj.encounter!!.display))
        assertTrue(stringMatch("2014-09-17", obj.dateTime))
        assertTrue(stringMatch("Practitioner/example", obj.orderer!!.reference))
        assertTrue(stringMatch("Dr Adam Careful", obj.orderer!!.display))
        assertTrue(stringMatch("AllergyIntolerance/example", obj.allergyIntolerance[0].reference))
        assertTrue(stringMatch("Cashew Nuts", obj.allergyIntolerance[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/diet", obj.foodPreferenceModifier[0].coding[0].system))
        assertTrue(stringMatch("dairy-free", obj.foodPreferenceModifier[0].coding[0].code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.excludeFoodModifier[0].coding[0].system))
        assertTrue(stringMatch("20140730", obj.excludeFoodModifier[0].coding[0].version))
        assertTrue(stringMatch("227493005", obj.excludeFoodModifier[0].coding[0].code))
        assertTrue(stringMatch("Cashew Nut", obj.excludeFoodModifier[0].coding[0].display))
        assertTrue(stringMatch("http://snomed.info/sct", obj.oralDiet!!.type[0].coding[0].system))
        assertTrue(stringMatch("33489005", obj.oralDiet!!.type[0].coding[0].code))
        assertTrue(stringMatch("Renal diet", obj.oralDiet!!.type[0].coding[0].display))
        assertTrue(stringMatch("http://goodhealthhospital.org", obj.oralDiet!!.type[0].coding[1].system))
        assertTrue(stringMatch("1050", obj.oralDiet!!.type[0].coding[1].code))
        assertTrue(stringMatch("Renal", obj.oralDiet!!.type[0].coding[1].display))
        assertTrue(stringMatch("Renal Diet", obj.oralDiet!!.type[0].text))
        assertTrue(stringMatch("2015-02-10", obj.oralDiet!!.schedule[0].repeat!!.boundsPeriod!!.start))
        assertEquals(3, obj.oralDiet!!.schedule[0].repeat!!.frequency)
        assertTrue(stringMatch("%.2f".format(1f), "%.2f".format(obj.oralDiet!!.schedule[0].repeat!!.period)))
        assertTrue(stringMatch("d", obj.oralDiet!!.schedule[0].repeat!!.periodUnit))
        assertTrue(stringMatch("http://snomed.info/sct", obj.oralDiet!!.nutrient[0].modifier!!.coding[0].system))
        assertTrue(stringMatch("39972003", obj.oralDiet!!.nutrient[0].modifier!!.coding[0].code))
        assertTrue(stringMatch("Sodium", obj.oralDiet!!.nutrient[0].modifier!!.coding[0].display))
        assertTrue(stringMatch("%.2f".format(2f), "%.2f".format(obj.oralDiet!!.nutrient[0].amount!!.value)))
        assertTrue(stringMatch("grams", obj.oralDiet!!.nutrient[0].amount!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.oralDiet!!.nutrient[0].amount!!.system))
        assertTrue(stringMatch("g", obj.oralDiet!!.nutrient[0].amount!!.code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.oralDiet!!.nutrient[1].modifier!!.coding[0].system))
        assertTrue(stringMatch("30820000", obj.oralDiet!!.nutrient[1].modifier!!.coding[0].code))
        assertTrue(stringMatch("Phosphorus", obj.oralDiet!!.nutrient[1].modifier!!.coding[0].display))
        assertTrue(stringMatch("%.2f".format(1000f), "%.2f".format(obj.oralDiet!!.nutrient[1].amount!!.value)))
        assertTrue(stringMatch("milligrams", obj.oralDiet!!.nutrient[1].amount!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.oralDiet!!.nutrient[1].amount!!.system))
        assertTrue(stringMatch("mg", obj.oralDiet!!.nutrient[1].amount!!.code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.oralDiet!!.nutrient[2].modifier!!.coding[0].system))
        assertTrue(stringMatch("88480006", obj.oralDiet!!.nutrient[2].modifier!!.coding[0].code))
        assertTrue(stringMatch("Potassium", obj.oralDiet!!.nutrient[2].modifier!!.coding[0].display))
        assertTrue(stringMatch("%.2f".format(2f), "%.2f".format(obj.oralDiet!!.nutrient[2].amount!!.value)))
        assertTrue(stringMatch("grams", obj.oralDiet!!.nutrient[2].amount!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.oralDiet!!.nutrient[2].amount!!.system))
        assertTrue(stringMatch("g", obj.oralDiet!!.nutrient[2].amount!!.code))
    }

    fun `nutritionorder-example-renaldiet Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `nutritionorder-example-energysupplement 240 Test`() {
        val json = File("./src/test/resources/model/sample_data/nutritionorder-example-energysupplement.json").readTextAndClose()
        val obj = mapper.fromJson(json, NutritionOrder::class.java)
        assertTrue(stringMatch("NutritionOrder", obj.resourceType))
        assertTrue(stringMatch("energysupplement", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://goodhealthhospital.org", obj.identifier[0].system))
        assertTrue(stringMatch("123", obj.identifier[0].value))
        assertTrue(stringMatch("active", obj.status))
        assertTrue(stringMatch("Patient/example", obj.patient.reference))
        assertTrue(stringMatch("Peter Chalmers", obj.patient.display))
        assertTrue(stringMatch("Encounter/example", obj.encounter!!.reference))
        assertTrue(stringMatch("Inpatient", obj.encounter!!.display))
        assertTrue(stringMatch("2014-09-17", obj.dateTime))
        assertTrue(stringMatch("Practitioner/example", obj.orderer!!.reference))
        assertTrue(stringMatch("Dr Adam Careful", obj.orderer!!.display))
        assertTrue(stringMatch("AllergyIntolerance/example", obj.allergyIntolerance[0].reference))
        assertTrue(stringMatch("Cashew Nuts", obj.allergyIntolerance[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/diet", obj.foodPreferenceModifier[0].coding[0].system))
        assertTrue(stringMatch("kosher", obj.foodPreferenceModifier[0].coding[0].code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.excludeFoodModifier[0].coding[0].system))
        assertTrue(stringMatch("20140730", obj.excludeFoodModifier[0].coding[0].version))
        assertTrue(stringMatch("227493005", obj.excludeFoodModifier[0].coding[0].code))
        assertTrue(stringMatch("Cashew Nut", obj.excludeFoodModifier[0].coding[0].display))
        assertTrue(stringMatch("http://snomed.info/sct", obj.supplement[0].type!!.coding[0].system))
        assertTrue(stringMatch("442971000124100", obj.supplement[0].type!!.coding[0].code))
        assertTrue(stringMatch("Adult high energy formula", obj.supplement[0].type!!.coding[0].display))
        assertTrue(stringMatch("http://goodhealthhospital.org", obj.supplement[0].type!!.coding[1].system))
        assertTrue(stringMatch("1010", obj.supplement[0].type!!.coding[1].code))
        assertTrue(stringMatch("Adult high energy drink", obj.supplement[0].type!!.coding[1].display))
        assertTrue(stringMatch("Adult high energy drink", obj.supplement[0].type!!.text))
        assertTrue(stringMatch("Ensure", obj.supplement[0].productName))
        assertTrue(stringMatch("2015-02-10", obj.supplement[0].schedule[0].repeat!!.boundsPeriod!!.start))
        assertEquals(3, obj.supplement[0].schedule[0].repeat!!.frequency)
        assertTrue(stringMatch("%.2f".format(1f), "%.2f".format(obj.supplement[0].schedule[0].repeat!!.period)))
        assertTrue(stringMatch("d", obj.supplement[0].schedule[0].repeat!!.periodUnit))
        assertTrue(stringMatch("%.2f".format(1f), "%.2f".format(obj.supplement[0].quantity!!.value)))
        assertTrue(stringMatch("8 oz can", obj.supplement[0].quantity!!.unit))
    }

    fun `nutritionorder-example-energysupplement Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }
}
