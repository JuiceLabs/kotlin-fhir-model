package com.juicelabs.fhir.model

import java.io.File
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.junit.jupiter.api.Test

class ClaimDataTest : DataTests() {
    @Test
    fun `claim-example-institutional-rich 186 Test`() {
        val json = File("./src/test/resources/model/sample_data/claim-example-institutional-rich.json").readTextAndClose()
        val obj = mapper.fromJson(json, Claim::class.java)
        assertTrue(stringMatch("Claim", obj.resourceType))
        assertTrue(stringMatch("960151", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://happyhospital.com/clai", obj.identifier[0].system))
        assertTrue(stringMatch("96123451", obj.identifier[0].value))
        assertTrue(stringMatch("active", obj.status))
        assertTrue(stringMatch("http://hl7.org/fhir/ex-claimt", obj.type!!.coding[0].system))
        assertTrue(stringMatch("institutional", obj.type!!.coding[0].code))
        assertTrue(stringMatch("complete", obj.use))
        assertTrue(stringMatch("Patient/1", obj.patient!!.reference))
        assertEquals("2014-08-15", obj.billablePeriod!!.start.toString())
        assertEquals("2014-08-16", obj.billablePeriod!!.end.toString())
        assertEquals("2014-08-16", obj.created.toString())
        assertTrue(stringMatch("http://jurisdiction.org/facil", obj.enterer!!.identifier!!.system))
        assertTrue(stringMatch("UC1234", obj.enterer!!.identifier!!.value))
        assertTrue(stringMatch("Organization/2", obj.insurer!!.reference))
        assertTrue(stringMatch("http://npid.org/providerid", obj.provider!!.identifier!!.system))
        assertTrue(stringMatch("NJ12345", obj.provider!!.identifier!!.value))
        assertTrue(stringMatch("Organization/1", obj.organization!!.reference))
        assertTrue(stringMatch("normal", obj.priority!!.coding[0].code))
        assertTrue(stringMatch("provider", obj.payee!!.type.coding[0].code))
        assertTrue(stringMatch("http://jurisdiction.org/facil", obj.facility!!.identifier!!.system))
        assertTrue(stringMatch("HOSP1234", obj.facility!!.identifier!!.value))
        assertEquals(1, obj.careTeam[0].sequence)
        assertTrue(stringMatch("Practitioner/example", obj.careTeam[0].provider.reference))
        assertEquals(true, if (obj.careTeam[0].responsible != null) obj.careTeam[0].responsible else false, "Field: obj.careTeam[0].responsible")
        assertTrue(stringMatch("http://hl7.org/fhir/claim-car", obj.careTeam[0].role!!.coding[0].system))
        assertTrue(stringMatch("primary", obj.careTeam[0].role!!.coding[0].code))
        assertTrue(stringMatch("http://hl7.org/fhir/provider-", obj.careTeam[0].qualification!!.coding[0].system))
        assertTrue(stringMatch("physician", obj.careTeam[0].qualification!!.coding[0].code))
        assertEquals(1, obj.diagnosis[0].sequence)
        assertTrue(stringMatch("654456", obj.diagnosis[0].diagnosisCodeableConcept.coding[0].code))
        assertTrue(stringMatch("http://hl7.org/fhir/ex-diagno", obj.diagnosis[0].type[0].coding[0].system))
        assertTrue(stringMatch("admitting", obj.diagnosis[0].type[0].coding[0].code))
        assertTrue(stringMatch("http://hl7.org/fhir/ex-diagno", obj.diagnosis[0].packageCode!!.coding[0].system))
        assertTrue(stringMatch("400", obj.diagnosis[0].packageCode!!.coding[0].code))
        assertTrue(stringMatch("Head trauma - concussion", obj.diagnosis[0].packageCode!!.coding[0].display))
        assertEquals(1, obj.insurance[0].sequence)
        assertEquals(true, if (obj.insurance[0].focal != null) obj.insurance[0].focal else false, "Field: obj.insurance[0].focal")
        assertTrue(stringMatch("Coverage/9876B1", obj.insurance[0].coverage.reference))
        assertTrue(stringMatch("BA987123", obj.insurance[0].businessArrangement))
        assertTrue(stringMatch("PA2014G56473", obj.insurance[0].preAuthRef[0]))
        assertEquals("2014-07-09", obj.accident!!.date.toString())
        assertTrue(stringMatch("http://hl7.org/fhir/v3/ActInc", obj.accident!!.type!!.coding[0].system))
        assertTrue(stringMatch("SPT", obj.accident!!.type!!.coding[0].code))
        assertTrue(stringMatch("Sporting Accident", obj.accident!!.type!!.coding[0].display))
        assertTrue(stringMatch("Grouse Mountain Ski Hill", obj.accident!!.locationAddress!!.text))
        assertEquals("2014-08-16", obj.employmentImpacted!!.start.toString())
        assertEquals("2014-08-16", obj.employmentImpacted!!.end.toString())
        assertEquals("2014-08-15", obj.hospitalization!!.start.toString())
        assertEquals("2014-08-16", obj.hospitalization!!.end.toString())
        assertEquals(1, obj.item[0].sequence)
        assertEquals(1, obj.item[0].careTeamLinkId[0])
        assertTrue(stringMatch("http://hl7.org/fhir/ex-servic", obj.item[0].service!!.coding[0].system))
        assertTrue(stringMatch("exam", obj.item[0].service!!.coding[0].code))
        assertEquals("2014-08-16", obj.item[0].servicedDate.toString())
        assertTrue(stringMatch("%.2f".format(125.00f), "%.2f".format(obj.item[0].unitPrice!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].unitPrice!!.system))
        assertTrue(stringMatch("USD", obj.item[0].unitPrice!!.code))
        assertTrue(stringMatch("%.2f".format(125.00f), "%.2f".format(obj.item[0].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].net!!.system))
    }

    @Test
    fun `claim-example-institutional-rich 187 Test`() {
        val json = File("./src/test/resources/model/sample_data/claim-example-institutional-rich.json").readTextAndClose()
        val obj = mapper.fromJson(json, Claim::class.java)
        assertTrue(stringMatch("USD", obj.item[0].net!!.code))
        assertTrue(stringMatch("%.2f".format(125.00f), "%.2f".format(obj.total!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.total!!.system))
        assertTrue(stringMatch("USD", obj.total!!.code))
    }

    @Test
    fun `claim-example-professional 188 Test`() {
        val json = File("./src/test/resources/model/sample_data/claim-example-professional.json").readTextAndClose()
        val obj = mapper.fromJson(json, Claim::class.java)
        assertTrue(stringMatch("Claim", obj.resourceType))
        assertTrue(stringMatch("860150", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://happypdocs.com/claim", obj.identifier[0].system))
        assertTrue(stringMatch("8612345", obj.identifier[0].value))
        assertTrue(stringMatch("active", obj.status))
        assertTrue(stringMatch("http://hl7.org/fhir/ex-claimt", obj.type!!.coding[0].system))
        assertTrue(stringMatch("professional", obj.type!!.coding[0].code))
        assertTrue(stringMatch("complete", obj.use))
        assertTrue(stringMatch("Patient/1", obj.patient!!.reference))
        assertEquals("2014-08-16", obj.created.toString())
        assertTrue(stringMatch("Organization/2", obj.insurer!!.reference))
        assertTrue(stringMatch("Organization/1", obj.organization!!.reference))
        assertTrue(stringMatch("normal", obj.priority!!.coding[0].code))
        assertTrue(stringMatch("provider", obj.payee!!.type.coding[0].code))
        assertEquals(1, obj.careTeam[0].sequence)
        assertTrue(stringMatch("Practitioner/example", obj.careTeam[0].provider.reference))
        assertEquals(1, obj.diagnosis[0].sequence)
        assertTrue(stringMatch("654456", obj.diagnosis[0].diagnosisCodeableConcept.coding[0].code))
        assertEquals(1, obj.insurance[0].sequence)
        assertEquals(true, if (obj.insurance[0].focal != null) obj.insurance[0].focal else false, "Field: obj.insurance[0].focal")
        assertTrue(stringMatch("Coverage/9876B1", obj.insurance[0].coverage.reference))
        assertEquals(1, obj.item[0].sequence)
        assertEquals(1, obj.item[0].careTeamLinkId[0])
        assertTrue(stringMatch("http://hl7.org/fhir/ex-servic", obj.item[0].service!!.coding[0].system))
        assertTrue(stringMatch("exam", obj.item[0].service!!.coding[0].code))
        assertEquals("2014-08-16", obj.item[0].servicedDate.toString())
        assertTrue(stringMatch("%.2f".format(75.00f), "%.2f".format(obj.item[0].unitPrice!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].unitPrice!!.system))
        assertTrue(stringMatch("USD", obj.item[0].unitPrice!!.code))
        assertTrue(stringMatch("%.2f".format(75.00f), "%.2f".format(obj.item[0].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].net!!.system))
        assertTrue(stringMatch("USD", obj.item[0].net!!.code))
    }

    @Test
    fun `claim-example 189 Test`() {
        val json = File("./src/test/resources/model/sample_data/claim-example.json").readTextAndClose()
        val obj = mapper.fromJson(json, Claim::class.java)
        assertTrue(stringMatch("Claim", obj.resourceType))
        assertTrue(stringMatch("100150", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://happyvalley.com/claim", obj.identifier[0].system))
        assertTrue(stringMatch("12345", obj.identifier[0].value))
        assertTrue(stringMatch("active", obj.status))
        assertTrue(stringMatch("http://hl7.org/fhir/ex-claimt", obj.type!!.coding[0].system))
        assertTrue(stringMatch("oral", obj.type!!.coding[0].code))
        assertTrue(stringMatch("complete", obj.use))
        assertTrue(stringMatch("Patient/1", obj.patient!!.reference))
        assertEquals("2014-08-16", obj.created.toString())
        assertTrue(stringMatch("Organization/2", obj.insurer!!.reference))
        assertTrue(stringMatch("Organization/1", obj.organization!!.reference))
        assertTrue(stringMatch("normal", obj.priority!!.coding[0].code))
        assertTrue(stringMatch("provider", obj.payee!!.type.coding[0].code))
        assertEquals(1, obj.careTeam[0].sequence)
        assertTrue(stringMatch("Practitioner/example", obj.careTeam[0].provider.reference))
        assertEquals(1, obj.diagnosis[0].sequence)
        assertTrue(stringMatch("123456", obj.diagnosis[0].diagnosisCodeableConcept.coding[0].code))
        assertEquals(1, obj.insurance[0].sequence)
        assertEquals(true, if (obj.insurance[0].focal != null) obj.insurance[0].focal else false, "Field: obj.insurance[0].focal")
        assertTrue(stringMatch("Coverage/9876B1", obj.insurance[0].coverage.reference))
        assertEquals(1, obj.item[0].sequence)
        assertEquals(1, obj.item[0].careTeamLinkId[0])
        assertTrue(stringMatch("1200", obj.item[0].service!!.coding[0].code))
        assertEquals("2014-08-16", obj.item[0].servicedDate.toString())
        assertTrue(stringMatch("%.2f".format(135.57f), "%.2f".format(obj.item[0].unitPrice!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].unitPrice!!.system))
        assertTrue(stringMatch("USD", obj.item[0].unitPrice!!.code))
        assertTrue(stringMatch("%.2f".format(135.57f), "%.2f".format(obj.item[0].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].net!!.system))
        assertTrue(stringMatch("USD", obj.item[0].net!!.code))
    }

    @Test
    fun `claim-example-vision 190 Test`() {
        val json = File("./src/test/resources/model/sample_data/claim-example-vision.json").readTextAndClose()
        val obj = mapper.fromJson(json, Claim::class.java)
    }

    @Test
    fun `claim-example-vision 191 Test`() {
        val json = File("./src/test/resources/model/sample_data/claim-example-vision.json").readTextAndClose()
        val obj = mapper.fromJson(json, Claim::class.java)
        assertTrue(stringMatch("Claim", obj.resourceType))
        assertTrue(stringMatch("660150", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://happysight.com/claim", obj.identifier[0].system))
        assertTrue(stringMatch("6612345", obj.identifier[0].value))
        assertTrue(stringMatch("active", obj.status))
        assertTrue(stringMatch("http://hl7.org/fhir/ex-claimt", obj.type!!.coding[0].system))
        assertTrue(stringMatch("vision", obj.type!!.coding[0].code))
        assertTrue(stringMatch("complete", obj.use))
        assertTrue(stringMatch("Patient/1", obj.patient!!.reference))
        assertEquals("2014-08-16", obj.created.toString())
        assertTrue(stringMatch("Organization/2", obj.insurer!!.reference))
        assertTrue(stringMatch("Organization/1", obj.organization!!.reference))
        assertTrue(stringMatch("normal", obj.priority!!.coding[0].code))
        assertTrue(stringMatch("provider", obj.payee!!.type.coding[0].code))
        assertEquals(1, obj.careTeam[0].sequence)
        assertTrue(stringMatch("Practitioner/example", obj.careTeam[0].provider.reference))
        assertEquals(1, obj.diagnosis[0].sequence)
        assertTrue(stringMatch("654321", obj.diagnosis[0].diagnosisCodeableConcept.coding[0].code))
        assertEquals(1, obj.insurance[0].sequence)
        assertEquals(true, if (obj.insurance[0].focal != null) obj.insurance[0].focal else false, "Field: obj.insurance[0].focal")
        assertTrue(stringMatch("Coverage/9876B1", obj.insurance[0].coverage.reference))
        assertEquals(1, obj.item[0].sequence)
        assertEquals(1, obj.item[0].careTeamLinkId[0])
        assertTrue(stringMatch("http://hl7.org/fhir/ex-vision", obj.item[0].service!!.coding[0].system))
        assertTrue(stringMatch("exam", obj.item[0].service!!.coding[0].code))
        assertEquals("2014-08-16", obj.item[0].servicedDate.toString())
        assertTrue(stringMatch("%.2f".format(80.00f), "%.2f".format(obj.item[0].unitPrice!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].unitPrice!!.system))
        assertTrue(stringMatch("USD", obj.item[0].unitPrice!!.code))
        assertTrue(stringMatch("%.2f".format(80.00f), "%.2f".format(obj.item[0].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].net!!.system))
        assertTrue(stringMatch("USD", obj.item[0].net!!.code))
    }

    @Test
    fun `claim-example-vision-glasses-3tier 192 Test`() {
        val json = File("./src/test/resources/model/sample_data/claim-example-vision-glasses-3tier.json").readTextAndClose()
        val obj = mapper.fromJson(json, Claim::class.java)
        assertTrue(stringMatch("Claim", obj.resourceType))
        assertTrue(stringMatch("660152", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("ClaimResponse", (obj.contained[0] as ClaimResponse).resourceType))
        assertTrue(stringMatch("claimresponse-1", (obj.contained[0] as ClaimResponse).id))
        assertTrue(stringMatch("http://thebenefircompany.com/", (obj.contained[0] as ClaimResponse).identifier[0].system))
        assertTrue(stringMatch("CR6532875367", (obj.contained[0] as ClaimResponse).identifier[0].value))
        assertTrue(stringMatch("Device", (obj.contained[1] as Device).resourceType))
        assertTrue(stringMatch("device-frame", (obj.contained[1] as Device).id))
        assertTrue(stringMatch("Device", (obj.contained[2] as Device).resourceType))
        assertTrue(stringMatch("device-lens", (obj.contained[2] as Device).id))
        assertTrue(stringMatch("http://happysight.com/claim", obj.identifier[0].system))
        assertTrue(stringMatch("6612347", obj.identifier[0].value))
        assertTrue(stringMatch("active", obj.status))
        assertTrue(stringMatch("http://hl7.org/fhir/ex-claimt", obj.type!!.coding[0].system))
        assertTrue(stringMatch("vision", obj.type!!.coding[0].code))
        assertTrue(stringMatch("complete", obj.use))
        assertTrue(stringMatch("Patient/1", obj.patient!!.reference))
        assertEquals("2014-08-16", obj.created.toString())
        assertTrue(stringMatch("Organization/2", obj.insurer!!.reference))
        assertTrue(stringMatch("Organization/1", obj.organization!!.reference))
        assertTrue(stringMatch("normal", obj.priority!!.coding[0].code))
        assertTrue(stringMatch("http://www.optdocs.com/prescr", obj.prescription!!.reference))
        assertTrue(stringMatch("provider", obj.payee!!.type.coding[0].code))
        assertEquals(1, obj.careTeam[0].sequence)
        assertTrue(stringMatch("Practitioner/example", obj.careTeam[0].provider.reference))
        assertEquals(1, obj.diagnosis[0].sequence)
        assertTrue(stringMatch("654321", obj.diagnosis[0].diagnosisCodeableConcept.coding[0].code))
        assertEquals(1, obj.insurance[0].sequence)
        assertEquals(false, if (obj.insurance[0].focal != null) obj.insurance[0].focal else false, "Field: obj.insurance[0].focal")
        assertTrue(stringMatch("Coverage/9876B1", obj.insurance[0].coverage.reference))
        assertTrue(stringMatch("PR7652387237", obj.insurance[0].preAuthRef[0]))
        assertTrue(stringMatch("#claimresponse-1", obj.insurance[0].claimResponse!!.reference))
        assertEquals(2, obj.insurance[1].sequence)
        assertEquals(true, if (obj.insurance[1].focal != null) obj.insurance[1].focal else false, "Field: obj.insurance[1].focal")
        assertTrue(stringMatch("Coverage/9876B1", obj.insurance[1].coverage.reference))
    }

    @Test
    fun `claim-example-vision-glasses-3tier 193 Test`() {
        val json = File("./src/test/resources/model/sample_data/claim-example-vision-glasses-3tier.json").readTextAndClose()
        val obj = mapper.fromJson(json, Claim::class.java)
        assertTrue(stringMatch("AB543GTD7567", obj.insurance[1].preAuthRef[0]))
        assertEquals(1, obj.item[0].sequence)
        assertEquals(1, obj.item[0].careTeamLinkId[0])
        assertTrue(stringMatch("http://hl7.org/fhir/ex-revenu", obj.item[0].revenue!!.coding[0].system))
        assertTrue(stringMatch("0010", obj.item[0].revenue!!.coding[0].code))
        assertTrue(stringMatch("Vision Clinic", obj.item[0].revenue!!.coding[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/benefit-s", obj.item[0].category!!.coding[0].system))
        assertTrue(stringMatch("F6", obj.item[0].category!!.coding[0].code))
        assertTrue(stringMatch("Vision Coverage", obj.item[0].category!!.coding[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/ex-vision", obj.item[0].service!!.coding[0].system))
        assertTrue(stringMatch("glasses", obj.item[0].service!!.coding[0].code))
        assertTrue(stringMatch("http://hl7.org/fhir/modifiers", obj.item[0].modifier[0].coding[0].system))
        assertTrue(stringMatch("rooh", obj.item[0].modifier[0].coding[0].code))
        assertTrue(stringMatch("http://hl7.org/fhir/ex-progra", obj.item[0].programCode[0].coding[0].system))
        assertTrue(stringMatch("none", obj.item[0].programCode[0].coding[0].code))
        assertEquals("2014-08-16", obj.item[0].servicedDate.toString())
        assertTrue(stringMatch("%.2f".format(235.40f), "%.2f".format(obj.item[0].unitPrice!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].unitPrice!!.system))
        assertTrue(stringMatch("USD", obj.item[0].unitPrice!!.code))
        assertTrue(stringMatch("%.2f".format(235.40f), "%.2f".format(obj.item[0].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].net!!.system))
        assertTrue(stringMatch("USD", obj.item[0].net!!.code))
        assertEquals(1, obj.item[0].detail[0].sequence)
        assertTrue(stringMatch("http://hl7.org/fhir/ex-revenu", obj.item[0].detail[0].revenue!!.coding[0].system))
        assertTrue(stringMatch("0010", obj.item[0].detail[0].revenue!!.coding[0].code))
        assertTrue(stringMatch("Vision Clinic", obj.item[0].detail[0].revenue!!.coding[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/benefit-s", obj.item[0].detail[0].category!!.coding[0].system))
        assertTrue(stringMatch("F6", obj.item[0].detail[0].category!!.coding[0].code))
        assertTrue(stringMatch("Vision Coverage", obj.item[0].detail[0].category!!.coding[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/ex-vision", obj.item[0].detail[0].service!!.coding[0].system))
        assertTrue(stringMatch("frame", obj.item[0].detail[0].service!!.coding[0].code))
        assertTrue(stringMatch("http://hl7.org/fhir/modifiers", obj.item[0].detail[0].modifier[0].coding[0].system))
        assertTrue(stringMatch("rooh", obj.item[0].detail[0].modifier[0].coding[0].code))
        assertTrue(stringMatch("%.2f".format(100.00f), "%.2f".format(obj.item[0].detail[0].unitPrice!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].detail[0].unitPrice!!.system))
        assertTrue(stringMatch("USD", obj.item[0].detail[0].unitPrice!!.code))
        assertTrue(stringMatch("%.2f".format(1.1f), "%.2f".format(obj.item[0].detail[0].factor)))
        assertTrue(stringMatch("%.2f".format(110.00f), "%.2f".format(obj.item[0].detail[0].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].detail[0].net!!.system))
        assertTrue(stringMatch("USD", obj.item[0].detail[0].net!!.code))
        assertTrue(stringMatch("#device-frame", obj.item[0].detail[0].udi[0].reference))
        assertEquals(2, obj.item[0].detail[1].sequence)
        assertTrue(stringMatch("http://hl7.org/fhir/ex-revenu", obj.item[0].detail[1].revenue!!.coding[0].system))
        assertTrue(stringMatch("0010", obj.item[0].detail[1].revenue!!.coding[0].code))
        assertTrue(stringMatch("Vision Clinic", obj.item[0].detail[1].revenue!!.coding[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/benefit-s", obj.item[0].detail[1].category!!.coding[0].system))
        assertTrue(stringMatch("F6", obj.item[0].detail[1].category!!.coding[0].code))
        assertTrue(stringMatch("Vision Coverage", obj.item[0].detail[1].category!!.coding[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/ex-vision", obj.item[0].detail[1].service!!.coding[0].system))
        assertTrue(stringMatch("lens", obj.item[0].detail[1].service!!.coding[0].code))
        assertTrue(stringMatch("http://hl7.org/fhir/ex-progra", obj.item[0].detail[1].programCode[0].coding[0].system))
        assertTrue(stringMatch("none", obj.item[0].detail[1].programCode[0].coding[0].code))
        assertTrue(stringMatch("%.2f".format(2f), "%.2f".format(obj.item[0].detail[1].quantity!!.value)))
        assertTrue(stringMatch("%.2f".format(55.00f), "%.2f".format(obj.item[0].detail[1].unitPrice!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].detail[1].unitPrice!!.system))
        assertTrue(stringMatch("USD", obj.item[0].detail[1].unitPrice!!.code))
        assertTrue(stringMatch("%.2f".format(110.00f), "%.2f".format(obj.item[0].detail[1].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].detail[1].net!!.system))
        assertTrue(stringMatch("USD", obj.item[0].detail[1].net!!.code))
        assertEquals(1, obj.item[0].detail[1].subDetail[0].sequence)
        assertTrue(stringMatch("http://hl7.org/fhir/ex-revenu", obj.item[0].detail[1].subDetail[0].revenue!!.coding[0].system))
        assertTrue(stringMatch("0010", obj.item[0].detail[1].subDetail[0].revenue!!.coding[0].code))
        assertTrue(stringMatch("Vision Clinic", obj.item[0].detail[1].subDetail[0].revenue!!.coding[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/benefit-s", obj.item[0].detail[1].subDetail[0].category!!.coding[0].system))
        assertTrue(stringMatch("F6", obj.item[0].detail[1].subDetail[0].category!!.coding[0].code))
        assertTrue(stringMatch("Vision Coverage", obj.item[0].detail[1].subDetail[0].category!!.coding[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/ex-vision", obj.item[0].detail[1].subDetail[0].service!!.coding[0].system))
        assertTrue(stringMatch("lens", obj.item[0].detail[1].subDetail[0].service!!.coding[0].code))
        assertTrue(stringMatch("http://hl7.org/fhir/modifiers", obj.item[0].detail[1].subDetail[0].modifier[0].coding[0].system))
        assertTrue(stringMatch("rooh", obj.item[0].detail[1].subDetail[0].modifier[0].coding[0].code))
        assertTrue(stringMatch("http://hl7.org/fhir/ex-progra", obj.item[0].detail[1].subDetail[0].programCode[0].coding[0].system))
    }

    @Test
    fun `claim-example-vision-glasses-3tier 194 Test`() {
        val json = File("./src/test/resources/model/sample_data/claim-example-vision-glasses-3tier.json").readTextAndClose()
        val obj = mapper.fromJson(json, Claim::class.java)
        assertTrue(stringMatch("none", obj.item[0].detail[1].subDetail[0].programCode[0].coding[0].code))
        assertTrue(stringMatch("%.2f".format(2f), "%.2f".format(obj.item[0].detail[1].subDetail[0].quantity!!.value)))
        assertTrue(stringMatch("%.2f".format(30.00f), "%.2f".format(obj.item[0].detail[1].subDetail[0].unitPrice!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].detail[1].subDetail[0].unitPrice!!.system))
        assertTrue(stringMatch("USD", obj.item[0].detail[1].subDetail[0].unitPrice!!.code))
        assertTrue(stringMatch("%.2f".format(1.1f), "%.2f".format(obj.item[0].detail[1].subDetail[0].factor)))
        assertTrue(stringMatch("%.2f".format(66.00f), "%.2f".format(obj.item[0].detail[1].subDetail[0].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].detail[1].subDetail[0].net!!.system))
        assertTrue(stringMatch("USD", obj.item[0].detail[1].subDetail[0].net!!.code))
        assertTrue(stringMatch("#device-lens", obj.item[0].detail[1].subDetail[0].udi[0].reference))
        assertEquals(2, obj.item[0].detail[1].subDetail[1].sequence)
        assertTrue(stringMatch("http://hl7.org/fhir/ex-revenu", obj.item[0].detail[1].subDetail[1].revenue!!.coding[0].system))
        assertTrue(stringMatch("0010", obj.item[0].detail[1].subDetail[1].revenue!!.coding[0].code))
        assertTrue(stringMatch("Vision Clinic", obj.item[0].detail[1].subDetail[1].revenue!!.coding[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/benefit-s", obj.item[0].detail[1].subDetail[1].category!!.coding[0].system))
        assertTrue(stringMatch("F6", obj.item[0].detail[1].subDetail[1].category!!.coding[0].code))
        assertTrue(stringMatch("Vision Coverage", obj.item[0].detail[1].subDetail[1].category!!.coding[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/ex-vision", obj.item[0].detail[1].subDetail[1].service!!.coding[0].system))
        assertTrue(stringMatch("hardening", obj.item[0].detail[1].subDetail[1].service!!.coding[0].code))
        assertTrue(stringMatch("http://hl7.org/fhir/modifiers", obj.item[0].detail[1].subDetail[1].modifier[0].coding[0].system))
        assertTrue(stringMatch("rooh", obj.item[0].detail[1].subDetail[1].modifier[0].coding[0].code))
        assertTrue(stringMatch("%.2f".format(2f), "%.2f".format(obj.item[0].detail[1].subDetail[1].quantity!!.value)))
        assertTrue(stringMatch("%.2f".format(15.00f), "%.2f".format(obj.item[0].detail[1].subDetail[1].unitPrice!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].detail[1].subDetail[1].unitPrice!!.system))
        assertTrue(stringMatch("USD", obj.item[0].detail[1].subDetail[1].unitPrice!!.code))
        assertTrue(stringMatch("%.2f".format(1.1f), "%.2f".format(obj.item[0].detail[1].subDetail[1].factor)))
        assertTrue(stringMatch("%.2f".format(33.00f), "%.2f".format(obj.item[0].detail[1].subDetail[1].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].detail[1].subDetail[1].net!!.system))
        assertTrue(stringMatch("USD", obj.item[0].detail[1].subDetail[1].net!!.code))
        assertEquals(3, obj.item[0].detail[1].subDetail[2].sequence)
        assertTrue(stringMatch("http://hl7.org/fhir/ex-revenu", obj.item[0].detail[1].subDetail[2].revenue!!.coding[0].system))
        assertTrue(stringMatch("0010", obj.item[0].detail[1].subDetail[2].revenue!!.coding[0].code))
        assertTrue(stringMatch("Vision Clinic", obj.item[0].detail[1].subDetail[2].revenue!!.coding[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/benefit-s", obj.item[0].detail[1].subDetail[2].category!!.coding[0].system))
        assertTrue(stringMatch("F6", obj.item[0].detail[1].subDetail[2].category!!.coding[0].code))
        assertTrue(stringMatch("Vision Coverage", obj.item[0].detail[1].subDetail[2].category!!.coding[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/ex-vision", obj.item[0].detail[1].subDetail[2].service!!.coding[0].system))
        assertTrue(stringMatch("UV coating", obj.item[0].detail[1].subDetail[2].service!!.coding[0].code))
        assertTrue(stringMatch("http://hl7.org/fhir/modifiers", obj.item[0].detail[1].subDetail[2].modifier[0].coding[0].system))
        assertTrue(stringMatch("rooh", obj.item[0].detail[1].subDetail[2].modifier[0].coding[0].code))
        assertTrue(stringMatch("%.2f".format(2f), "%.2f".format(obj.item[0].detail[1].subDetail[2].quantity!!.value)))
        assertTrue(stringMatch("%.2f".format(5.00f), "%.2f".format(obj.item[0].detail[1].subDetail[2].unitPrice!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].detail[1].subDetail[2].unitPrice!!.system))
        assertTrue(stringMatch("USD", obj.item[0].detail[1].subDetail[2].unitPrice!!.code))
        assertTrue(stringMatch("%.2f".format(1.1f), "%.2f".format(obj.item[0].detail[1].subDetail[2].factor)))
        assertTrue(stringMatch("%.2f".format(11.00f), "%.2f".format(obj.item[0].detail[1].subDetail[2].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].detail[1].subDetail[2].net!!.system))
        assertTrue(stringMatch("USD", obj.item[0].detail[1].subDetail[2].net!!.code))
        assertEquals(3, obj.item[0].detail[2].sequence)
        assertTrue(stringMatch("http://hl7.org/fhir/ex-revenu", obj.item[0].detail[2].revenue!!.coding[0].system))
        assertTrue(stringMatch("0010", obj.item[0].detail[2].revenue!!.coding[0].code))
        assertTrue(stringMatch("Vision Clinic", obj.item[0].detail[2].revenue!!.coding[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/benefit-s", obj.item[0].detail[2].category!!.coding[0].system))
        assertTrue(stringMatch("F6", obj.item[0].detail[2].category!!.coding[0].code))
        assertTrue(stringMatch("Vision Coverage", obj.item[0].detail[2].category!!.coding[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/ex-vision", obj.item[0].detail[2].service!!.coding[0].system))
        assertTrue(stringMatch("fst", obj.item[0].detail[2].service!!.coding[0].code))
        assertTrue(stringMatch("%.2f".format(220.00f), "%.2f".format(obj.item[0].detail[2].unitPrice!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].detail[2].unitPrice!!.system))
        assertTrue(stringMatch("USD", obj.item[0].detail[2].unitPrice!!.code))
        assertTrue(stringMatch("%.2f".format(0.07f), "%.2f".format(obj.item[0].detail[2].factor)))
        assertTrue(stringMatch("%.2f".format(15.40f), "%.2f".format(obj.item[0].detail[2].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].detail[2].net!!.system))
        assertTrue(stringMatch("USD", obj.item[0].detail[2].net!!.code))
    }

    @Test
    fun `claim-example-institutional 195 Test`() {
        val json = File("./src/test/resources/model/sample_data/claim-example-institutional.json").readTextAndClose()
        val obj = mapper.fromJson(json, Claim::class.java)
        assertTrue(stringMatch("Claim", obj.resourceType))
        assertTrue(stringMatch("960150", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://happyhospital.com/clai", obj.identifier[0].system))
        assertTrue(stringMatch("9612345", obj.identifier[0].value))
        assertTrue(stringMatch("active", obj.status))
    }

    @Test
    fun `claim-example-institutional 196 Test`() {
        val json = File("./src/test/resources/model/sample_data/claim-example-institutional.json").readTextAndClose()
        val obj = mapper.fromJson(json, Claim::class.java)
        assertTrue(stringMatch("http://hl7.org/fhir/ex-claimt", obj.type!!.coding[0].system))
        assertTrue(stringMatch("institutional", obj.type!!.coding[0].code))
        assertTrue(stringMatch("http://hl7.org/fhir/ex-claims", obj.subType[0].coding[0].system))
        assertTrue(stringMatch("emergency", obj.subType[0].coding[0].code))
        assertTrue(stringMatch("complete", obj.use))
        assertTrue(stringMatch("Patient/1", obj.patient!!.reference))
        assertEquals("2014-08-16", obj.created.toString())
        assertTrue(stringMatch("http://jurisdiction.org/facil", obj.enterer!!.identifier!!.system))
        assertTrue(stringMatch("UC1234", obj.enterer!!.identifier!!.value))
        assertTrue(stringMatch("Organization/2", obj.insurer!!.reference))
        assertTrue(stringMatch("Organization/1", obj.organization!!.reference))
        assertTrue(stringMatch("normal", obj.priority!!.coding[0].code))
        assertTrue(stringMatch("provider", obj.payee!!.type.coding[0].code))
        assertTrue(stringMatch("http://jurisdiction.org/facil", obj.facility!!.identifier!!.system))
        assertTrue(stringMatch("HOSP1234", obj.facility!!.identifier!!.value))
        assertEquals(1, obj.careTeam[0].sequence)
        assertTrue(stringMatch("Practitioner/example", obj.careTeam[0].provider.reference))
        assertEquals(1, obj.diagnosis[0].sequence)
        assertTrue(stringMatch("654456", obj.diagnosis[0].diagnosisCodeableConcept.coding[0].code))
        assertEquals(1, obj.insurance[0].sequence)
        assertEquals(true, if (obj.insurance[0].focal != null) obj.insurance[0].focal else false, "Field: obj.insurance[0].focal")
        assertTrue(stringMatch("Coverage/9876B1", obj.insurance[0].coverage.reference))
        assertEquals(1, obj.item[0].sequence)
        assertEquals(1, obj.item[0].careTeamLinkId[0])
        assertTrue(stringMatch("http://hl7.org/fhir/ex-servic", obj.item[0].service!!.coding[0].system))
        assertTrue(stringMatch("exam", obj.item[0].service!!.coding[0].code))
        assertEquals("2014-08-16", obj.item[0].servicedDate.toString())
        assertTrue(stringMatch("%.2f".format(125.00f), "%.2f".format(obj.item[0].unitPrice!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].unitPrice!!.system))
        assertTrue(stringMatch("USD", obj.item[0].unitPrice!!.code))
        assertTrue(stringMatch("%.2f".format(125.00f), "%.2f".format(obj.item[0].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].net!!.system))
        assertTrue(stringMatch("USD", obj.item[0].net!!.code))
        assertTrue(stringMatch("Encounter/example", obj.item[0].encounter[0].reference))
        assertTrue(stringMatch("%.2f".format(125.00f), "%.2f".format(obj.total!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.total!!.system))
        assertTrue(stringMatch("USD", obj.total!!.code))
    }

    @Test
    fun `claim-example-oral-contained 197 Test`() {
        val json = File("./src/test/resources/model/sample_data/claim-example-oral-contained.json").readTextAndClose()
        val obj = mapper.fromJson(json, Claim::class.java)
        assertTrue(stringMatch("Claim", obj.resourceType))
        assertTrue(stringMatch("100152", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("Organization", (obj.contained[0] as Organization).resourceType))
        assertTrue(stringMatch("org-insurer", (obj.contained[0] as Organization).id))
        assertTrue(stringMatch("http://www.bindb.com/bin", (obj.contained[0] as Organization).identifier[0].system))
        assertTrue(stringMatch("123456", (obj.contained[0] as Organization).identifier[0].value))
        assertTrue(stringMatch("Organization", (obj.contained[1] as Organization).resourceType))
        assertTrue(stringMatch("org-org", (obj.contained[1] as Organization).id))
        assertTrue(stringMatch("http://www.jurisdiction.com/o", (obj.contained[1] as Organization).identifier[0].system))
        assertTrue(stringMatch("3456", (obj.contained[1] as Organization).identifier[0].value))
        assertTrue(stringMatch("Practitioner", (obj.contained[2] as Practitioner).resourceType))
        assertTrue(stringMatch("provider-1", (obj.contained[2] as Practitioner).id))
        assertTrue(stringMatch("http://www.jurisdiction.com/o", (obj.contained[2] as Practitioner).identifier[0].system))
        assertTrue(stringMatch("123456789", (obj.contained[2] as Practitioner).identifier[0].value))
        assertTrue(stringMatch("Patient", (obj.contained[3] as Patient).resourceType))
        assertTrue(stringMatch("patient-1", (obj.contained[3] as Patient).id))
        assertTrue(stringMatch("official", (obj.contained[3] as Patient).name[0].use))
        assertTrue(stringMatch("Donald", (obj.contained[3] as Patient).name[0].family))
        assertTrue(stringMatch("Duck", (obj.contained[3] as Patient).name[0].given[0]))
        assertTrue(stringMatch("male", (obj.contained[3] as Patient).gender))
        assertEquals("1986-05-17", (obj.contained[3] as Patient).birthDate.toString())
        assertTrue(stringMatch("home", (obj.contained[3] as Patient).address[0].use))
        assertTrue(stringMatch("1234 Main Street", (obj.contained[3] as Patient).address[0].line[0]))
        assertTrue(stringMatch("Vancouver", (obj.contained[3] as Patient).address[0].city))
        assertTrue(stringMatch("V2H1Y3", (obj.contained[3] as Patient).address[0].postalCode))
        assertTrue(stringMatch("CAD", (obj.contained[3] as Patient).address[0].country))
        assertTrue(stringMatch("Coverage", (obj.contained[4] as Coverage).resourceType))
        assertTrue(stringMatch("coverage-1", (obj.contained[4] as Coverage).id))
        assertTrue(stringMatch("http://benefitsinc.com/certif", (obj.contained[4] as Coverage).identifier[0].system))
        assertTrue(stringMatch("12345", (obj.contained[4] as Coverage).identifier[0].value))
        assertTrue(stringMatch("active", (obj.contained[4] as Coverage).status))
        assertTrue(stringMatch("http://hl7.org/fhir/v3/ActCod", (obj.contained[4] as Coverage).type!!.coding[0].system))
    }

    @Test
    fun `claim-example-oral-contained 198 Test`() {
        val json = File("./src/test/resources/model/sample_data/claim-example-oral-contained.json").readTextAndClose()
        val obj = mapper.fromJson(json, Claim::class.java)
        assertTrue(stringMatch("EHCPOL", (obj.contained[4] as Coverage).type!!.coding[0].code))
        assertTrue(stringMatch("#patient-1", (obj.contained[4] as Coverage).subscriber!!.reference))
        assertTrue(stringMatch("#patient-1", (obj.contained[4] as Coverage).beneficiary!!.reference))
        assertTrue(stringMatch("self", (obj.contained[4] as Coverage).relationship!!.coding[0].code))
        assertTrue(stringMatch("http://www.bindb.com/bin", (obj.contained[4] as Coverage).payor[0].identifier!!.system))
        assertTrue(stringMatch("123456", (obj.contained[4] as Coverage).payor[0].identifier!!.value))
        assertTrue(stringMatch("CBI35", (obj.contained[4] as Coverage).grouping!!.plan))
        assertTrue(stringMatch("Corporate Baker's Inc. Plan#3", (obj.contained[4] as Coverage).grouping!!.planDisplay))
        assertTrue(stringMatch("123", (obj.contained[4] as Coverage).grouping!!.subPlan))
        assertTrue(stringMatch("Trainee Part-time Benefits", (obj.contained[4] as Coverage).grouping!!.subPlanDisplay))
        assertTrue(stringMatch("1", (obj.contained[4] as Coverage).dependent))
        assertTrue(stringMatch("1", (obj.contained[4] as Coverage).sequence))
        assertTrue(stringMatch("http://happyvalley.com/claim", obj.identifier[0].system))
        assertTrue(stringMatch("12347", obj.identifier[0].value))
        assertTrue(stringMatch("active", obj.status))
        assertTrue(stringMatch("http://hl7.org/fhir/ex-claimt", obj.type!!.coding[0].system))
        assertTrue(stringMatch("oral", obj.type!!.coding[0].code))
        assertTrue(stringMatch("complete", obj.use))
        assertTrue(stringMatch("#patient-1", obj.patient!!.reference))
        assertEquals("2014-08-16", obj.created.toString())
        assertTrue(stringMatch("#org-insurer", obj.insurer!!.reference))
        assertTrue(stringMatch("#org-org", obj.organization!!.reference))
        assertTrue(stringMatch("normal", obj.priority!!.coding[0].code))
        assertTrue(stringMatch("provider", obj.payee!!.type.coding[0].code))
        assertEquals(1, obj.careTeam[0].sequence)
        assertTrue(stringMatch("#provider-1", obj.careTeam[0].provider.reference))
        assertEquals(1, obj.diagnosis[0].sequence)
        assertTrue(stringMatch("123456", obj.diagnosis[0].diagnosisCodeableConcept.coding[0].code))
        assertEquals(1, obj.insurance[0].sequence)
        assertEquals(true, if (obj.insurance[0].focal != null) obj.insurance[0].focal else false, "Field: obj.insurance[0].focal")
        assertTrue(stringMatch("#coverage-1", obj.insurance[0].coverage.reference))
        assertEquals(1, obj.item[0].sequence)
        assertEquals(1, obj.item[0].careTeamLinkId[0])
        assertTrue(stringMatch("1200", obj.item[0].service!!.coding[0].code))
        assertEquals("2014-08-16", obj.item[0].servicedDate.toString())
        assertTrue(stringMatch("%.2f".format(135.57f), "%.2f".format(obj.item[0].unitPrice!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].unitPrice!!.system))
        assertTrue(stringMatch("USD", obj.item[0].unitPrice!!.code))
        assertTrue(stringMatch("%.2f".format(135.57f), "%.2f".format(obj.item[0].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].net!!.system))
        assertTrue(stringMatch("USD", obj.item[0].net!!.code))
    }

    @Test
    fun `claim-example-pharmacy-medication 199 Test`() {
        val json = File("./src/test/resources/model/sample_data/claim-example-pharmacy-medication.json").readTextAndClose()
        val obj = mapper.fromJson(json, Claim::class.java)
        assertTrue(stringMatch("Claim", obj.resourceType))
        assertTrue(stringMatch("760151", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://happypharma.com/claim", obj.identifier[0].system))
        assertTrue(stringMatch("7612345", obj.identifier[0].value))
        assertTrue(stringMatch("active", obj.status))
        assertTrue(stringMatch("http://hl7.org/fhir/ex-claimt", obj.type!!.coding[0].system))
        assertTrue(stringMatch("pharmacy", obj.type!!.coding[0].code))
        assertTrue(stringMatch("complete", obj.use))
        assertTrue(stringMatch("Patient/1", obj.patient!!.reference))
        assertEquals("2014-08-16", obj.created.toString())
        assertTrue(stringMatch("Organization/2", obj.insurer!!.reference))
        assertTrue(stringMatch("Organization/1", obj.organization!!.reference))
        assertTrue(stringMatch("stat", obj.priority!!.coding[0].code))
        assertTrue(stringMatch("http://pharmacy.org/Medicatio", obj.prescription!!.reference))
        assertTrue(stringMatch("http://pharmacy.org/Medicatio", obj.originalPrescription!!.reference))
        assertTrue(stringMatch("provider", obj.payee!!.type.coding[0].code))
        assertEquals(1, obj.careTeam[0].sequence)
        assertTrue(stringMatch("Practitioner/example", obj.careTeam[0].provider.reference))
        assertEquals(1, obj.information[0].sequence)
        assertTrue(stringMatch("pharmacyrefill", obj.information[0].category.coding[0].code))
        assertTrue(stringMatch("http://hl7.org/fhir/pharmacy-", obj.information[0].code!!.coding[0].system))
        assertTrue(stringMatch("new", obj.information[0].code!!.coding[0].code))
        assertEquals(2, obj.information[1].sequence)
        assertTrue(stringMatch("pharmacyinformation", obj.information[1].category.coding[0].code))
        assertTrue(stringMatch("http://hl7.org/fhir/pharmacy-", obj.information[1].code!!.coding[0].system))
        assertTrue(stringMatch("refillsremaining", obj.information[1].code!!.coding[0].code))
        assertTrue(stringMatch("%.2f".format(2f), "%.2f".format(obj.information[1].valueQuantity!!.value)))
        assertEquals(3, obj.information[2].sequence)
    }

    @Test
    fun `claim-example-pharmacy-medication 200 Test`() {
        val json = File("./src/test/resources/model/sample_data/claim-example-pharmacy-medication.json").readTextAndClose()
        val obj = mapper.fromJson(json, Claim::class.java)
        assertTrue(stringMatch("pharmacyinformation", obj.information[2].category.coding[0].code))
        assertTrue(stringMatch("http://hl7.org/fhir/pharmacy-", obj.information[2].code!!.coding[0].system))
        assertTrue(stringMatch("dayssupply", obj.information[2].code!!.coding[0].code))
        assertTrue(stringMatch("%.2f".format(90f), "%.2f".format(obj.information[2].valueQuantity!!.value)))
        assertEquals(1, obj.diagnosis[0].sequence)
        assertTrue(stringMatch("654456", obj.diagnosis[0].diagnosisCodeableConcept.coding[0].code))
        assertEquals(1, obj.insurance[0].sequence)
        assertEquals(true, if (obj.insurance[0].focal != null) obj.insurance[0].focal else false, "Field: obj.insurance[0].focal")
        assertTrue(stringMatch("Coverage/9876B1", obj.insurance[0].coverage.reference))
        assertEquals(1, obj.item[0].sequence)
        assertEquals(1, obj.item[0].careTeamLinkId[0])
        assertEquals(1, obj.item[0].informationLinkId[0])
        assertEquals(2, obj.item[0].informationLinkId[1])
        assertEquals(3, obj.item[0].informationLinkId[2])
        assertTrue(stringMatch("http://hl7.org/fhir/RxNorm", obj.item[0].service!!.coding[0].system))
        assertTrue(stringMatch("562721", obj.item[0].service!!.coding[0].code))
        assertTrue(stringMatch("Alprazolam 0.25mg (Xanax)", obj.item[0].service!!.coding[0].display))
        assertEquals("2014-08-16", obj.item[0].servicedDate.toString())
        assertTrue(stringMatch("%.2f".format(90f), "%.2f".format(obj.item[0].quantity!!.value)))
        assertTrue(stringMatch("TAB", obj.item[0].quantity!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.item[0].quantity!!.system))
        assertTrue(stringMatch("TAB", obj.item[0].quantity!!.code))
        assertTrue(stringMatch("%.2f".format(90.00f), "%.2f".format(obj.item[0].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].net!!.system))
        assertTrue(stringMatch("USD", obj.item[0].net!!.code))
        assertEquals(1, obj.item[0].detail[0].sequence)
        assertTrue(stringMatch("http://hl7.org/fhir/ex-pharma", obj.item[0].detail[0].service!!.coding[0].system))
        assertTrue(stringMatch("drugcost", obj.item[0].detail[0].service!!.coding[0].code))
        assertTrue(stringMatch("%.2f".format(45.00f), "%.2f".format(obj.item[0].detail[0].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].detail[0].net!!.system))
        assertTrue(stringMatch("USD", obj.item[0].detail[0].net!!.code))
        assertEquals(2, obj.item[0].detail[1].sequence)
        assertTrue(stringMatch("http://hl7.org/fhir/ex-pharma", obj.item[0].detail[1].service!!.coding[0].system))
        assertTrue(stringMatch("markup", obj.item[0].detail[1].service!!.coding[0].code))
        assertTrue(stringMatch("%.2f".format(9.00f), "%.2f".format(obj.item[0].detail[1].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].detail[1].net!!.system))
        assertTrue(stringMatch("USD", obj.item[0].detail[1].net!!.code))
        assertEquals(3, obj.item[0].detail[2].sequence)
        assertTrue(stringMatch("http://hl7.org/fhir/ex-pharma", obj.item[0].detail[2].service!!.coding[0].system))
        assertTrue(stringMatch("dispensefee", obj.item[0].detail[2].service!!.coding[0].code))
        assertTrue(stringMatch("%.2f".format(36.00f), "%.2f".format(obj.item[0].detail[2].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].detail[2].net!!.system))
        assertTrue(stringMatch("USD", obj.item[0].detail[2].net!!.code))
        assertTrue(stringMatch("%.2f".format(90.00f), "%.2f".format(obj.total!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.total!!.system))
        assertTrue(stringMatch("USD", obj.total!!.code))
    }

    @Test
    fun `claim-example-oral-orthoplan 201 Test`() {
        val json = File("./src/test/resources/model/sample_data/claim-example-oral-orthoplan.json").readTextAndClose()
        val obj = mapper.fromJson(json, Claim::class.java)
        assertTrue(stringMatch("Claim", obj.resourceType))
        assertTrue(stringMatch("100153", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://happyvalley.com/claim", obj.identifier[0].system))
        assertTrue(stringMatch("12355", obj.identifier[0].value))
        assertTrue(stringMatch("active", obj.status))
        assertTrue(stringMatch("http://hl7.org/fhir/ex-claimt", obj.type!!.coding[0].system))
        assertTrue(stringMatch("oral", obj.type!!.coding[0].code))
        assertTrue(stringMatch("proposed", obj.use))
        assertTrue(stringMatch("Patient/1", obj.patient!!.reference))
        assertEquals("2015-03-16", obj.created.toString())
        assertTrue(stringMatch("Organization/2", obj.insurer!!.reference))
        assertTrue(stringMatch("Organization/1", obj.organization!!.reference))
        assertTrue(stringMatch("normal", obj.priority!!.coding[0].code))
        assertTrue(stringMatch("provider", obj.fundsReserve!!.coding[0].code))
        assertTrue(stringMatch("provider", obj.payee!!.type.coding[0].code))
        assertEquals(1, obj.careTeam[0].sequence)
        assertTrue(stringMatch("Practitioner/example", obj.careTeam[0].provider.reference))
        assertEquals(1, obj.diagnosis[0].sequence)
        assertTrue(stringMatch("http://hl7.org/fhir/sid/icd-1", obj.diagnosis[0].diagnosisCodeableConcept.coding[0].system))
        assertTrue(stringMatch("123457", obj.diagnosis[0].diagnosisCodeableConcept.coding[0].code))
        assertEquals(1, obj.insurance[0].sequence)
        assertEquals(true, if (obj.insurance[0].focal != null) obj.insurance[0].focal else false, "Field: obj.insurance[0].focal")
        assertTrue(stringMatch("Coverage/9876B1", obj.insurance[0].coverage.reference))
    }

    @Test
    fun `claim-example-oral-orthoplan 202 Test`() {
        val json = File("./src/test/resources/model/sample_data/claim-example-oral-orthoplan.json").readTextAndClose()
        val obj = mapper.fromJson(json, Claim::class.java)
        assertEquals(1, obj.item[0].sequence)
        assertEquals(1, obj.item[0].careTeamLinkId[0])
        assertEquals(1, obj.item[0].diagnosisLinkId[0])
        assertTrue(stringMatch("http://example.org/fhir/orals", obj.item[0].service!!.coding[0].system))
        assertTrue(stringMatch("ORTHPLAN", obj.item[0].service!!.coding[0].code))
        assertEquals("2015-05-16", obj.item[0].servicedDate.toString())
        assertTrue(stringMatch("%.2f".format(9000.00f), "%.2f".format(obj.item[0].unitPrice!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].unitPrice!!.system))
        assertTrue(stringMatch("USD", obj.item[0].unitPrice!!.code))
        assertTrue(stringMatch("%.2f".format(9000.00f), "%.2f".format(obj.item[0].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].net!!.system))
        assertTrue(stringMatch("USD", obj.item[0].net!!.code))
        assertEquals(1, obj.item[0].detail[0].sequence)
        assertTrue(stringMatch("http://example.org/fhir/orals", obj.item[0].detail[0].service!!.coding[0].system))
        assertTrue(stringMatch("ORTHOEXAM", obj.item[0].detail[0].service!!.coding[0].code))
        assertTrue(stringMatch("%.2f".format(1000.00f), "%.2f".format(obj.item[0].detail[0].unitPrice!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].detail[0].unitPrice!!.system))
        assertTrue(stringMatch("USD", obj.item[0].detail[0].unitPrice!!.code))
        assertTrue(stringMatch("%.2f".format(1000.00f), "%.2f".format(obj.item[0].detail[0].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].detail[0].net!!.system))
        assertTrue(stringMatch("USD", obj.item[0].detail[0].net!!.code))
        assertEquals(2, obj.item[0].detail[1].sequence)
        assertTrue(stringMatch("http://example.org/fhir/orals", obj.item[0].detail[1].service!!.coding[0].system))
        assertTrue(stringMatch("ORTHODIAG", obj.item[0].detail[1].service!!.coding[0].code))
        assertTrue(stringMatch("%.2f".format(1500.00f), "%.2f".format(obj.item[0].detail[1].unitPrice!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].detail[1].unitPrice!!.system))
        assertTrue(stringMatch("USD", obj.item[0].detail[1].unitPrice!!.code))
        assertTrue(stringMatch("%.2f".format(1500.00f), "%.2f".format(obj.item[0].detail[1].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].detail[1].net!!.system))
        assertTrue(stringMatch("USD", obj.item[0].detail[1].net!!.code))
        assertEquals(3, obj.item[0].detail[2].sequence)
        assertTrue(stringMatch("http://example.org/fhir/orals", obj.item[0].detail[2].service!!.coding[0].system))
        assertTrue(stringMatch("ORTHOINITIAL", obj.item[0].detail[2].service!!.coding[0].code))
        assertTrue(stringMatch("%.2f".format(500.00f), "%.2f".format(obj.item[0].detail[2].unitPrice!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].detail[2].unitPrice!!.system))
        assertTrue(stringMatch("USD", obj.item[0].detail[2].unitPrice!!.code))
        assertTrue(stringMatch("%.2f".format(500.00f), "%.2f".format(obj.item[0].detail[2].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].detail[2].net!!.system))
        assertTrue(stringMatch("USD", obj.item[0].detail[2].net!!.code))
        assertEquals(4, obj.item[0].detail[3].sequence)
        assertTrue(stringMatch("http://example.org/fhir/orals", obj.item[0].detail[3].service!!.coding[0].system))
        assertTrue(stringMatch("ORTHOMONTHS", obj.item[0].detail[3].service!!.coding[0].code))
        assertTrue(stringMatch("%.2f".format(24f), "%.2f".format(obj.item[0].detail[3].quantity!!.value)))
        assertEquals(5, obj.item[0].detail[4].sequence)
        assertTrue(stringMatch("http://example.org/fhir/orals", obj.item[0].detail[4].service!!.coding[0].system))
        assertTrue(stringMatch("ORTHOPERIODIC", obj.item[0].detail[4].service!!.coding[0].code))
        assertTrue(stringMatch("%.2f".format(24f), "%.2f".format(obj.item[0].detail[4].quantity!!.value)))
        assertTrue(stringMatch("%.2f".format(250.00f), "%.2f".format(obj.item[0].detail[4].unitPrice!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].detail[4].unitPrice!!.system))
        assertTrue(stringMatch("USD", obj.item[0].detail[4].unitPrice!!.code))
        assertTrue(stringMatch("%.2f".format(250.00f), "%.2f".format(obj.item[0].detail[4].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].detail[4].net!!.system))
        assertTrue(stringMatch("USD", obj.item[0].detail[4].net!!.code))
        assertEquals(2, obj.item[1].sequence)
        assertEquals(1, obj.item[1].careTeamLinkId[0])
        assertTrue(stringMatch("http://example.org/fhir/orals", obj.item[1].service!!.coding[0].system))
        assertTrue(stringMatch("21211", obj.item[1].service!!.coding[0].code))
        assertEquals("2014-08-16", obj.item[1].servicedDate.toString())
        assertTrue(stringMatch("%.2f".format(105.00f), "%.2f".format(obj.item[1].unitPrice!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[1].unitPrice!!.system))
        assertTrue(stringMatch("USD", obj.item[1].unitPrice!!.code))
        assertTrue(stringMatch("%.2f".format(105.00f), "%.2f".format(obj.item[1].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[1].net!!.system))
        assertTrue(stringMatch("USD", obj.item[1].net!!.code))
        assertTrue(stringMatch("http://fdi.org/fhir/oraltooth", obj.item[1].bodySite!!.coding[0].system))
        assertTrue(stringMatch("21", obj.item[1].bodySite!!.coding[0].code))
        assertTrue(stringMatch("http://fdi.org/fhir/oralsurfa", obj.item[1].subSite[0].coding[0].system))
        assertTrue(stringMatch("L", obj.item[1].subSite[0].coding[0].code))
        assertEquals(3, obj.item[2].sequence)
        assertEquals(1, obj.item[2].careTeamLinkId[0])
        assertTrue(stringMatch("http://example.org/fhir/orals", obj.item[2].service!!.coding[0].system))
    }

    @Test
    fun `claim-example-oral-orthoplan 203 Test`() {
        val json = File("./src/test/resources/model/sample_data/claim-example-oral-orthoplan.json").readTextAndClose()
        val obj = mapper.fromJson(json, Claim::class.java)
        assertTrue(stringMatch("27211", obj.item[2].service!!.coding[0].code))
        assertEquals("2014-08-16", obj.item[2].servicedDate.toString())
        assertTrue(stringMatch("%.2f".format(1100.00f), "%.2f".format(obj.item[2].unitPrice!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[2].unitPrice!!.system))
        assertTrue(stringMatch("USD", obj.item[2].unitPrice!!.code))
        assertTrue(stringMatch("%.2f".format(1100.00f), "%.2f".format(obj.item[2].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[2].net!!.system))
        assertTrue(stringMatch("USD", obj.item[2].net!!.code))
        assertTrue(stringMatch("http://fdi.org/fhir/oraltooth", obj.item[2].bodySite!!.coding[0].system))
        assertTrue(stringMatch("36", obj.item[2].bodySite!!.coding[0].code))
        assertEquals(1, obj.item[2].detail[0].sequence)
        assertTrue(stringMatch("http://example.org/fhir/orals", obj.item[2].detail[0].service!!.coding[0].system))
        assertTrue(stringMatch("27211", obj.item[2].detail[0].service!!.coding[0].code))
        assertTrue(stringMatch("%.2f".format(750.00f), "%.2f".format(obj.item[2].detail[0].unitPrice!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[2].detail[0].unitPrice!!.system))
        assertTrue(stringMatch("USD", obj.item[2].detail[0].unitPrice!!.code))
        assertTrue(stringMatch("%.2f".format(750.00f), "%.2f".format(obj.item[2].detail[0].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[2].detail[0].net!!.system))
        assertTrue(stringMatch("USD", obj.item[2].detail[0].net!!.code))
        assertEquals(2, obj.item[2].detail[1].sequence)
        assertTrue(stringMatch("http://example.org/fhir/orals", obj.item[2].detail[1].service!!.coding[0].system))
        assertTrue(stringMatch("lab", obj.item[2].detail[1].service!!.coding[0].code))
        assertTrue(stringMatch("%.2f".format(350.00f), "%.2f".format(obj.item[2].detail[1].unitPrice!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[2].detail[1].unitPrice!!.system))
        assertTrue(stringMatch("USD", obj.item[2].detail[1].unitPrice!!.code))
        assertTrue(stringMatch("%.2f".format(350.00f), "%.2f".format(obj.item[2].detail[1].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[2].detail[1].net!!.system))
        assertTrue(stringMatch("USD", obj.item[2].detail[1].net!!.code))
    }

    @Test
    fun `claim-example-oral-average 204 Test`() {
        val json = File("./src/test/resources/model/sample_data/claim-example-oral-average.json").readTextAndClose()
        val obj = mapper.fromJson(json, Claim::class.java)
        assertTrue(stringMatch("Claim", obj.resourceType))
        assertTrue(stringMatch("100151", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://happyvalley.com/claim", obj.identifier[0].system))
        assertTrue(stringMatch("12346", obj.identifier[0].value))
        assertTrue(stringMatch("active", obj.status))
        assertTrue(stringMatch("http://hl7.org/fhir/ex-claimt", obj.type!!.coding[0].system))
        assertTrue(stringMatch("oral", obj.type!!.coding[0].code))
        assertTrue(stringMatch("complete", obj.use))
        assertTrue(stringMatch("Patient/1", obj.patient!!.reference))
        assertEquals("2014-08-16", obj.created.toString())
        assertTrue(stringMatch("Organization/2", obj.insurer!!.reference))
        assertTrue(stringMatch("Organization/1", obj.organization!!.reference))
        assertTrue(stringMatch("normal", obj.priority!!.coding[0].code))
        assertTrue(stringMatch("provider", obj.payee!!.type.coding[0].code))
        assertEquals(1, obj.careTeam[0].sequence)
        assertTrue(stringMatch("Practitioner/example", obj.careTeam[0].provider.reference))
        assertEquals(1, obj.information[0].sequence)
        assertTrue(stringMatch("http://hl7.org/fhir/claiminfo", obj.information[0].category.coding[0].system))
        assertTrue(stringMatch("missingtooth", obj.information[0].category.coding[0].code))
        assertTrue(stringMatch("http://hl7.org/fhir/ex-tooth", obj.information[0].code!!.coding[0].system))
        assertTrue(stringMatch("15", obj.information[0].code!!.coding[0].code))
        assertEquals("2012-04-07", obj.information[0].timingDate.toString())
        assertTrue(stringMatch("http://hl7.org/fhir/missingto", obj.information[0].reason!!.coding[0].system))
        assertTrue(stringMatch("e", obj.information[0].reason!!.coding[0].code))
        assertEquals(2, obj.information[1].sequence)
        assertTrue(stringMatch("http://hl7.org/fhir/claiminfo", obj.information[1].category.coding[0].system))
        assertTrue(stringMatch("exception", obj.information[1].category.coding[0].code))
        assertTrue(stringMatch("http://hl7.org/fhir/claim-exc", obj.information[1].code!!.coding[0].system))
        assertTrue(stringMatch("student", obj.information[1].code!!.coding[0].code))
        assertTrue(stringMatch("Happy Valley Community Colleg", obj.information[1].valueString))
        assertEquals(1, obj.diagnosis[0].sequence)
        assertTrue(stringMatch("123456", obj.diagnosis[0].diagnosisCodeableConcept.coding[0].code))
        assertEquals(1, obj.insurance[0].sequence)
        assertEquals(true, if (obj.insurance[0].focal != null) obj.insurance[0].focal else false, "Field: obj.insurance[0].focal")
        assertTrue(stringMatch("Coverage/9876B1", obj.insurance[0].coverage.reference))
        assertEquals(1, obj.item[0].sequence)
        assertEquals(1, obj.item[0].careTeamLinkId[0])
        assertTrue(stringMatch("http://example.org/fhir/orals", obj.item[0].service!!.coding[0].system))
        assertTrue(stringMatch("1200", obj.item[0].service!!.coding[0].code))
        assertEquals("2014-08-16", obj.item[0].servicedDate.toString())
        assertTrue(stringMatch("%.2f".format(135.57f), "%.2f".format(obj.item[0].unitPrice!!.value)))
    }

    @Test
    fun `claim-example-oral-average 205 Test`() {
        val json = File("./src/test/resources/model/sample_data/claim-example-oral-average.json").readTextAndClose()
        val obj = mapper.fromJson(json, Claim::class.java)
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].unitPrice!!.system))
        assertTrue(stringMatch("USD", obj.item[0].unitPrice!!.code))
        assertTrue(stringMatch("%.2f".format(135.57f), "%.2f".format(obj.item[0].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].net!!.system))
        assertTrue(stringMatch("USD", obj.item[0].net!!.code))
        assertEquals(2, obj.item[1].sequence)
        assertEquals(1, obj.item[1].careTeamLinkId[0])
        assertTrue(stringMatch("http://example.org/fhir/orals", obj.item[1].service!!.coding[0].system))
        assertTrue(stringMatch("21211", obj.item[1].service!!.coding[0].code))
        assertEquals("2014-08-16", obj.item[1].servicedDate.toString())
        assertTrue(stringMatch("%.2f".format(105.00f), "%.2f".format(obj.item[1].unitPrice!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[1].unitPrice!!.system))
        assertTrue(stringMatch("USD", obj.item[1].unitPrice!!.code))
        assertTrue(stringMatch("%.2f".format(105.00f), "%.2f".format(obj.item[1].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[1].net!!.system))
        assertTrue(stringMatch("USD", obj.item[1].net!!.code))
        assertTrue(stringMatch("http://fdi.org/fhir/oraltooth", obj.item[1].bodySite!!.coding[0].system))
        assertTrue(stringMatch("21", obj.item[1].bodySite!!.coding[0].code))
        assertTrue(stringMatch("http://fdi.org/fhir/oralsurfa", obj.item[1].subSite[0].coding[0].system))
        assertTrue(stringMatch("L", obj.item[1].subSite[0].coding[0].code))
        assertEquals(3, obj.item[2].sequence)
        assertEquals(1, obj.item[2].careTeamLinkId[0])
        assertTrue(stringMatch("http://example.org/fhir/orals", obj.item[2].service!!.coding[0].system))
        assertTrue(stringMatch("27211", obj.item[2].service!!.coding[0].code))
        assertEquals("2014-08-16", obj.item[2].servicedDate.toString())
        assertTrue(stringMatch("%.2f".format(1100.00f), "%.2f".format(obj.item[2].unitPrice!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[2].unitPrice!!.system))
        assertTrue(stringMatch("USD", obj.item[2].unitPrice!!.code))
        assertTrue(stringMatch("%.2f".format(1100.00f), "%.2f".format(obj.item[2].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[2].net!!.system))
        assertTrue(stringMatch("USD", obj.item[2].net!!.code))
        assertTrue(stringMatch("http://fdi.org/fhir/oraltooth", obj.item[2].bodySite!!.coding[0].system))
        assertTrue(stringMatch("36", obj.item[2].bodySite!!.coding[0].code))
        assertEquals(1, obj.item[2].detail[0].sequence)
        assertTrue(stringMatch("http://example.org/fhir/orals", obj.item[2].detail[0].service!!.coding[0].system))
        assertTrue(stringMatch("27211", obj.item[2].detail[0].service!!.coding[0].code))
        assertTrue(stringMatch("%.2f".format(1000.00f), "%.2f".format(obj.item[2].detail[0].unitPrice!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[2].detail[0].unitPrice!!.system))
        assertTrue(stringMatch("USD", obj.item[2].detail[0].unitPrice!!.code))
        assertTrue(stringMatch("%.2f".format(0.75f), "%.2f".format(obj.item[2].detail[0].factor)))
        assertTrue(stringMatch("%.2f".format(750.00f), "%.2f".format(obj.item[2].detail[0].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[2].detail[0].net!!.system))
        assertTrue(stringMatch("USD", obj.item[2].detail[0].net!!.code))
        assertEquals(2, obj.item[2].detail[1].sequence)
        assertTrue(stringMatch("http://example.org/fhir/orals", obj.item[2].detail[1].service!!.coding[0].system))
        assertTrue(stringMatch("lab", obj.item[2].detail[1].service!!.coding[0].code))
        assertTrue(stringMatch("%.2f".format(350.00f), "%.2f".format(obj.item[2].detail[1].unitPrice!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[2].detail[1].unitPrice!!.system))
        assertTrue(stringMatch("USD", obj.item[2].detail[1].unitPrice!!.code))
        assertTrue(stringMatch("%.2f".format(350.00f), "%.2f".format(obj.item[2].detail[1].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[2].detail[1].net!!.system))
        assertTrue(stringMatch("USD", obj.item[2].detail[1].net!!.code))
    }

    @Test
    fun `claim-example-vision-glasses 206 Test`() {
        val json = File("./src/test/resources/model/sample_data/claim-example-vision-glasses.json").readTextAndClose()
        val obj = mapper.fromJson(json, Claim::class.java)
        assertTrue(stringMatch("Claim", obj.resourceType))
        assertTrue(stringMatch("660151", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://happysight.com/claim", obj.identifier[0].system))
        assertTrue(stringMatch("6612346", obj.identifier[0].value))
        assertTrue(stringMatch("active", obj.status))
        assertTrue(stringMatch("http://hl7.org/fhir/ex-claimt", obj.type!!.coding[0].system))
        assertTrue(stringMatch("vision", obj.type!!.coding[0].code))
        assertTrue(stringMatch("complete", obj.use))
        assertTrue(stringMatch("Patient/1", obj.patient!!.reference))
        assertEquals("2014-08-16", obj.created.toString())
        assertTrue(stringMatch("Organization/2", obj.insurer!!.reference))
        assertTrue(stringMatch("Organization/1", obj.organization!!.reference))
        assertTrue(stringMatch("normal", obj.priority!!.coding[0].code))
        assertTrue(stringMatch("http://www.optdocs.com/prescr", obj.prescription!!.reference))
        assertTrue(stringMatch("provider", obj.payee!!.type.coding[0].code))
        assertEquals(1, obj.careTeam[0].sequence)
        assertTrue(stringMatch("Practitioner/example", obj.careTeam[0].provider.reference))
    }

    @Test
    fun `claim-example-vision-glasses 207 Test`() {
        val json = File("./src/test/resources/model/sample_data/claim-example-vision-glasses.json").readTextAndClose()
        val obj = mapper.fromJson(json, Claim::class.java)
        assertEquals(1, obj.diagnosis[0].sequence)
        assertTrue(stringMatch("654321", obj.diagnosis[0].diagnosisCodeableConcept.coding[0].code))
        assertEquals(1, obj.insurance[0].sequence)
        assertEquals(true, if (obj.insurance[0].focal != null) obj.insurance[0].focal else false, "Field: obj.insurance[0].focal")
        assertTrue(stringMatch("Coverage/9876B1", obj.insurance[0].coverage.reference))
        assertEquals(1, obj.item[0].sequence)
        assertEquals(1, obj.item[0].careTeamLinkId[0])
        assertTrue(stringMatch("http://hl7.org/fhir/ex-vision", obj.item[0].service!!.coding[0].system))
        assertTrue(stringMatch("glasses", obj.item[0].service!!.coding[0].code))
        assertEquals("2014-08-16", obj.item[0].servicedDate.toString())
        assertTrue(stringMatch("%.2f".format(214.00f), "%.2f".format(obj.item[0].unitPrice!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].unitPrice!!.system))
        assertTrue(stringMatch("USD", obj.item[0].unitPrice!!.code))
        assertTrue(stringMatch("%.2f".format(214.00f), "%.2f".format(obj.item[0].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].net!!.system))
        assertTrue(stringMatch("USD", obj.item[0].net!!.code))
        assertEquals(1, obj.item[0].detail[0].sequence)
        assertTrue(stringMatch("http://hl7.org/fhir/ex-vision", obj.item[0].detail[0].service!!.coding[0].system))
        assertTrue(stringMatch("frame", obj.item[0].detail[0].service!!.coding[0].code))
        assertTrue(stringMatch("%.2f".format(100.00f), "%.2f".format(obj.item[0].detail[0].unitPrice!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].detail[0].unitPrice!!.system))
        assertTrue(stringMatch("USD", obj.item[0].detail[0].unitPrice!!.code))
        assertTrue(stringMatch("%.2f".format(100.00f), "%.2f".format(obj.item[0].detail[0].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].detail[0].net!!.system))
        assertTrue(stringMatch("USD", obj.item[0].detail[0].net!!.code))
        assertEquals(2, obj.item[0].detail[1].sequence)
        assertTrue(stringMatch("http://hl7.org/fhir/ex-vision", obj.item[0].detail[1].service!!.coding[0].system))
        assertTrue(stringMatch("lens", obj.item[0].detail[1].service!!.coding[0].code))
        assertTrue(stringMatch("%.2f".format(2f), "%.2f".format(obj.item[0].detail[1].quantity!!.value)))
        assertTrue(stringMatch("%.2f".format(50.00f), "%.2f".format(obj.item[0].detail[1].unitPrice!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].detail[1].unitPrice!!.system))
        assertTrue(stringMatch("USD", obj.item[0].detail[1].unitPrice!!.code))
        assertTrue(stringMatch("%.2f".format(100.00f), "%.2f".format(obj.item[0].detail[1].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].detail[1].net!!.system))
        assertTrue(stringMatch("USD", obj.item[0].detail[1].net!!.code))
        assertEquals(3, obj.item[0].detail[2].sequence)
        assertTrue(stringMatch("http://hl7.org/fhir/ex-vision", obj.item[0].detail[2].service!!.coding[0].system))
        assertTrue(stringMatch("fst", obj.item[0].detail[2].service!!.coding[0].code))
        assertTrue(stringMatch("%.2f".format(200.00f), "%.2f".format(obj.item[0].detail[2].unitPrice!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].detail[2].unitPrice!!.system))
        assertTrue(stringMatch("USD", obj.item[0].detail[2].unitPrice!!.code))
        assertTrue(stringMatch("%.2f".format(0.07f), "%.2f".format(obj.item[0].detail[2].factor)))
        assertTrue(stringMatch("%.2f".format(14.00f), "%.2f".format(obj.item[0].detail[2].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].detail[2].net!!.system))
        assertTrue(stringMatch("USD", obj.item[0].detail[2].net!!.code))
    }

    @Test
    fun `claim-example-oral-identifier 208 Test`() {
        val json = File("./src/test/resources/model/sample_data/claim-example-oral-identifier.json").readTextAndClose()
        val obj = mapper.fromJson(json, Claim::class.java)
        assertTrue(stringMatch("Claim", obj.resourceType))
        assertTrue(stringMatch("100154", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://happyvalley.com/claim", obj.identifier[0].system))
        assertTrue(stringMatch("12347", obj.identifier[0].value))
        assertTrue(stringMatch("active", obj.status))
        assertTrue(stringMatch("http://hl7.org/fhir/ex-claimt", obj.type!!.coding[0].system))
        assertTrue(stringMatch("oral", obj.type!!.coding[0].code))
        assertTrue(stringMatch("complete", obj.use))
        assertTrue(stringMatch("http://www.jurisdiction.com/n", obj.patient!!.identifier!!.system))
        assertTrue(stringMatch("123AB345", obj.patient!!.identifier!!.value))
        assertEquals("2014-08-16", obj.created.toString())
        assertTrue(stringMatch("http://www.jurisdiction.com/i", obj.insurer!!.identifier!!.system))
        assertTrue(stringMatch("123456", obj.insurer!!.identifier!!.value))
        assertTrue(stringMatch("http://www.jurisdiction.com/c", obj.organization!!.identifier!!.system))
        assertTrue(stringMatch("HOSP12345", obj.organization!!.identifier!!.value))
        assertTrue(stringMatch("normal", obj.priority!!.coding[0].code))
        assertTrue(stringMatch("provider", obj.payee!!.type.coding[0].code))
        assertEquals(1, obj.careTeam[0].sequence)
        assertTrue(stringMatch("http://www.jurisdiction.com/p", obj.careTeam[0].provider.identifier!!.system))
        assertTrue(stringMatch("MD98765", obj.careTeam[0].provider.identifier!!.value))
        assertEquals(1, obj.diagnosis[0].sequence)
        assertTrue(stringMatch("123456", obj.diagnosis[0].diagnosisCodeableConcept.coding[0].code))
        assertEquals(1, obj.insurance[0].sequence)
        assertEquals(true, if (obj.insurance[0].focal != null) obj.insurance[0].focal else false, "Field: obj.insurance[0].focal")
    }

    @Test
    fun `claim-example-oral-identifier 209 Test`() {
        val json = File("./src/test/resources/model/sample_data/claim-example-oral-identifier.json").readTextAndClose()
        val obj = mapper.fromJson(json, Claim::class.java)
        assertTrue(stringMatch("http://www.jurisdiction.com/n", obj.insurance[0].coverage.identifier!!.system))
        assertTrue(stringMatch("123AB345", obj.insurance[0].coverage.identifier!!.value))
        assertEquals(1, obj.item[0].sequence)
        assertEquals(1, obj.item[0].careTeamLinkId[0])
        assertTrue(stringMatch("1200", obj.item[0].service!!.coding[0].code))
        assertEquals("2014-08-16", obj.item[0].servicedDate.toString())
        assertTrue(stringMatch("%.2f".format(135.57f), "%.2f".format(obj.item[0].unitPrice!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].unitPrice!!.system))
        assertTrue(stringMatch("USD", obj.item[0].unitPrice!!.code))
        assertTrue(stringMatch("%.2f".format(135.57f), "%.2f".format(obj.item[0].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].net!!.system))
        assertTrue(stringMatch("USD", obj.item[0].net!!.code))
    }

    @Test
    fun `claim-example-pharmacy 210 Test`() {
        val json = File("./src/test/resources/model/sample_data/claim-example-pharmacy.json").readTextAndClose()
        val obj = mapper.fromJson(json, Claim::class.java)
        assertTrue(stringMatch("Claim", obj.resourceType))
        assertTrue(stringMatch("760150", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://happypharma.com/claim", obj.identifier[0].system))
        assertTrue(stringMatch("7612345", obj.identifier[0].value))
        assertTrue(stringMatch("active", obj.status))
        assertTrue(stringMatch("http://hl7.org/fhir/ex-claimt", obj.type!!.coding[0].system))
        assertTrue(stringMatch("pharmacy", obj.type!!.coding[0].code))
        assertTrue(stringMatch("complete", obj.use))
        assertTrue(stringMatch("Patient/1", obj.patient!!.reference))
        assertEquals("2014-08-16", obj.created.toString())
        assertTrue(stringMatch("Organization/2", obj.insurer!!.reference))
        assertTrue(stringMatch("Organization/1", obj.organization!!.reference))
        assertTrue(stringMatch("stat", obj.priority!!.coding[0].code))
        assertTrue(stringMatch("provider", obj.payee!!.type.coding[0].code))
        assertEquals(1, obj.careTeam[0].sequence)
        assertTrue(stringMatch("Practitioner/example", obj.careTeam[0].provider.reference))
        assertEquals(1, obj.diagnosis[0].sequence)
        assertTrue(stringMatch("654456", obj.diagnosis[0].diagnosisCodeableConcept.coding[0].code))
        assertEquals(1, obj.insurance[0].sequence)
        assertEquals(true, if (obj.insurance[0].focal != null) obj.insurance[0].focal else false, "Field: obj.insurance[0].focal")
        assertTrue(stringMatch("Coverage/9876B1", obj.insurance[0].coverage.reference))
        assertEquals(1, obj.item[0].sequence)
        assertEquals(1, obj.item[0].careTeamLinkId[0])
        assertTrue(stringMatch("http://hl7.org/fhir/ex-pharma", obj.item[0].service!!.coding[0].system))
        assertTrue(stringMatch("smokecess", obj.item[0].service!!.coding[0].code))
        assertEquals("2014-08-16", obj.item[0].servicedDate.toString())
        assertTrue(stringMatch("%.2f".format(60.00f), "%.2f".format(obj.item[0].unitPrice!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].unitPrice!!.system))
        assertTrue(stringMatch("USD", obj.item[0].unitPrice!!.code))
        assertTrue(stringMatch("%.2f".format(60.00f), "%.2f".format(obj.item[0].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].net!!.system))
        assertTrue(stringMatch("USD", obj.item[0].net!!.code))
    }

    @Test
    fun `claim-example-oral-contained-identifier 211 Test`() {
        val json = File("./src/test/resources/model/sample_data/claim-example-oral-contained-identifier.json").readTextAndClose()
        val obj = mapper.fromJson(json, Claim::class.java)
        assertTrue(stringMatch("Claim", obj.resourceType))
        assertTrue(stringMatch("100155", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("Patient", (obj.contained[0] as Patient).resourceType))
        assertTrue(stringMatch("patient-1", (obj.contained[0] as Patient).id))
        assertTrue(stringMatch("official", (obj.contained[0] as Patient).name[0].use))
        assertTrue(stringMatch("Donald", (obj.contained[0] as Patient).name[0].family))
        assertTrue(stringMatch("Duck", (obj.contained[0] as Patient).name[0].given[0]))
        assertTrue(stringMatch("male", (obj.contained[0] as Patient).gender))
        assertEquals("1986-05-17", (obj.contained[0] as Patient).birthDate.toString())
        assertTrue(stringMatch("home", (obj.contained[0] as Patient).address[0].use))
        assertTrue(stringMatch("1234 Main Street", (obj.contained[0] as Patient).address[0].line[0]))
        assertTrue(stringMatch("Vancouver", (obj.contained[0] as Patient).address[0].city))
        assertTrue(stringMatch("V2H1Y3", (obj.contained[0] as Patient).address[0].postalCode))
        assertTrue(stringMatch("CAD", (obj.contained[0] as Patient).address[0].country))
        assertTrue(stringMatch("http://happyvalley.com/claim", obj.identifier[0].system))
        assertTrue(stringMatch("12347", obj.identifier[0].value))
        assertTrue(stringMatch("active", obj.status))
        assertTrue(stringMatch("http://hl7.org/fhir/ex-claimt", obj.type!!.coding[0].system))
        assertTrue(stringMatch("oral", obj.type!!.coding[0].code))
        assertTrue(stringMatch("complete", obj.use))
        assertTrue(stringMatch("#patient-1", obj.patient!!.reference))
        assertEquals("2014-08-16", obj.created.toString())
        assertTrue(stringMatch("http://www.jurisdiction.com/i", obj.insurer!!.identifier!!.system))
    }

    @Test
    fun `claim-example-oral-contained-identifier 212 Test`() {
        val json = File("./src/test/resources/model/sample_data/claim-example-oral-contained-identifier.json").readTextAndClose()
        val obj = mapper.fromJson(json, Claim::class.java)
        assertTrue(stringMatch("123456", obj.insurer!!.identifier!!.value))
        assertTrue(stringMatch("http://www.jurisdiction.com/c", obj.organization!!.identifier!!.system))
        assertTrue(stringMatch("HOSP12345", obj.organization!!.identifier!!.value))
        assertTrue(stringMatch("normal", obj.priority!!.coding[0].code))
        assertTrue(stringMatch("provider", obj.payee!!.type.coding[0].code))
        assertEquals(1, obj.careTeam[0].sequence)
        assertTrue(stringMatch("http://www.jurisdiction.com/p", obj.careTeam[0].provider.identifier!!.system))
        assertTrue(stringMatch("MD98765", obj.careTeam[0].provider.identifier!!.value))
        assertEquals(1, obj.diagnosis[0].sequence)
        assertTrue(stringMatch("123456", obj.diagnosis[0].diagnosisCodeableConcept.coding[0].code))
        assertEquals(1, obj.insurance[0].sequence)
        assertEquals(true, if (obj.insurance[0].focal != null) obj.insurance[0].focal else false, "Field: obj.insurance[0].focal")
        assertTrue(stringMatch("http://www.jurisdiction.com/n", obj.insurance[0].coverage.reference))
        assertEquals(1, obj.item[0].sequence)
        assertEquals(1, obj.item[0].careTeamLinkId[0])
        assertTrue(stringMatch("1200", obj.item[0].service!!.coding[0].code))
        assertEquals("2014-08-16", obj.item[0].servicedDate.toString())
        assertTrue(stringMatch("%.2f".format(135.57f), "%.2f".format(obj.item[0].unitPrice!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].unitPrice!!.system))
        assertTrue(stringMatch("USD", obj.item[0].unitPrice!!.code))
        assertTrue(stringMatch("%.2f".format(135.57f), "%.2f".format(obj.item[0].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].net!!.system))
        assertTrue(stringMatch("USD", obj.item[0].net!!.code))
    }

    @Test
    fun `claim-example-oral-bridge 213 Test`() {
        val json = File("./src/test/resources/model/sample_data/claim-example-oral-bridge.json").readTextAndClose()
        val obj = mapper.fromJson(json, Claim::class.java)
        assertTrue(stringMatch("Claim", obj.resourceType))
        assertTrue(stringMatch("100156", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("Device", (obj.contained[0] as Device).resourceType))
        assertTrue(stringMatch("device-bridge", (obj.contained[0] as Device).id))
        assertTrue(stringMatch("ReferralRequest", (obj.contained[1] as ReferralRequest).resourceType))
        assertTrue(stringMatch("referral", (obj.contained[1] as ReferralRequest).id))
        assertTrue(stringMatch("active", (obj.contained[1] as ReferralRequest).status))
        assertTrue(stringMatch("order", (obj.contained[1] as ReferralRequest).intent))
        assertTrue(stringMatch("Patient/1", (obj.contained[1] as ReferralRequest).subject.reference))
        assertTrue(stringMatch("http://happyvalley.com/claim", obj.identifier[0].system))
        assertTrue(stringMatch("123466", obj.identifier[0].value))
        assertTrue(stringMatch("active", obj.status))
        assertTrue(stringMatch("http://hl7.org/fhir/ex-claimt", obj.type!!.coding[0].system))
        assertTrue(stringMatch("oral", obj.type!!.coding[0].code))
        assertTrue(stringMatch("complete", obj.use))
        assertTrue(stringMatch("Patient/1", obj.patient!!.reference))
        assertEquals("2014-08-16", obj.created.toString())
        assertTrue(stringMatch("Organization/2", obj.insurer!!.reference))
        assertTrue(stringMatch("Organization/1", obj.organization!!.reference))
        assertTrue(stringMatch("normal", obj.priority!!.coding[0].code))
        assertTrue(stringMatch("Claim/100151", obj.related[0].claim!!.reference))
        assertTrue(stringMatch("http://hl7.org/fhir/ex-relate", obj.related[0].relationship!!.coding[0].system))
        assertTrue(stringMatch("associated", obj.related[0].relationship!!.coding[0].code))
        assertTrue(stringMatch("CASE156746B", obj.related[0].reference!!.value))
        assertTrue(stringMatch("http://hl7.org/fhir/payeetype", obj.payee!!.type.coding[0].system))
        assertTrue(stringMatch("other", obj.payee!!.type.coding[0].code))
        assertTrue(stringMatch("http://hl7.org/fhir/ex-payee-", obj.payee!!.resourceType!!.system))
        assertTrue(stringMatch("relatedperson", obj.payee!!.resourceType!!.code))
        assertTrue(stringMatch("RelatedPerson/peter", obj.payee!!.party!!.reference))
        assertTrue(stringMatch("#referral", obj.referral!!.reference))
        assertEquals(1, obj.careTeam[0].sequence)
        assertTrue(stringMatch("Practitioner/example", obj.careTeam[0].provider.reference))
        assertEquals(1, obj.information[0].sequence)
        assertTrue(stringMatch("http://hl7.org/fhir/claiminfo", obj.information[0].category.coding[0].system))
        assertTrue(stringMatch("prosthesis", obj.information[0].category.coding[0].code))
        assertTrue(stringMatch("http://hl7.org/fhir/ex-oralpr", obj.information[0].code!!.coding[0].system))
        assertTrue(stringMatch("2", obj.information[0].code!!.coding[0].code))
        assertTrue(stringMatch("Maryland Bridge", obj.information[0].code!!.coding[0].display))
        assertEquals("2001-04-07", obj.information[0].timingDate.toString())
        assertEquals(1, obj.procedure[0].sequence)
        assertEquals("2014-07-04", obj.procedure[0].date.toString())
        assertTrue(stringMatch("Resection of gum to increase ", obj.procedure[0].procedureCodeableConcept.text))
        assertEquals(1, obj.insurance[0].sequence)
        assertEquals(true, if (obj.insurance[0].focal != null) obj.insurance[0].focal else false, "Field: obj.insurance[0].focal")
        assertTrue(stringMatch("Coverage/9876B1", obj.insurance[0].coverage.reference))
        assertEquals(1, obj.item[0].sequence)
    }

    @Test
    fun `claim-example-oral-bridge 214 Test`() {
        val json = File("./src/test/resources/model/sample_data/claim-example-oral-bridge.json").readTextAndClose()
        val obj = mapper.fromJson(json, Claim::class.java)
        assertEquals(1, obj.item[0].careTeamLinkId[0])
        assertEquals(1, obj.item[0].informationLinkId[0])
        assertTrue(stringMatch("http://example.org/fhir/orals", obj.item[0].service!!.coding[0].system))
        assertTrue(stringMatch("67221", obj.item[0].service!!.coding[0].code))
        assertTrue(stringMatch("Maryland Bridge", obj.item[0].service!!.coding[0].display))
        assertEquals("2014-08-16", obj.item[0].servicedDate.toString())
        assertTrue(stringMatch("http://hl7.org/fhir/ex-servic", obj.item[0].locationCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("11", obj.item[0].locationCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("%.2f".format(1400.00f), "%.2f".format(obj.item[0].unitPrice!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].unitPrice!!.system))
        assertTrue(stringMatch("USD", obj.item[0].unitPrice!!.code))
        assertTrue(stringMatch("%.2f".format(0.75f), "%.2f".format(obj.item[0].factor)))
        assertTrue(stringMatch("%.2f".format(1050.00f), "%.2f".format(obj.item[0].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].net!!.system))
        assertTrue(stringMatch("USD", obj.item[0].net!!.code))
        assertTrue(stringMatch("#device-bridge", obj.item[0].udi[0].reference))
        assertTrue(stringMatch("http://fdi.org/fhir/oraltooth", obj.item[0].bodySite!!.coding[0].system))
        assertTrue(stringMatch("01", obj.item[0].bodySite!!.coding[0].code))
        assertEquals(2, obj.item[1].sequence)
        assertEquals(1, obj.item[1].careTeamLinkId[0])
        assertTrue(stringMatch("http://example.org/fhir/orals", obj.item[1].service!!.coding[0].system))
        assertTrue(stringMatch("21211", obj.item[1].service!!.coding[0].code))
        assertEquals("2014-08-16", obj.item[1].servicedDate.toString())
        assertTrue(stringMatch("http://hl7.org/fhir/ex-servic", obj.item[1].locationCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("11", obj.item[1].locationCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("%.2f".format(105.00f), "%.2f".format(obj.item[1].unitPrice!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[1].unitPrice!!.system))
        assertTrue(stringMatch("USD", obj.item[1].unitPrice!!.code))
        assertTrue(stringMatch("%.2f".format(105.00f), "%.2f".format(obj.item[1].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[1].net!!.system))
        assertTrue(stringMatch("USD", obj.item[1].net!!.code))
        assertTrue(stringMatch("http://fdi.org/fhir/oraltooth", obj.item[1].bodySite!!.coding[0].system))
        assertTrue(stringMatch("21", obj.item[1].bodySite!!.coding[0].code))
        assertTrue(stringMatch("http://fdi.org/fhir/oralsurfa", obj.item[1].subSite[0].coding[0].system))
        assertTrue(stringMatch("L", obj.item[1].subSite[0].coding[0].code))
        assertEquals(3, obj.item[2].sequence)
        assertEquals(1, obj.item[2].careTeamLinkId[0])
        assertEquals(1, obj.item[2].procedureLinkId[0])
        assertTrue(stringMatch("http://example.org/fhir/orals", obj.item[2].service!!.coding[0].system))
        assertTrue(stringMatch("27211", obj.item[2].service!!.coding[0].code))
        assertEquals("2014-08-16", obj.item[2].servicedDate.toString())
        assertTrue(stringMatch("http://hl7.org/fhir/ex-servic", obj.item[2].locationCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("11", obj.item[2].locationCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("%.2f".format(1100.00f), "%.2f".format(obj.item[2].unitPrice!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[2].unitPrice!!.system))
        assertTrue(stringMatch("USD", obj.item[2].unitPrice!!.code))
        assertTrue(stringMatch("%.2f".format(1100.00f), "%.2f".format(obj.item[2].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[2].net!!.system))
        assertTrue(stringMatch("USD", obj.item[2].net!!.code))
        assertTrue(stringMatch("http://fdi.org/fhir/oraltooth", obj.item[2].bodySite!!.coding[0].system))
        assertTrue(stringMatch("24", obj.item[2].bodySite!!.coding[0].code))
        assertEquals(1, obj.item[2].detail[0].sequence)
        assertTrue(stringMatch("http://example.org/fhir/orals", obj.item[2].detail[0].service!!.coding[0].system))
        assertTrue(stringMatch("27211", obj.item[2].detail[0].service!!.coding[0].code))
        assertTrue(stringMatch("%.2f".format(1000.00f), "%.2f".format(obj.item[2].detail[0].unitPrice!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[2].detail[0].unitPrice!!.system))
        assertTrue(stringMatch("USD", obj.item[2].detail[0].unitPrice!!.code))
        assertTrue(stringMatch("%.2f".format(0.75f), "%.2f".format(obj.item[2].detail[0].factor)))
        assertTrue(stringMatch("%.2f".format(750.00f), "%.2f".format(obj.item[2].detail[0].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[2].detail[0].net!!.system))
        assertTrue(stringMatch("USD", obj.item[2].detail[0].net!!.code))
        assertEquals(2, obj.item[2].detail[1].sequence)
        assertTrue(stringMatch("http://example.org/fhir/orals", obj.item[2].detail[1].service!!.coding[0].system))
        assertTrue(stringMatch("lab", obj.item[2].detail[1].service!!.coding[0].code))
        assertTrue(stringMatch("%.2f".format(350.00f), "%.2f".format(obj.item[2].detail[1].unitPrice!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[2].detail[1].unitPrice!!.system))
        assertTrue(stringMatch("USD", obj.item[2].detail[1].unitPrice!!.code))
        assertTrue(stringMatch("%.2f".format(350.00f), "%.2f".format(obj.item[2].detail[1].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[2].detail[1].net!!.system))
        assertTrue(stringMatch("USD", obj.item[2].detail[1].net!!.code))
        assertTrue(stringMatch("%.2f".format(2255.00f), "%.2f".format(obj.total!!.value)))
    }

    @Test
    fun `claim-example-oral-bridge 215 Test`() {
        val json = File("./src/test/resources/model/sample_data/claim-example-oral-bridge.json").readTextAndClose()
        val obj = mapper.fromJson(json, Claim::class.java)
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.total!!.system))
        assertTrue(stringMatch("USD", obj.total!!.code))
    }

    @Test
    fun `claim-example-pharmacy-compound 216 Test`() {
        val json = File("./src/test/resources/model/sample_data/claim-example-pharmacy-compound.json").readTextAndClose()
        val obj = mapper.fromJson(json, Claim::class.java)
        assertTrue(stringMatch("Claim", obj.resourceType))
        assertTrue(stringMatch("760152", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://happypharma.com/claim", obj.identifier[0].system))
        assertTrue(stringMatch("7612345", obj.identifier[0].value))
        assertTrue(stringMatch("active", obj.status))
        assertTrue(stringMatch("http://hl7.org/fhir/ex-claimt", obj.type!!.coding[0].system))
        assertTrue(stringMatch("pharmacy", obj.type!!.coding[0].code))
        assertTrue(stringMatch("complete", obj.use))
        assertTrue(stringMatch("Patient/1", obj.patient!!.reference))
        assertEquals("2014-08-16", obj.created.toString())
        assertTrue(stringMatch("Organization/2", obj.insurer!!.reference))
        assertTrue(stringMatch("Organization/1", obj.organization!!.reference))
        assertTrue(stringMatch("stat", obj.priority!!.coding[0].code))
        assertTrue(stringMatch("provider", obj.payee!!.type.coding[0].code))
        assertEquals(1, obj.careTeam[0].sequence)
        assertTrue(stringMatch("Practitioner/example", obj.careTeam[0].provider.reference))
        assertEquals(1, obj.information[0].sequence)
        assertTrue(stringMatch("pharmacyrefill", obj.information[0].category.coding[0].code))
        assertTrue(stringMatch("http://hl7.org/fhir/pharmacy-", obj.information[0].code!!.coding[0].system))
        assertTrue(stringMatch("new", obj.information[0].code!!.coding[0].code))
        assertEquals(2, obj.information[1].sequence)
        assertTrue(stringMatch("pharmacyinformation", obj.information[1].category.coding[0].code))
        assertTrue(stringMatch("http://hl7.org/fhir/pharmacy-", obj.information[1].code!!.coding[0].system))
        assertTrue(stringMatch("refillsremaining", obj.information[1].code!!.coding[0].code))
        assertTrue(stringMatch("%.2f".format(0f), "%.2f".format(obj.information[1].valueQuantity!!.value)))
        assertEquals(3, obj.information[2].sequence)
        assertTrue(stringMatch("pharmacyinformation", obj.information[2].category.coding[0].code))
        assertTrue(stringMatch("http://hl7.org/fhir/pharmacy-", obj.information[2].code!!.coding[0].system))
        assertTrue(stringMatch("dayssupply", obj.information[2].code!!.coding[0].code))
        assertTrue(stringMatch("%.2f".format(10f), "%.2f".format(obj.information[2].valueQuantity!!.value)))
        assertEquals(4, obj.information[3].sequence)
        assertTrue(stringMatch("pharmacy", obj.information[3].category.coding[0].code))
        assertTrue(stringMatch("http://hl7.org/fhir/pharmacy-", obj.information[3].code!!.coding[0].system))
        assertTrue(stringMatch("capsule", obj.information[3].code!!.coding[0].code))
        assertEquals(1, obj.diagnosis[0].sequence)
        assertTrue(stringMatch("654456", obj.diagnosis[0].diagnosisCodeableConcept.coding[0].code))
        assertEquals(1, obj.insurance[0].sequence)
        assertEquals(true, if (obj.insurance[0].focal != null) obj.insurance[0].focal else false, "Field: obj.insurance[0].focal")
        assertTrue(stringMatch("Coverage/9876B1", obj.insurance[0].coverage.reference))
        assertEquals(1, obj.item[0].sequence)
        assertEquals(1, obj.item[0].careTeamLinkId[0])
        assertEquals(1, obj.item[0].informationLinkId[0])
        assertEquals(2, obj.item[0].informationLinkId[1])
        assertEquals(3, obj.item[0].informationLinkId[2])
        assertEquals(4, obj.item[0].informationLinkId[3])
        assertTrue(stringMatch("http://localdruglist.org", obj.item[0].service!!.coding[0].system))
        assertTrue(stringMatch("compound", obj.item[0].service!!.coding[0].code))
        assertTrue(stringMatch("Custom compound", obj.item[0].service!!.coding[0].display))
        assertEquals("2014-08-16", obj.item[0].servicedDate.toString())
        assertTrue(stringMatch("%.2f".format(30f), "%.2f".format(obj.item[0].quantity!!.value)))
        assertTrue(stringMatch("TAB", obj.item[0].quantity!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.item[0].quantity!!.system))
        assertTrue(stringMatch("TAB", obj.item[0].quantity!!.code))
        assertTrue(stringMatch("%.2f".format(155.00f), "%.2f".format(obj.item[0].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].net!!.system))
        assertTrue(stringMatch("USD", obj.item[0].net!!.code))
        assertEquals(1, obj.item[0].detail[0].sequence)
        assertTrue(stringMatch("http://localdruglist.org", obj.item[0].detail[0].service!!.coding[0].system))
        assertTrue(stringMatch("44001", obj.item[0].detail[0].service!!.coding[0].code))
        assertTrue(stringMatch("Acetaminophen 250mg", obj.item[0].detail[0].service!!.coding[0].display))
        assertTrue(stringMatch("%.2f".format(250f), "%.2f".format(obj.item[0].detail[0].quantity!!.value)))
        assertTrue(stringMatch("mg", obj.item[0].detail[0].quantity!!.unit))
        assertTrue(stringMatch("%.2f".format(20.00f), "%.2f".format(obj.item[0].detail[0].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].detail[0].net!!.system))
        assertTrue(stringMatch("USD", obj.item[0].detail[0].net!!.code))
        assertEquals(1, obj.item[0].detail[0].subDetail[0].sequence)
        assertTrue(stringMatch("http://hl7.org/fhir/ex-pharma", obj.item[0].detail[0].subDetail[0].service!!.coding[0].system))
    }

    @Test
    fun `claim-example-pharmacy-compound 217 Test`() {
        val json = File("./src/test/resources/model/sample_data/claim-example-pharmacy-compound.json").readTextAndClose()
        val obj = mapper.fromJson(json, Claim::class.java)
        assertTrue(stringMatch("drugcost", obj.item[0].detail[0].subDetail[0].service!!.coding[0].code))
        assertTrue(stringMatch("%.2f".format(20.00f), "%.2f".format(obj.item[0].detail[0].subDetail[0].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].detail[0].subDetail[0].net!!.system))
        assertTrue(stringMatch("USD", obj.item[0].detail[0].subDetail[0].net!!.code))
        assertEquals(2, obj.item[0].detail[1].sequence)
        assertTrue(stringMatch("http://localdruglist.org", obj.item[0].detail[1].service!!.coding[0].system))
        assertTrue(stringMatch("44035", obj.item[0].detail[1].service!!.coding[0].code))
        assertTrue(stringMatch("Phenacetin 50mg", obj.item[0].detail[1].service!!.coding[0].display))
        assertTrue(stringMatch("%.2f".format(50f), "%.2f".format(obj.item[0].detail[1].quantity!!.value)))
        assertTrue(stringMatch("mg", obj.item[0].detail[1].quantity!!.unit))
        assertTrue(stringMatch("%.2f".format(25.00f), "%.2f".format(obj.item[0].detail[1].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].detail[1].net!!.system))
        assertTrue(stringMatch("USD", obj.item[0].detail[1].net!!.code))
        assertEquals(1, obj.item[0].detail[1].subDetail[0].sequence)
        assertTrue(stringMatch("http://hl7.org/fhir/ex-pharma", obj.item[0].detail[1].subDetail[0].service!!.coding[0].system))
        assertTrue(stringMatch("drugcost", obj.item[0].detail[1].subDetail[0].service!!.coding[0].code))
        assertTrue(stringMatch("%.2f".format(25.00f), "%.2f".format(obj.item[0].detail[1].subDetail[0].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].detail[1].subDetail[0].net!!.system))
        assertTrue(stringMatch("USD", obj.item[0].detail[1].subDetail[0].net!!.code))
        assertEquals(3, obj.item[0].detail[2].sequence)
        assertTrue(stringMatch("http://localdruglist.org", obj.item[0].detail[2].service!!.coding[0].system))
        assertTrue(stringMatch("44057", obj.item[0].detail[2].service!!.coding[0].code))
        assertTrue(stringMatch("Codeine 25mg", obj.item[0].detail[2].service!!.coding[0].display))
        assertTrue(stringMatch("%.2f".format(25f), "%.2f".format(obj.item[0].detail[2].quantity!!.value)))
        assertTrue(stringMatch("mg", obj.item[0].detail[2].quantity!!.unit))
        assertTrue(stringMatch("%.2f".format(28.00f), "%.2f".format(obj.item[0].detail[2].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].detail[2].net!!.system))
        assertTrue(stringMatch("USD", obj.item[0].detail[2].net!!.code))
        assertEquals(1, obj.item[0].detail[2].subDetail[0].sequence)
        assertTrue(stringMatch("http://hl7.org/fhir/ex-pharma", obj.item[0].detail[2].subDetail[0].service!!.coding[0].system))
        assertTrue(stringMatch("drugcost", obj.item[0].detail[2].subDetail[0].service!!.coding[0].code))
        assertTrue(stringMatch("%.2f".format(28.00f), "%.2f".format(obj.item[0].detail[2].subDetail[0].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].detail[2].subDetail[0].net!!.system))
        assertTrue(stringMatch("USD", obj.item[0].detail[2].subDetail[0].net!!.code))
        assertEquals(2, obj.item[0].detail[3].sequence)
        assertTrue(stringMatch("http://hl7.org/fhir/ex-pharma", obj.item[0].detail[3].service!!.coding[0].system))
        assertTrue(stringMatch("markup", obj.item[0].detail[3].service!!.coding[0].code))
        assertTrue(stringMatch("%.2f".format(22.00f), "%.2f".format(obj.item[0].detail[3].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].detail[3].net!!.system))
        assertTrue(stringMatch("USD", obj.item[0].detail[3].net!!.code))
        assertEquals(3, obj.item[0].detail[4].sequence)
        assertTrue(stringMatch("http://hl7.org/fhir/ex-pharma", obj.item[0].detail[4].service!!.coding[0].system))
        assertTrue(stringMatch("compoundfee", obj.item[0].detail[4].service!!.coding[0].code))
        assertTrue(stringMatch("%.2f".format(60.00f), "%.2f".format(obj.item[0].detail[4].net!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.item[0].detail[4].net!!.system))
        assertTrue(stringMatch("USD", obj.item[0].detail[4].net!!.code))
        assertTrue(stringMatch("%.2f".format(155.00f), "%.2f".format(obj.total!!.value)))
        assertTrue(stringMatch("urn:iso:std:iso:4217", obj.total!!.system))
        assertTrue(stringMatch("USD", obj.total!!.code))
    }
}
