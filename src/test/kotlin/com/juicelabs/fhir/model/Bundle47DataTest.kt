package com.juicelabs.fhir.model

import java.io.File
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.junit.jupiter.api.Test

class Bundle47DataTest : DataTests() {
    @Test
    fun `endpoint-examples-general-template 417 Test`() {
        val json = File("./src/test/resources/model/sample_data/endpoint-examples-general-template.json").readTextAndClose()
        val obj = mapper.fromJson(json, Bundle::class.java)
        assertTrue(stringMatch("http://hl7.org/fhir/endpoint-", (obj.entry[12].resource!! as Endpoint).connectionType.system))
        assertTrue(stringMatch("dicom-wado-uri", (obj.entry[12].resource!! as Endpoint).connectionType.code))
        assertTrue(stringMatch("Enterprise Image Archive", (obj.entry[12].resource!! as Endpoint).name))
        assertTrue(stringMatch("Multi-site Co.", (obj.entry[12].resource!! as Endpoint).managingOrganization!!.display))
        assertTrue(stringMatch("varies (application/dicom, ap", (obj.entry[12].resource!! as Endpoint).payloadType[0].coding[0].code))
        assertTrue(stringMatch("DICOM WADO-URI", (obj.entry[12].resource!! as Endpoint).payloadMimeType[0]))
        assertTrue(stringMatch("https://pacs.hospital.org/wad", (obj.entry[12].resource!! as Endpoint).address))
        assertTrue(stringMatch("http://hl7.org/fhir/Endpoint/", obj.entry[13].fullUrl))
        assertTrue(stringMatch("Endpoint", (obj.entry[13].resource!! as Endpoint).resourceType))
        assertTrue(stringMatch("84", (obj.entry[13].resource!! as Endpoint).id))
        assertTrue(stringMatch("generated", (obj.entry[13].resource!! as Endpoint).text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", (obj.entry[13].resource!! as Endpoint).text!!.div))
        assertTrue(stringMatch("active", (obj.entry[13].resource!! as Endpoint).status))
        assertTrue(stringMatch("http://hl7.org/fhir/endpoint-", (obj.entry[13].resource!! as Endpoint).connectionType.system))
        assertTrue(stringMatch("ihe-iid", (obj.entry[13].resource!! as Endpoint).connectionType.code))
        assertTrue(stringMatch("Enterprise Image Archive", (obj.entry[13].resource!! as Endpoint).name))
        assertTrue(stringMatch("Multi-site Co.", (obj.entry[13].resource!! as Endpoint).managingOrganization!!.display))
        assertTrue(stringMatch("varies (application/dicom, ap", (obj.entry[13].resource!! as Endpoint).payloadType[0].coding[0].code))
        assertTrue(stringMatch("IHE IID", (obj.entry[13].resource!! as Endpoint).payloadMimeType[0]))
        assertTrue(stringMatch("https://pacs.hospital.org/IHE", (obj.entry[13].resource!! as Endpoint).address))
    }

    @Test
    fun `patient-examples-cypress-template 418 Test`() {
        val json = File("./src/test/resources/model/sample_data/patient-examples-cypress-template.json").readTextAndClose()
        val obj = mapper.fromJson(json, Bundle::class.java)
        assertTrue(stringMatch("Bundle", obj.resourceType))
        assertTrue(stringMatch("b0a5e4277-83c4-4adb-87e2-e3ef", obj.id))
        assertEquals("2012-05-29T23:45:32Z", obj.meta!!.lastUpdated.toString())
        assertTrue(stringMatch("collection", obj.type))
        assertTrue(stringMatch("http://hl7.org/fhir/Patient/7", obj.entry[0].fullUrl))
        assertTrue(stringMatch("Patient", (obj.entry[0].resource!! as Patient).resourceType))
        assertTrue(stringMatch("71", (obj.entry[0].resource!! as Patient).id))
        assertEquals("2012-06-03T23:45:32Z", (obj.entry[0].resource!! as Patient).meta!!.lastUpdated.toString())
        assertTrue(stringMatch("generated", (obj.entry[0].resource!! as Patient).text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", (obj.entry[0].resource!! as Patient).text!!.div))
        assertTrue(stringMatch("http://hl7.org/fhir/v2/0203", (obj.entry[0].resource!! as Patient).identifier[0].type!!.coding[0].system))
        assertTrue(stringMatch("SS", (obj.entry[0].resource!! as Patient).identifier[0].type!!.coding[0].code))
        assertTrue(stringMatch("https://github.com/projectcyp", (obj.entry[0].resource!! as Patient).identifier[0].system))
        assertTrue(stringMatch("577390", (obj.entry[0].resource!! as Patient).identifier[0].value))
        assertEquals(true, if ((obj.entry[0].resource!! as Patient).active != null) (obj.entry[0].resource!! as Patient).active else false, "Field: (obj.entry[0].resource!! as Patient).active")
        assertTrue(stringMatch("official", (obj.entry[0].resource!! as Patient).name[0].use))
        assertTrue(stringMatch("Fletcher", (obj.entry[0].resource!! as Patient).name[0].family))
        assertTrue(stringMatch("Brenda", (obj.entry[0].resource!! as Patient).name[0].given[0]))
        assertTrue(stringMatch("female", (obj.entry[0].resource!! as Patient).gender))
        assertEquals("1954-09-15", (obj.entry[0].resource!! as Patient).birthDate.toString())
        assertTrue(stringMatch("Organization/1", (obj.entry[0].resource!! as Patient).managingOrganization!!.reference))
        assertTrue(stringMatch("http://hl7.org/fhir/Patient/7", obj.entry[1].fullUrl))
        assertTrue(stringMatch("Patient", (obj.entry[1].resource!! as Patient).resourceType))
        assertTrue(stringMatch("72", (obj.entry[1].resource!! as Patient).id))
        assertEquals("2012-06-03T23:45:32Z", (obj.entry[1].resource!! as Patient).meta!!.lastUpdated.toString())
        assertTrue(stringMatch("generated", (obj.entry[1].resource!! as Patient).text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", (obj.entry[1].resource!! as Patient).text!!.div))
        assertTrue(stringMatch("http://hl7.org/fhir/v2/0203", (obj.entry[1].resource!! as Patient).identifier[0].type!!.coding[0].system))
        assertTrue(stringMatch("SS", (obj.entry[1].resource!! as Patient).identifier[0].type!!.coding[0].code))
        assertTrue(stringMatch("https://github.com/projectcyp", (obj.entry[1].resource!! as Patient).identifier[0].system))
        assertTrue(stringMatch("577391", (obj.entry[1].resource!! as Patient).identifier[0].value))
        assertEquals(true, if ((obj.entry[1].resource!! as Patient).active != null) (obj.entry[1].resource!! as Patient).active else false, "Field: (obj.entry[1].resource!! as Patient).active")
        assertTrue(stringMatch("official", (obj.entry[1].resource!! as Patient).name[0].use))
        assertTrue(stringMatch("Powell", (obj.entry[1].resource!! as Patient).name[0].family))
        assertTrue(stringMatch("Kathryn", (obj.entry[1].resource!! as Patient).name[0].given[0]))
        assertTrue(stringMatch("female", (obj.entry[1].resource!! as Patient).gender))
        assertEquals("1935-06-15", (obj.entry[1].resource!! as Patient).birthDate.toString())
        assertTrue(stringMatch("Organization/1", (obj.entry[1].resource!! as Patient).managingOrganization!!.reference))
        assertTrue(stringMatch("http://hl7.org/fhir/Patient/7", obj.entry[2].fullUrl))
        assertTrue(stringMatch("Patient", (obj.entry[2].resource!! as Patient).resourceType))
        assertTrue(stringMatch("73", (obj.entry[2].resource!! as Patient).id))
        assertEquals("2012-06-03T23:45:32Z", (obj.entry[2].resource!! as Patient).meta!!.lastUpdated.toString())
        assertTrue(stringMatch("generated", (obj.entry[2].resource!! as Patient).text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", (obj.entry[2].resource!! as Patient).text!!.div))
        assertTrue(stringMatch("http://hl7.org/fhir/v2/0203", (obj.entry[2].resource!! as Patient).identifier[0].type!!.coding[0].system))
        assertTrue(stringMatch("SS", (obj.entry[2].resource!! as Patient).identifier[0].type!!.coding[0].code))
        assertTrue(stringMatch("https://github.com/projectcyp", (obj.entry[2].resource!! as Patient).identifier[0].system))
        assertTrue(stringMatch("577392", (obj.entry[2].resource!! as Patient).identifier[0].value))
        assertEquals(true, if ((obj.entry[2].resource!! as Patient).active != null) (obj.entry[2].resource!! as Patient).active else false, "Field: (obj.entry[2].resource!! as Patient).active")
        assertTrue(stringMatch("official", (obj.entry[2].resource!! as Patient).name[0].use))
        assertTrue(stringMatch("Cooper", (obj.entry[2].resource!! as Patient).name[0].family))
    }
}
