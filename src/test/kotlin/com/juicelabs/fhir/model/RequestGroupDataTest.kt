package com.juicelabs.fhir.model

import java.io.File
import java.lang.SuppressWarnings
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.junit.jupiter.api.Test

class RequestGroupDataTest : DataTests() {
    @Test
    fun `requestgroup-kdn5-example 561 Test`() {
        val json = File("./src/test/resources/model/sample_data/requestgroup-kdn5-example.json").readTextAndClose()
        val obj = mapper.fromJson(json, RequestGroup::class.java)
        assertTrue(stringMatch("RequestGroup", obj.resourceType))
        assertTrue(stringMatch("kdn5-example", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("MedicationRequest", (obj.contained[0] as MedicationRequest).resourceType))
        assertTrue(stringMatch("1111", (obj.contained[0] as MedicationRequest).id))
        assertTrue(stringMatch("proposal", (obj.contained[0] as MedicationRequest).intent))
        assertTrue(stringMatch("http://www.nlm.nih.gov/resear", (obj.contained[0] as MedicationRequest).medicationCodeableConcept.coding[0].system))
        assertTrue(stringMatch("12574", (obj.contained[0] as MedicationRequest).medicationCodeableConcept.coding[0].code))
        assertTrue(stringMatch("gemcitabine", (obj.contained[0] as MedicationRequest).medicationCodeableConcept.coding[0].display))
        assertTrue(stringMatch("gemcitabine", (obj.contained[0] as MedicationRequest).medicationCodeableConcept.text))
        assertTrue(stringMatch("Patient/example", (obj.contained[0] as MedicationRequest).subject.reference))
        assertTrue(stringMatch("1250 mg/m² IV over 30 minutes", (obj.contained[0] as MedicationRequest).dosageInstruction[0].text))
        assertTrue(stringMatch("%.2f".format(30f), "%.2f".format((obj.contained[0] as MedicationRequest).dosageInstruction[0].timing!!.repeat!!.duration)))
        assertTrue(stringMatch("min", (obj.contained[0] as MedicationRequest).dosageInstruction[0].timing!!.repeat!!.durationUnit))
        assertTrue(stringMatch("IV", (obj.contained[0] as MedicationRequest).dosageInstruction[0].route!!.text))
        assertTrue(stringMatch("%.2f".format(1250f), "%.2f".format((obj.contained[0] as MedicationRequest).dosageInstruction[0].doseQuantity!!.value)))
        assertTrue(stringMatch("mg/m²", (obj.contained[0] as MedicationRequest).dosageInstruction[0].doseQuantity!!.unit))
        assertTrue(stringMatch("MedicationRequest", (obj.contained[1] as MedicationRequest).resourceType))
        assertTrue(stringMatch("2222", (obj.contained[1] as MedicationRequest).id))
        assertTrue(stringMatch("proposal", (obj.contained[1] as MedicationRequest).intent))
        assertTrue(stringMatch("http://www.nlm.nih.gov/resear", (obj.contained[1] as MedicationRequest).medicationCodeableConcept.coding[0].system))
        assertTrue(stringMatch("40048", (obj.contained[1] as MedicationRequest).medicationCodeableConcept.coding[0].code))
        assertTrue(stringMatch("Carboplatin", (obj.contained[1] as MedicationRequest).medicationCodeableConcept.coding[0].display))
        assertTrue(stringMatch("CARBOplatin", (obj.contained[1] as MedicationRequest).medicationCodeableConcept.text))
        assertTrue(stringMatch("Patient/example", (obj.contained[1] as MedicationRequest).subject.reference))
        assertTrue(stringMatch("AUC 5 IV over 30 minutes", (obj.contained[1] as MedicationRequest).dosageInstruction[0].text))
        assertTrue(stringMatch("%.2f".format(30f), "%.2f".format((obj.contained[1] as MedicationRequest).dosageInstruction[0].timing!!.repeat!!.duration)))
        assertTrue(stringMatch("min", (obj.contained[1] as MedicationRequest).dosageInstruction[0].timing!!.repeat!!.durationUnit))
        assertTrue(stringMatch("IV", (obj.contained[1] as MedicationRequest).dosageInstruction[0].route!!.text))
        assertTrue(stringMatch("http://example.org/fhir/AUC-d", (obj.contained[1] as MedicationRequest).dosageInstruction[0].doseQuantity!!.extension[0].url))
        assertEquals(5, (obj.contained[1] as MedicationRequest).dosageInstruction[0].doseQuantity!!.extension[0].valueInteger)
        assertTrue(stringMatch("requestgroup-kdn5", obj.identifier[0].value))
        assertTrue(stringMatch("PlanDefinition/KDN5", obj.definition[0].reference))
        assertTrue(stringMatch("draft", obj.status))
        assertTrue(stringMatch("plan", obj.intent))
        assertTrue(stringMatch("routine", obj.priority))
        assertTrue(stringMatch("Patient/example", obj.subject!!.reference))
        assertTrue(stringMatch("Encounter/example", obj.context!!.reference))
        assertTrue(stringMatch("2017-03-06T17:31:00Z", obj.authoredOn))
        assertTrue(stringMatch("Practitioner/1", obj.author!!.reference))
        assertTrue(stringMatch("exactly-one", obj.action[0].selectionBehavior))
        assertTrue(stringMatch("all", obj.action[0].action[0].selectionBehavior))
        assertTrue(stringMatch("sentence-group", obj.action[0].action[0].action[0].groupingBehavior))
        assertTrue(stringMatch("exactly-one", obj.action[0].action[0].action[0].selectionBehavior))
        assertTrue(stringMatch("cycle-definition-1", obj.action[0].action[0].action[0].action[0].id))
        assertTrue(stringMatch("21-day cycle for 6 cycles", obj.action[0].action[0].action[0].action[0].textEquivalent))
        assertEquals(6, obj.action[0].action[0].action[0].action[0].timingTiming!!.repeat!!.count)
        assertTrue(stringMatch("%.2f".format(21f), "%.2f".format(obj.action[0].action[0].action[0].action[0].timingTiming!!.repeat!!.duration)))
        assertTrue(stringMatch("d", obj.action[0].action[0].action[0].action[0].timingTiming!!.repeat!!.durationUnit))
        assertTrue(stringMatch("action-1", obj.action[0].action[0].action[0].action[0].action[0].id))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.action[0].action[0].action[0].action[0].action[0].extension[0].url))
        assertTrue(stringMatch("day", obj.action[0].action[0].action[0].action[0].action[0].extension[0].extension[0].url))
        assertEquals(1, obj.action[0].action[0].action[0].action[0].action[0].extension[0].extension[0].valueInteger)
        assertTrue(stringMatch("day", obj.action[0].action[0].action[0].action[0].action[0].extension[0].extension[1].url))
        assertEquals(8, obj.action[0].action[0].action[0].action[0].action[0].extension[0].extension[1].valueInteger)
        assertTrue(stringMatch("Gemcitabine 1250 mg/m² IV ove", obj.action[0].action[0].action[0].action[0].action[0].textEquivalent))
        assertTrue(stringMatch("#1111", obj.action[0].action[0].action[0].action[0].action[0].resource!!.reference))
        assertTrue(stringMatch("action-2", obj.action[0].action[0].action[0].action[0].action[1].id))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.action[0].action[0].action[0].action[0].action[1].extension[0].url))
        assertTrue(stringMatch("day", obj.action[0].action[0].action[0].action[0].action[1].extension[0].extension[0].url))
        assertEquals(1, obj.action[0].action[0].action[0].action[0].action[1].extension[0].extension[0].valueInteger)
        assertTrue(stringMatch("CARBOplatin AUC 5 IV over 30 ", obj.action[0].action[0].action[0].action[0].action[1].textEquivalent))
        assertTrue(stringMatch("action-1", obj.action[0].action[0].action[0].action[0].action[1].relatedAction[0].actionId))
        assertTrue(stringMatch("concurrent-with-start", obj.action[0].action[0].action[0].action[0].action[1].relatedAction[0].relationship))
        assertTrue(stringMatch("#2222", obj.action[0].action[0].action[0].action[0].action[1].resource!!.reference))
    }

    fun `requestgroup-kdn5-example Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `requestgroup-example 562 Test`() {
        val json = File("./src/test/resources/model/sample_data/requestgroup-example.json").readTextAndClose()
        val obj = mapper.fromJson(json, RequestGroup::class.java)
        assertTrue(stringMatch("RequestGroup", obj.resourceType))
        assertTrue(stringMatch("example", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("MedicationRequest", (obj.contained[0] as MedicationRequest).resourceType))
        assertTrue(stringMatch("medicationrequest-1", (obj.contained[0] as MedicationRequest).id))
        assertTrue(stringMatch("proposal", (obj.contained[0] as MedicationRequest).intent))
        assertTrue(stringMatch("Medication 1", (obj.contained[0] as MedicationRequest).medicationCodeableConcept.text))
        assertTrue(stringMatch("Patient/example", (obj.contained[0] as MedicationRequest).subject.reference))
        assertTrue(stringMatch("MedicationRequest", (obj.contained[1] as MedicationRequest).resourceType))
        assertTrue(stringMatch("medicationrequest-2", (obj.contained[1] as MedicationRequest).id))
        assertTrue(stringMatch("proposal", (obj.contained[1] as MedicationRequest).intent))
        assertTrue(stringMatch("Medication 2", (obj.contained[1] as MedicationRequest).medicationCodeableConcept.text))
        assertTrue(stringMatch("Patient/example", (obj.contained[1] as MedicationRequest).subject.reference))
        assertTrue(stringMatch("requestgroup-1", obj.identifier[0].value))
        assertTrue(stringMatch("http://example.org/treatment-", obj.groupIdentifier!!.system))
        assertTrue(stringMatch("00001", obj.groupIdentifier!!.value))
        assertTrue(stringMatch("draft", obj.status))
        assertTrue(stringMatch("plan", obj.intent))
        assertTrue(stringMatch("routine", obj.priority))
        assertTrue(stringMatch("Patient/example", obj.subject!!.reference))
        assertTrue(stringMatch("Encounter/example", obj.context!!.reference))
        assertTrue(stringMatch("2017-03-06T17:31:00Z", obj.authoredOn))
        assertTrue(stringMatch("Practitioner/1", obj.author!!.reference))
        assertTrue(stringMatch("Treatment", obj.reasonCodeableConcept!!.text))
        assertTrue(stringMatch("Additional notes about the re", obj.note[0].text))
        assertTrue(stringMatch("1", obj.action[0].label))
        assertTrue(stringMatch("Administer Medications", obj.action[0].title))
        assertTrue(stringMatch("Administer medications at the", obj.action[0].description))
        assertTrue(stringMatch("Administer medication 1, foll", obj.action[0].textEquivalent))
        assertTrue(stringMatch("2017-03-06T19:00:00Z", obj.action[0].timingDateTime))
        assertTrue(stringMatch("Practitioner/1", obj.action[0].participant[0].reference))
        assertTrue(stringMatch("logical-group", obj.action[0].groupingBehavior))
        assertTrue(stringMatch("all", obj.action[0].selectionBehavior))
        assertTrue(stringMatch("must", obj.action[0].requiredBehavior))
        assertTrue(stringMatch("yes", obj.action[0].precheckBehavior))
        assertTrue(stringMatch("single", obj.action[0].cardinalityBehavior))
        assertTrue(stringMatch("medication-action-1", obj.action[0].action[0].id))
        assertTrue(stringMatch("Administer medication 1", obj.action[0].action[0].description))
        assertTrue(stringMatch("create", obj.action[0].action[0].type!!.code))
        assertTrue(stringMatch("#medicationrequest-1", obj.action[0].action[0].resource!!.reference))
        assertTrue(stringMatch("medication-action-2", obj.action[0].action[1].id))
        assertTrue(stringMatch("Administer medication 2", obj.action[0].action[1].description))
        assertTrue(stringMatch("medication-action-1", obj.action[0].action[1].relatedAction[0].actionId))
        assertTrue(stringMatch("after-end", obj.action[0].action[1].relatedAction[0].relationship))
        assertTrue(stringMatch("%.2f".format(1f), "%.2f".format(obj.action[0].action[1].relatedAction[0].offsetDuration!!.value)))
        assertTrue(stringMatch("h", obj.action[0].action[1].relatedAction[0].offsetDuration!!.unit))
        assertTrue(stringMatch("create", obj.action[0].action[1].type!!.code))
        assertTrue(stringMatch("#medicationrequest-2", obj.action[0].action[1].resource!!.reference))
    }

    fun `requestgroup-example Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }
}
