package com.juicelabs.fhir.model

import java.io.File
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.junit.jupiter.api.Test

class CarePlanDataTest : DataTests() {
    @Test
    fun `careplan-example-f002-lung 322 Test`() {
        val json = File("./src/test/resources/model/sample_data/careplan-example-f002-lung.json").readTextAndClose()
        val obj = mapper.fromJson(json, CarePlan::class.java)
        assertTrue(stringMatch("CarePlan", obj.resourceType))
        assertTrue(stringMatch("f002", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("CareTeam", (obj.contained[0] as CareTeam).resourceType))
        assertTrue(stringMatch("careteam", (obj.contained[0] as CareTeam).id))
        assertTrue(stringMatch("Practitioner/f003", (obj.contained[0] as CareTeam).participant[0].member!!.reference))
        assertTrue(stringMatch("M.I.M. Versteegh", (obj.contained[0] as CareTeam).participant[0].member!!.display))
        assertTrue(stringMatch("Goal", (obj.contained[1] as Goal).resourceType))
        assertTrue(stringMatch("goal", (obj.contained[1] as Goal).id))
        assertTrue(stringMatch("achieved", (obj.contained[1] as Goal).status))
        assertTrue(stringMatch("succesful surgery on lung of ", (obj.contained[1] as Goal).description.text))
        assertTrue(stringMatch("Patient/f001", (obj.contained[1] as Goal).subject!!.reference))
        assertTrue(stringMatch("P. van de Heuvel", (obj.contained[1] as Goal).subject!!.display))
        assertTrue(stringMatch("goal accomplished with minor ", (obj.contained[1] as Goal).note[0].text))
        assertTrue(stringMatch("official", obj.identifier[0].use))
        assertTrue(stringMatch("http://www.bmc.nl/zorgportal/", obj.identifier[0].system))
        assertTrue(stringMatch("CP2934", obj.identifier[0].value))
        assertTrue(stringMatch("completed", obj.status))
        assertTrue(stringMatch("plan", obj.intent))
        assertTrue(stringMatch("Patient/f001", obj.subject.reference))
        assertTrue(stringMatch("P. van de Heuvel", obj.subject.display))
        assertEquals("2011-07-06", obj.period!!.start.toString())
        assertEquals("2013-07-07", obj.period!!.end.toString())
        assertTrue(stringMatch("#careteam", obj.careTeam[0].reference))
        assertTrue(stringMatch("Condition/f201", obj.addresses[0].reference))
        assertTrue(stringMatch("?????", obj.addresses[0].display))
        assertTrue(stringMatch("#goal", obj.goal[0].reference))
        assertTrue(stringMatch("http://hl7.org/fhir/care-plan", obj.activity[0].detail!!.category!!.coding[0].system))
        assertTrue(stringMatch("procedure", obj.activity[0].detail!!.category!!.coding[0].code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.activity[0].detail!!.code!!.coding[0].system))
        assertTrue(stringMatch("359615001", obj.activity[0].detail!!.code!!.coding[0].code))
        assertTrue(stringMatch("Partial lobectomy of lung", obj.activity[0].detail!!.code!!.coding[0].display))
        assertTrue(stringMatch("completed", obj.activity[0].detail!!.status))
        assertEquals(true, if (obj.activity[0].detail!!.prohibited != null) obj.activity[0].detail!!.prohibited else false, "Field: obj.activity[0].detail!!.prohibited")
        assertTrue(stringMatch("2011-07-07T09:30:10+01:00", obj.activity[0].detail!!.scheduledString))
        assertTrue(stringMatch("Practitioner/f003", obj.activity[0].detail!!.performer[0].reference))
        assertTrue(stringMatch("M.I.M. Versteegh", obj.activity[0].detail!!.performer[0].display))
    }

    @Test
    fun `careplan-example-f202-malignancy 323 Test`() {
        val json = File("./src/test/resources/model/sample_data/careplan-example-f202-malignancy.json").readTextAndClose()
        val obj = mapper.fromJson(json, CarePlan::class.java)
        assertTrue(stringMatch("CarePlan", obj.resourceType))
        assertTrue(stringMatch("f202", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("Medication", (obj.contained[0] as Medication).resourceType))
        assertTrue(stringMatch("doce", (obj.contained[0] as Medication).id))
        assertTrue(stringMatch("http://snomed.info/sct", (obj.contained[0] as Medication).code!!.coding[0].system))
        assertTrue(stringMatch("108806006", (obj.contained[0] as Medication).code!!.coding[0].code))
        assertTrue(stringMatch("Docetaxel", (obj.contained[0] as Medication).code!!.coding[0].display))
        assertTrue(stringMatch("Medication", (obj.contained[1] as Medication).resourceType))
        assertTrue(stringMatch("cisp", (obj.contained[1] as Medication).id))
        assertTrue(stringMatch("http://snomed.info/sct", (obj.contained[1] as Medication).code!!.coding[0].system))
        assertTrue(stringMatch("57066004", (obj.contained[1] as Medication).code!!.coding[0].code))
        assertTrue(stringMatch("Cisplatin", (obj.contained[1] as Medication).code!!.coding[0].display))
        assertTrue(stringMatch("Medication", (obj.contained[2] as Medication).resourceType))
        assertTrue(stringMatch("fluo", (obj.contained[2] as Medication).id))
        assertTrue(stringMatch("http://snomed.info/sct", (obj.contained[2] as Medication).code!!.coding[0].system))
        assertTrue(stringMatch("3127006", (obj.contained[2] as Medication).code!!.coding[0].code))
        assertTrue(stringMatch("Fluorouracil", (obj.contained[2] as Medication).code!!.coding[0].display))
    }

    @Test
    fun `careplan-example-f202-malignancy 324 Test`() {
        val json = File("./src/test/resources/model/sample_data/careplan-example-f202-malignancy.json").readTextAndClose()
        val obj = mapper.fromJson(json, CarePlan::class.java)
        assertTrue(stringMatch("Medication", (obj.contained[3] as Medication).resourceType))
        assertTrue(stringMatch("tpf", (obj.contained[3] as Medication).id))
        assertTrue(stringMatch("TPF", (obj.contained[3] as Medication).code!!.text))
        assertTrue(stringMatch("#doce", (obj.contained[3] as Medication).ingredient[0].itemReference.reference))
        assertTrue(stringMatch("#cisp", (obj.contained[3] as Medication).ingredient[1].itemReference.reference))
        assertTrue(stringMatch("#fluo", (obj.contained[3] as Medication).ingredient[2].itemReference.reference))
        assertTrue(stringMatch("CareTeam", (obj.contained[4] as CareTeam).resourceType))
        assertTrue(stringMatch("careteam", (obj.contained[4] as CareTeam).id))
        assertTrue(stringMatch("http://snomed.info/sct", (obj.contained[4] as CareTeam).participant[0].role!!.coding[0].system))
        assertTrue(stringMatch("28995006", (obj.contained[4] as CareTeam).participant[0].role!!.coding[0].code))
        assertTrue(stringMatch("Treated with", (obj.contained[4] as CareTeam).participant[0].role!!.coding[0].display))
        assertTrue(stringMatch("Practitioner/f201", (obj.contained[4] as CareTeam).participant[0].member!!.reference))
        assertTrue(stringMatch("Dokter Bronsig", (obj.contained[4] as CareTeam).participant[0].member!!.display))
        assertTrue(stringMatch("Goal", (obj.contained[5] as Goal).resourceType))
        assertTrue(stringMatch("goal", (obj.contained[5] as Goal).id))
        assertTrue(stringMatch("in-progress", (obj.contained[5] as Goal).status))
        assertTrue(stringMatch("Elimination of the spenoid bo", (obj.contained[5] as Goal).description.text))
        assertTrue(stringMatch("Patient/f201", (obj.contained[5] as Goal).subject!!.reference))
        assertTrue(stringMatch("Roel", (obj.contained[5] as Goal).subject!!.display))
        assertTrue(stringMatch("active", obj.status))
        assertTrue(stringMatch("plan", obj.intent))
        assertTrue(stringMatch("Patient/f201", obj.subject.reference))
        assertTrue(stringMatch("Roel", obj.subject.display))
        assertTrue(stringMatch("#careteam", obj.careTeam[0].reference))
        assertTrue(stringMatch("Condition/f202", obj.addresses[0].reference))
        assertTrue(stringMatch("Roel's head-neck tumor", obj.addresses[0].display))
        assertTrue(stringMatch("#goal", obj.goal[0].reference))
        assertTrue(stringMatch("Procedure/f201", obj.activity[0].outcomeReference[0].reference))
        assertTrue(stringMatch("Roel's Chemotherapy", obj.activity[0].outcomeReference[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/care-plan", obj.activity[0].detail!!.category!!.coding[0].system))
        assertTrue(stringMatch("procedure", obj.activity[0].detail!!.category!!.coding[0].code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.activity[0].detail!!.code!!.coding[0].system))
        assertTrue(stringMatch("367336001", obj.activity[0].detail!!.code!!.coding[0].code))
        assertTrue(stringMatch("Chemotherapy", obj.activity[0].detail!!.code!!.coding[0].display))
        assertTrue(stringMatch("in-progress", obj.activity[0].detail!!.status))
        assertEquals(false, if (obj.activity[0].detail!!.prohibited != null) obj.activity[0].detail!!.prohibited else false, "Field: obj.activity[0].detail!!.prohibited")
        assertTrue(stringMatch("#tpf", obj.activity[0].detail!!.productReference!!.reference))
    }

    @Test
    fun `careplan-example-obesity-narrative 325 Test`() {
        val json = File("./src/test/resources/model/sample_data/careplan-example-obesity-narrative.json").readTextAndClose()
        val obj = mapper.fromJson(json, CarePlan::class.java)
        assertTrue(stringMatch("CarePlan", obj.resourceType))
        assertTrue(stringMatch("obesity-narrative", obj.id))
        assertTrue(stringMatch("additional", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("active", obj.status))
        assertTrue(stringMatch("plan", obj.intent))
        assertTrue(stringMatch("Patient/example", obj.subject.reference))
        assertTrue(stringMatch("Peter James Chalmers", obj.subject.display))
    }

    @Test
    fun `careplan-example 326 Test`() {
        val json = File("./src/test/resources/model/sample_data/careplan-example.json").readTextAndClose()
        val obj = mapper.fromJson(json, CarePlan::class.java)
        assertTrue(stringMatch("CarePlan", obj.resourceType))
        assertTrue(stringMatch("example", obj.id))
        assertTrue(stringMatch("additional", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("Condition", (obj.contained[0] as Condition).resourceType))
        assertTrue(stringMatch("p1", (obj.contained[0] as Condition).id))
        assertTrue(stringMatch("active", (obj.contained[0] as Condition).clinicalStatus))
        assertTrue(stringMatch("confirmed", (obj.contained[0] as Condition).verificationStatus))
        assertTrue(stringMatch("Obesity", (obj.contained[0] as Condition).code!!.text))
        assertTrue(stringMatch("Patient/example", (obj.contained[0] as Condition).subject.reference))
        assertTrue(stringMatch("Peter James Chalmers", (obj.contained[0] as Condition).subject.display))
        assertTrue(stringMatch("12345", obj.identifier[0].value))
        assertTrue(stringMatch("A PlanDefinition protocol for", obj.definition[0].display))
        assertTrue(stringMatch("Management of Type 2 Diabetes", obj.basedOn[0].display))
        assertTrue(stringMatch("Plan from urgent care clinic", obj.replaces[0].display))
        assertTrue(stringMatch("Overall wellness plan", obj.partOf[0].display))
        assertTrue(stringMatch("active", obj.status))
        assertTrue(stringMatch("plan", obj.intent))
        assertTrue(stringMatch("Weight management plan", obj.category[0].text))
        assertTrue(stringMatch("Manage obesity and weight los", obj.description))
        assertTrue(stringMatch("Patient/example", obj.subject.reference))
        assertTrue(stringMatch("Peter James Chalmers", obj.subject.display))
        assertTrue(stringMatch("Encounter/home", obj.context!!.reference))
        assertEquals("2017-06-01", obj.period!!.end.toString())
        assertTrue(stringMatch("Practitioner/example", obj.author[0].reference))
        assertTrue(stringMatch("Dr Adam Careful", obj.author[0].display))
    }

    @Test
    fun `careplan-example 327 Test`() {
        val json = File("./src/test/resources/model/sample_data/careplan-example.json").readTextAndClose()
        val obj = mapper.fromJson(json, CarePlan::class.java)
        assertTrue(stringMatch("CareTeam/example", obj.careTeam[0].reference))
        assertTrue(stringMatch("#p1", obj.addresses[0].reference))
        assertTrue(stringMatch("obesity", obj.addresses[0].display))
        assertTrue(stringMatch("Goal/example", obj.goal[0].reference))
        assertTrue(stringMatch("http://snomed.info/sct", obj.activity[0].outcomeCodeableConcept[0].coding[0].system))
        assertTrue(stringMatch("161832001", obj.activity[0].outcomeCodeableConcept[0].coding[0].code))
        assertTrue(stringMatch("Progressive weight loss", obj.activity[0].outcomeCodeableConcept[0].coding[0].display))
        assertTrue(stringMatch("Observation/example", obj.activity[0].outcomeReference[0].reference))
        assertTrue(stringMatch("Weight Measured", obj.activity[0].outcomeReference[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/care-plan", obj.activity[0].detail!!.category!!.coding[0].system))
        assertTrue(stringMatch("observation", obj.activity[0].detail!!.category!!.coding[0].code))
        assertTrue(stringMatch("http://loinc.org", obj.activity[0].detail!!.code!!.coding[0].system))
        assertTrue(stringMatch("3141-9", obj.activity[0].detail!!.code!!.coding[0].code))
        assertTrue(stringMatch("Weight Measured", obj.activity[0].detail!!.code!!.coding[0].display))
        assertTrue(stringMatch("http://snomed.info/sct", obj.activity[0].detail!!.code!!.coding[1].system))
        assertTrue(stringMatch("27113001", obj.activity[0].detail!!.code!!.coding[1].code))
        assertTrue(stringMatch("Body weight", obj.activity[0].detail!!.code!!.coding[1].display))
        assertTrue(stringMatch("completed", obj.activity[0].detail!!.status))
        assertTrue(stringMatch("Achieved weight loss to mitig", obj.activity[0].detail!!.statusReason))
        assertEquals(false, if (obj.activity[0].detail!!.prohibited != null) obj.activity[0].detail!!.prohibited else false, "Field: obj.activity[0].detail!!.prohibited")
        assertEquals(1, obj.activity[0].detail!!.scheduledTiming!!.repeat!!.frequency)
        assertTrue(stringMatch("%.2f".format(1f), "%.2f".format(obj.activity[0].detail!!.scheduledTiming!!.repeat!!.period)))
        assertTrue(stringMatch("d", obj.activity[0].detail!!.scheduledTiming!!.repeat!!.periodUnit))
        assertTrue(stringMatch("Patient's home", obj.activity[0].detail!!.location!!.display))
        assertTrue(stringMatch("Patient/example", obj.activity[0].detail!!.performer[0].reference))
        assertTrue(stringMatch("Peter James Chalmers", obj.activity[0].detail!!.performer[0].display))
    }

    @Test
    fun `careplan-example-f201-renal 328 Test`() {
        val json = File("./src/test/resources/model/sample_data/careplan-example-f201-renal.json").readTextAndClose()
        val obj = mapper.fromJson(json, CarePlan::class.java)
        assertTrue(stringMatch("CarePlan", obj.resourceType))
        assertTrue(stringMatch("f201", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("CareTeam", (obj.contained[0] as CareTeam).resourceType))
        assertTrue(stringMatch("careteam", (obj.contained[0] as CareTeam).id))
        assertTrue(stringMatch("http://snomed.info/sct", (obj.contained[0] as CareTeam).participant[0].role!!.coding[0].system))
        assertTrue(stringMatch("425268008", (obj.contained[0] as CareTeam).participant[0].role!!.coding[0].code))
        assertTrue(stringMatch("Review of care plan", (obj.contained[0] as CareTeam).participant[0].role!!.coding[0].display))
        assertTrue(stringMatch("Practitioner/f201", (obj.contained[0] as CareTeam).participant[0].member!!.reference))
        assertTrue(stringMatch("Dokter Bronsig", (obj.contained[0] as CareTeam).participant[0].member!!.display))
        assertTrue(stringMatch("http://snomed.info/sct", (obj.contained[0] as CareTeam).participant[1].role!!.coding[0].system))
        assertTrue(stringMatch("229774002", (obj.contained[0] as CareTeam).participant[1].role!!.coding[0].code))
        assertTrue(stringMatch("Carer", (obj.contained[0] as CareTeam).participant[1].role!!.coding[0].display))
        assertTrue(stringMatch("Practitioner/f204", (obj.contained[0] as CareTeam).participant[1].member!!.reference))
        assertTrue(stringMatch("Nurse Carla Espinosa", (obj.contained[0] as CareTeam).participant[1].member!!.display))
        assertTrue(stringMatch("Goal", (obj.contained[1] as Goal).resourceType))
        assertTrue(stringMatch("goal", (obj.contained[1] as Goal).id))
        assertTrue(stringMatch("achieved", (obj.contained[1] as Goal).status))
        assertTrue(stringMatch("Re-established renal function", (obj.contained[1] as Goal).description.text))
        assertTrue(stringMatch("Patient/f201", (obj.contained[1] as Goal).subject!!.reference))
        assertTrue(stringMatch("Roel", (obj.contained[1] as Goal).subject!!.display))
        assertTrue(stringMatch("draft", obj.status))
        assertTrue(stringMatch("proposal", obj.intent))
        assertTrue(stringMatch("Patient/f201", obj.subject.reference))
        assertTrue(stringMatch("Roel", obj.subject.display))
        assertEquals("2013-03-11", obj.period!!.start.toString())
        assertEquals("2013-03-13", obj.period!!.end.toString())
        assertTrue(stringMatch("#careteam", obj.careTeam[0].reference))
        assertTrue(stringMatch("Condition/f204", obj.addresses[0].reference))
        assertTrue(stringMatch("Roel's renal insufficiency", obj.addresses[0].display))
        assertTrue(stringMatch("#goal", obj.goal[0].reference))
        assertTrue(stringMatch("http://hl7.org/fhir/care-plan", obj.activity[0].detail!!.category!!.coding[0].system))
        assertTrue(stringMatch("diet", obj.activity[0].detail!!.category!!.coding[0].code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.activity[0].detail!!.code!!.coding[0].system))
        assertTrue(stringMatch("284093001", obj.activity[0].detail!!.code!!.coding[0].code))
        assertTrue(stringMatch("Potassium supplementation", obj.activity[0].detail!!.code!!.coding[0].display))
        assertTrue(stringMatch("completed", obj.activity[0].detail!!.status))
        assertEquals(false, if (obj.activity[0].detail!!.prohibited != null) obj.activity[0].detail!!.prohibited else false, "Field: obj.activity[0].detail!!.prohibited")
        assertTrue(stringMatch("daily", obj.activity[0].detail!!.scheduledString))
        assertTrue(stringMatch("Substance/f203", obj.activity[0].detail!!.productReference!!.reference))
        assertTrue(stringMatch("Potassium", obj.activity[0].detail!!.productReference!!.display))
        assertTrue(stringMatch("%.2f".format(80f), "%.2f".format(obj.activity[0].detail!!.dailyAmount!!.value)))
        assertTrue(stringMatch("mmol", obj.activity[0].detail!!.dailyAmount!!.unit))
        assertTrue(stringMatch("http://snomed.info/sct", obj.activity[0].detail!!.dailyAmount!!.system))
    }

    @Test
    fun `careplan-example-f201-renal 329 Test`() {
        val json = File("./src/test/resources/model/sample_data/careplan-example-f201-renal.json").readTextAndClose()
        val obj = mapper.fromJson(json, CarePlan::class.java)
        assertTrue(stringMatch("258718000", obj.activity[0].detail!!.dailyAmount!!.code))
        assertTrue(stringMatch("http://hl7.org/fhir/care-plan", obj.activity[1].detail!!.category!!.coding[0].system))
        assertTrue(stringMatch("observation", obj.activity[1].detail!!.category!!.coding[0].code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.activity[1].detail!!.code!!.coding[0].system))
        assertTrue(stringMatch("306005", obj.activity[1].detail!!.code!!.coding[0].code))
        assertTrue(stringMatch("Echography of kidney", obj.activity[1].detail!!.code!!.coding[0].display))
        assertTrue(stringMatch("completed", obj.activity[1].detail!!.status))
        assertEquals(false, if (obj.activity[1].detail!!.prohibited != null) obj.activity[1].detail!!.prohibited else false, "Field: obj.activity[1].detail!!.prohibited")
    }

    @Test
    fun `careplan-example-GPVisit 330 Test`() {
        val json = File("./src/test/resources/model/sample_data/careplan-example-GPVisit.json").readTextAndClose()
        val obj = mapper.fromJson(json, CarePlan::class.java)
        assertTrue(stringMatch("CarePlan", obj.resourceType))
        assertTrue(stringMatch("gpvisit", obj.id))
        assertTrue(stringMatch("additional", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("Condition", (obj.contained[0] as Condition).resourceType))
        assertTrue(stringMatch("p1", (obj.contained[0] as Condition).id))
        assertTrue(stringMatch("active", (obj.contained[0] as Condition).clinicalStatus))
        assertTrue(stringMatch("confirmed", (obj.contained[0] as Condition).verificationStatus))
        assertTrue(stringMatch("Overseas encounter", (obj.contained[0] as Condition).code!!.text))
        assertTrue(stringMatch("Patient/100", (obj.contained[0] as Condition).subject.reference))
        assertTrue(stringMatch("Peter James Chalmers", (obj.contained[0] as Condition).subject.display))
        assertTrue(stringMatch("CareTeam", (obj.contained[1] as CareTeam).resourceType))
        assertTrue(stringMatch("careteam", (obj.contained[1] as CareTeam).id))
        assertTrue(stringMatch("part1", (obj.contained[1] as CareTeam).participant[0].id))
        assertTrue(stringMatch("http://example.org/local", (obj.contained[1] as CareTeam).participant[0].role!!.coding[0].system))
        assertTrue(stringMatch("nur", (obj.contained[1] as CareTeam).participant[0].role!!.coding[0].code))
        assertTrue(stringMatch("nurse", (obj.contained[1] as CareTeam).participant[0].role!!.text))
        assertTrue(stringMatch("Practitioner/13", (obj.contained[1] as CareTeam).participant[0].member!!.reference))
        assertTrue(stringMatch("Nurse Nancy", (obj.contained[1] as CareTeam).participant[0].member!!.display))
        assertTrue(stringMatch("part2", (obj.contained[1] as CareTeam).participant[1].id))
        assertTrue(stringMatch("http://example.org/local", (obj.contained[1] as CareTeam).participant[1].role!!.coding[0].system))
        assertTrue(stringMatch("doc", (obj.contained[1] as CareTeam).participant[1].role!!.coding[0].code))
        assertTrue(stringMatch("doctor", (obj.contained[1] as CareTeam).participant[1].role!!.text))
        assertTrue(stringMatch("Practitioner/14", (obj.contained[1] as CareTeam).participant[1].member!!.reference))
        assertTrue(stringMatch("Doctor Dave", (obj.contained[1] as CareTeam).participant[1].member!!.display))
        assertTrue(stringMatch("Goal", (obj.contained[2] as Goal).resourceType))
        assertTrue(stringMatch("goal", (obj.contained[2] as Goal).id))
        assertTrue(stringMatch("planned", (obj.contained[2] as Goal).status))
        assertTrue(stringMatch("Complete consultation", (obj.contained[2] as Goal).description.text))
        assertTrue(stringMatch("Patient/100", (obj.contained[2] as Goal).subject!!.reference))
        assertTrue(stringMatch("Peter James Chalmers", (obj.contained[2] as Goal).subject!!.display))
        assertTrue(stringMatch("active", obj.status))
        assertTrue(stringMatch("plan", obj.intent))
        assertTrue(stringMatch("Patient/100", obj.subject.reference))
        assertTrue(stringMatch("Peter James Chalmers", obj.subject.display))
        assertEquals("2013-01-01T10:30:00+00:00", obj.period!!.start.toString())
        assertTrue(stringMatch("#careteam", obj.careTeam[0].reference))
        assertTrue(stringMatch("#p1", obj.addresses[0].reference))
        assertTrue(stringMatch("obesity", obj.addresses[0].display))
        assertTrue(stringMatch("#goal", obj.goal[0].reference))
        assertTrue(stringMatch("Encounter/example", obj.activity[0].outcomeReference[0].reference))
        assertTrue(stringMatch("http://hl7.org/fhir/care-plan", obj.activity[0].detail!!.category!!.coding[0].system))
        assertTrue(stringMatch("encounter", obj.activity[0].detail!!.category!!.coding[0].code))
        assertTrue(stringMatch("http://example.org/local", obj.activity[0].detail!!.code!!.coding[0].system))
        assertTrue(stringMatch("nursecon", obj.activity[0].detail!!.code!!.coding[0].code))
        assertTrue(stringMatch("Nurse Consultation", obj.activity[0].detail!!.code!!.text))
        assertTrue(stringMatch("completed", obj.activity[0].detail!!.status))
        assertEquals(false, if (obj.activity[0].detail!!.prohibited != null) obj.activity[0].detail!!.prohibited else false, "Field: obj.activity[0].detail!!.prohibited")
        assertEquals("2013-01-01T10:38:00+00:00", obj.activity[0].detail!!.scheduledPeriod!!.start.toString())
        assertEquals("2013-01-01T10:50:00+00:00", obj.activity[0].detail!!.scheduledPeriod!!.end.toString())
        assertTrue(stringMatch("Practitioner/13", obj.activity[0].detail!!.performer[0].reference))
        assertTrue(stringMatch("Nurse Nancy", obj.activity[0].detail!!.performer[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/care-plan", obj.activity[1].detail!!.category!!.coding[0].system))
        assertTrue(stringMatch("encounter", obj.activity[1].detail!!.category!!.coding[0].code))
        assertTrue(stringMatch("http://example.org/local", obj.activity[1].detail!!.code!!.coding[0].system))
        assertTrue(stringMatch("doccon", obj.activity[1].detail!!.code!!.coding[0].code))
        assertTrue(stringMatch("Doctor Consultation", obj.activity[1].detail!!.code!!.text))
        assertTrue(stringMatch("scheduled", obj.activity[1].detail!!.status))
        assertEquals(false, if (obj.activity[1].detail!!.prohibited != null) obj.activity[1].detail!!.prohibited else false, "Field: obj.activity[1].detail!!.prohibited")
        assertTrue(stringMatch("Practitioner/14", obj.activity[1].detail!!.performer[0].reference))
        assertTrue(stringMatch("Doctor Dave", obj.activity[1].detail!!.performer[0].display))
    }

    @Test
    fun `careplan-example-integrated 331 Test`() {
        val json = File("./src/test/resources/model/sample_data/careplan-example-integrated.json").readTextAndClose()
        val obj = mapper.fromJson(json, CarePlan::class.java)
        assertTrue(stringMatch("CarePlan", obj.resourceType))
        assertTrue(stringMatch("integrate", obj.id))
    }

    @Test
    fun `careplan-example-integrated 332 Test`() {
        val json = File("./src/test/resources/model/sample_data/careplan-example-integrated.json").readTextAndClose()
        val obj = mapper.fromJson(json, CarePlan::class.java)
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("Condition", (obj.contained[0] as Condition).resourceType))
        assertTrue(stringMatch("p1", (obj.contained[0] as Condition).id))
        assertTrue(stringMatch("active", (obj.contained[0] as Condition).clinicalStatus))
        assertTrue(stringMatch("confirmed", (obj.contained[0] as Condition).verificationStatus))
        assertTrue(stringMatch("GERDS", (obj.contained[0] as Condition).code!!.text))
        assertTrue(stringMatch("Patient/1", (obj.contained[0] as Condition).subject.reference))
        assertTrue(stringMatch("Eve Everywoman", (obj.contained[0] as Condition).subject.display))
        assertTrue(stringMatch("Condition", (obj.contained[1] as Condition).resourceType))
        assertTrue(stringMatch("p2", (obj.contained[1] as Condition).id))
        assertTrue(stringMatch("active", (obj.contained[1] as Condition).clinicalStatus))
        assertTrue(stringMatch("confirmed", (obj.contained[1] as Condition).verificationStatus))
        assertTrue(stringMatch("Obesity", (obj.contained[1] as Condition).code!!.text))
        assertTrue(stringMatch("Patient/1", (obj.contained[1] as Condition).subject.reference))
        assertTrue(stringMatch("Eve Everywoman", (obj.contained[1] as Condition).subject.display))
        assertTrue(stringMatch("Condition", (obj.contained[2] as Condition).resourceType))
        assertTrue(stringMatch("p3", (obj.contained[2] as Condition).id))
        assertTrue(stringMatch("active", (obj.contained[2] as Condition).clinicalStatus))
        assertTrue(stringMatch("confirmed", (obj.contained[2] as Condition).verificationStatus))
        assertTrue(stringMatch("Psoriasis", (obj.contained[2] as Condition).code!!.text))
        assertTrue(stringMatch("Patient/1", (obj.contained[2] as Condition).subject.reference))
        assertTrue(stringMatch("Eve Everywoman", (obj.contained[2] as Condition).subject.display))
        assertTrue(stringMatch("Goal", (obj.contained[3] as Goal).resourceType))
        assertTrue(stringMatch("g1", (obj.contained[3] as Goal).id))
        assertTrue(stringMatch("in-progress", (obj.contained[3] as Goal).status))
        assertTrue(stringMatch("Eve will lose weight and redu", (obj.contained[3] as Goal).description.text))
        assertTrue(stringMatch("Patient/1", (obj.contained[3] as Goal).subject!!.reference))
        assertTrue(stringMatch("Eve Everywoman", (obj.contained[3] as Goal).subject!!.display))
        assertTrue(stringMatch("Goal", (obj.contained[4] as Goal).resourceType))
        assertTrue(stringMatch("g2", (obj.contained[4] as Goal).id))
        assertTrue(stringMatch("in-progress", (obj.contained[4] as Goal).status))
        assertTrue(stringMatch("Eve will improve her GERDS sy", (obj.contained[4] as Goal).description.text))
        assertTrue(stringMatch("Patient/1", (obj.contained[4] as Goal).subject!!.reference))
        assertTrue(stringMatch("Eve Everywoman", (obj.contained[4] as Goal).subject!!.display))
        assertTrue(stringMatch("Goal", (obj.contained[5] as Goal).resourceType))
        assertTrue(stringMatch("g3", (obj.contained[5] as Goal).id))
        assertTrue(stringMatch("in-progress", (obj.contained[5] as Goal).status))
        assertTrue(stringMatch("Eve will increase her energy ", (obj.contained[5] as Goal).description.text))
        assertTrue(stringMatch("Patient/1", (obj.contained[5] as Goal).subject!!.reference))
        assertTrue(stringMatch("Eve Everywoman", (obj.contained[5] as Goal).subject!!.display))
        assertTrue(stringMatch("Goal", (obj.contained[6] as Goal).resourceType))
        assertTrue(stringMatch("g4", (obj.contained[6] as Goal).id))
        assertTrue(stringMatch("in-progress", (obj.contained[6] as Goal).status))
        assertTrue(stringMatch("Eve will set up her medicatio", (obj.contained[6] as Goal).description.text))
        assertTrue(stringMatch("Patient/1", (obj.contained[6] as Goal).subject!!.reference))
        assertTrue(stringMatch("Eve Everywoman", (obj.contained[6] as Goal).subject!!.display))
        assertTrue(stringMatch("Goal", (obj.contained[7] as Goal).resourceType))
        assertTrue(stringMatch("g5", (obj.contained[7] as Goal).id))
        assertTrue(stringMatch("in-progress", (obj.contained[7] as Goal).status))
        assertTrue(stringMatch("Eve will restart her light tr", (obj.contained[7] as Goal).description.text))
        assertTrue(stringMatch("Patient/1", (obj.contained[7] as Goal).subject!!.reference))
        assertTrue(stringMatch("Eve Everywoman", (obj.contained[7] as Goal).subject!!.display))
        assertTrue(stringMatch("active", obj.status))
        assertTrue(stringMatch("plan", obj.intent))
        assertTrue(stringMatch("Patient/1", obj.subject.reference))
        assertTrue(stringMatch("Eve Everywoman", obj.subject.display))
        assertTrue(stringMatch("#p1", obj.addresses[0].reference))
        assertTrue(stringMatch("GERDS", obj.addresses[0].display))
        assertTrue(stringMatch("#p2", obj.addresses[1].reference))
        assertTrue(stringMatch("Obesity", obj.addresses[1].display))
        assertTrue(stringMatch("#p3", obj.addresses[2].reference))
        assertTrue(stringMatch("Psoriasis", obj.addresses[2].display))
        assertTrue(stringMatch("#g1", obj.goal[0].reference))
        assertTrue(stringMatch("#g2", obj.goal[1].reference))
        assertTrue(stringMatch("#g3", obj.goal[2].reference))
        assertTrue(stringMatch("#g4", obj.goal[3].reference))
        assertTrue(stringMatch("#g5", obj.goal[4].reference))
        assertEquals("2012-09-10", obj.activity[0].progress[0].time.toString())
        assertTrue(stringMatch("Eve eats one meal a day with ", obj.activity[0].progress[0].text))
        assertTrue(stringMatch("http://example.org/fhir/Struc", obj.activity[0].detail!!.extension[0].url))
    }

    @Test
    fun `careplan-example-integrated 333 Test`() {
        val json = File("./src/test/resources/model/sample_data/careplan-example-integrated.json").readTextAndClose()
        val obj = mapper.fromJson(json, CarePlan::class.java)
        assertEquals("2012-09-10", obj.activity[0].detail!!.extension[0].valueDate.toString())
        assertTrue(stringMatch("http://hl7.org/fhir/care-plan", obj.activity[0].detail!!.category!!.coding[0].system))
        assertTrue(stringMatch("other", obj.activity[0].detail!!.category!!.coding[0].code))
        assertTrue(stringMatch("#g1", obj.activity[0].detail!!.goal[0].reference))
        assertTrue(stringMatch("not-started", obj.activity[0].detail!!.status))
        assertEquals(false, if (obj.activity[0].detail!!.prohibited != null) obj.activity[0].detail!!.prohibited else false, "Field: obj.activity[0].detail!!.prohibited")
        assertEquals("2012-09-10", obj.activity[0].detail!!.scheduledPeriod!!.start.toString())
        assertTrue(stringMatch("Eve will review photos of hig", obj.activity[0].detail!!.description))
        assertEquals("2012-09-10", obj.activity[1].progress[0].time.toString())
        assertTrue(stringMatch("Eve will sleep in her bed mor", obj.activity[1].progress[0].text))
        assertTrue(stringMatch("http://example.org/fhir/Struc", obj.activity[1].detail!!.extension[0].url))
        assertEquals("2012-09-10", obj.activity[1].detail!!.extension[0].valueDate.toString())
        assertTrue(stringMatch("http://hl7.org/fhir/care-plan", obj.activity[1].detail!!.category!!.coding[0].system))
        assertTrue(stringMatch("other", obj.activity[1].detail!!.category!!.coding[0].code))
        assertTrue(stringMatch("#g1", obj.activity[1].detail!!.goal[0].reference))
        assertTrue(stringMatch("not-started", obj.activity[1].detail!!.status))
        assertEquals(false, if (obj.activity[1].detail!!.prohibited != null) obj.activity[1].detail!!.prohibited else false, "Field: obj.activity[1].detail!!.prohibited")
        assertEquals("2012-09-10", obj.activity[1].detail!!.scheduledPeriod!!.start.toString())
        assertTrue(stringMatch("Eve will ask her dad to asist", obj.activity[1].detail!!.description))
        assertTrue(stringMatch("http://example.org/fhir/Struc", obj.activity[2].detail!!.extension[0].url))
        assertEquals("2012-09-10", obj.activity[2].detail!!.extension[0].valueDate.toString())
        assertTrue(stringMatch("http://hl7.org/fhir/care-plan", obj.activity[2].detail!!.category!!.coding[0].system))
        assertTrue(stringMatch("other", obj.activity[2].detail!!.category!!.coding[0].code))
        assertTrue(stringMatch("#g2", obj.activity[2].detail!!.goal[0].reference))
        assertTrue(stringMatch("in-progress", obj.activity[2].detail!!.status))
        assertEquals(false, if (obj.activity[2].detail!!.prohibited != null) obj.activity[2].detail!!.prohibited else false, "Field: obj.activity[2].detail!!.prohibited")
        assertEquals("2012-09-10", obj.activity[2].detail!!.scheduledPeriod!!.start.toString())
        assertTrue(stringMatch("Eve will reduce her intake of", obj.activity[2].detail!!.description))
        assertEquals("2012-08-27", obj.activity[3].progress[0].time.toString())
        assertTrue(stringMatch("Eve would like to try for 5 d", obj.activity[3].progress[0].text))
        assertEquals("2012-09-10", obj.activity[3].progress[1].time.toString())
        assertTrue(stringMatch("Eve is still walking the dogs", obj.activity[3].progress[1].text))
        assertTrue(stringMatch("http://example.org/fhir/Struc", obj.activity[3].detail!!.extension[0].url))
        assertEquals("2012-09-10", obj.activity[3].detail!!.extension[0].valueDate.toString())
        assertTrue(stringMatch("http://hl7.org/fhir/care-plan", obj.activity[3].detail!!.category!!.coding[0].system))
        assertTrue(stringMatch("other", obj.activity[3].detail!!.category!!.coding[0].code))
        assertTrue(stringMatch("#g3", obj.activity[3].detail!!.goal[0].reference))
        assertTrue(stringMatch("in-progress", obj.activity[3].detail!!.status))
        assertEquals(false, if (obj.activity[3].detail!!.prohibited != null) obj.activity[3].detail!!.prohibited else false, "Field: obj.activity[3].detail!!.prohibited")
        assertEquals("2012-08-27", obj.activity[3].detail!!.scheduledPeriod!!.start.toString())
        assertTrue(stringMatch("Eve will walk her friend's do", obj.activity[3].detail!!.description))
        assertEquals("2012-08-13", obj.activity[4].progress[0].time.toString())
        assertTrue(stringMatch("Eve walked 4 times the last w", obj.activity[4].progress[0].text))
        assertEquals("2012-09-10", obj.activity[4].progress[1].time.toString())
        assertTrue(stringMatch("Eve did not walk to her paren", obj.activity[4].progress[1].text))
        assertTrue(stringMatch("http://example.org/fhir/Struc", obj.activity[4].detail!!.extension[0].url))
        assertEquals("2012-09-10", obj.activity[4].detail!!.extension[0].valueDate.toString())
        assertTrue(stringMatch("http://hl7.org/fhir/care-plan", obj.activity[4].detail!!.category!!.coding[0].system))
        assertTrue(stringMatch("other", obj.activity[4].detail!!.category!!.coding[0].code))
        assertTrue(stringMatch("#g3", obj.activity[4].detail!!.goal[0].reference))
        assertTrue(stringMatch("in-progress", obj.activity[4].detail!!.status))
        assertEquals(false, if (obj.activity[4].detail!!.prohibited != null) obj.activity[4].detail!!.prohibited else false, "Field: obj.activity[4].detail!!.prohibited")
        assertEquals("2012-07-23", obj.activity[4].detail!!.scheduledPeriod!!.start.toString())
        assertTrue(stringMatch("Eve will walk 3 blocks to her", obj.activity[4].detail!!.description))
        assertTrue(stringMatch("http://example.org/fhir/Struc", obj.activity[5].detail!!.extension[0].url))
        assertEquals("2012-08-13", obj.activity[5].detail!!.extension[0].valueDate.toString())
        assertTrue(stringMatch("http://hl7.org/fhir/care-plan", obj.activity[5].detail!!.category!!.coding[0].system))
        assertTrue(stringMatch("other", obj.activity[5].detail!!.category!!.coding[0].code))
        assertTrue(stringMatch("#g4", obj.activity[5].detail!!.goal[0].reference))
        assertTrue(stringMatch("in-progress", obj.activity[5].detail!!.status))
        assertEquals(false, if (obj.activity[5].detail!!.prohibited != null) obj.activity[5].detail!!.prohibited else false, "Field: obj.activity[5].detail!!.prohibited")
        assertEquals("2012-07-23", obj.activity[5].detail!!.scheduledPeriod!!.start.toString())
        assertTrue(stringMatch("Eve will us a calendar to che", obj.activity[5].detail!!.description))
        assertEquals("2012-08-13", obj.activity[6].progress[0].time.toString())
        assertTrue(stringMatch("After restarting the vinegar ", obj.activity[6].progress[0].text))
        assertEquals("2012-08-27", obj.activity[6].progress[1].time.toString())
        assertTrue(stringMatch("Since her skin is improved Ev", obj.activity[6].progress[1].text))
        assertTrue(stringMatch("http://example.org/fhir/Struc", obj.activity[6].detail!!.extension[0].url))
        assertEquals("2012-08-27", obj.activity[6].detail!!.extension[0].valueDate.toString())
        assertTrue(stringMatch("http://hl7.org/fhir/care-plan", obj.activity[6].detail!!.category!!.coding[0].system))
        assertTrue(stringMatch("other", obj.activity[6].detail!!.category!!.coding[0].code))
    }

    @Test
    fun `careplan-example-integrated 334 Test`() {
        val json = File("./src/test/resources/model/sample_data/careplan-example-integrated.json").readTextAndClose()
        val obj = mapper.fromJson(json, CarePlan::class.java)
        assertTrue(stringMatch("#g5", obj.activity[6].detail!!.goal[0].reference))
        assertTrue(stringMatch("in-progress", obj.activity[6].detail!!.status))
        assertEquals(false, if (obj.activity[6].detail!!.prohibited != null) obj.activity[6].detail!!.prohibited else false, "Field: obj.activity[6].detail!!.prohibited")
        assertEquals("2012-07-23", obj.activity[6].detail!!.scheduledPeriod!!.start.toString())
        assertTrue(stringMatch("Eve will use her lights MWF a", obj.activity[6].detail!!.description))
        assertEquals("2012-07-23", obj.activity[7].progress[0].time.toString())
        assertTrue(stringMatch("Eve created a chart as a remi", obj.activity[7].progress[0].text))
        assertTrue(stringMatch("http://example.org/fhir/Struc", obj.activity[7].detail!!.extension[0].url))
        assertEquals("2012-09-10", obj.activity[7].detail!!.extension[0].valueDate.toString())
        assertTrue(stringMatch("http://hl7.org/fhir/care-plan", obj.activity[7].detail!!.category!!.coding[0].system))
        assertTrue(stringMatch("other", obj.activity[7].detail!!.category!!.coding[0].code))
        assertTrue(stringMatch("#g4", obj.activity[7].detail!!.goal[0].reference))
        assertTrue(stringMatch("in-progress", obj.activity[7].detail!!.status))
        assertEquals(false, if (obj.activity[7].detail!!.prohibited != null) obj.activity[7].detail!!.prohibited else false, "Field: obj.activity[7].detail!!.prohibited")
        assertEquals("2012-07-10", obj.activity[7].detail!!.scheduledPeriod!!.start.toString())
        assertTrue(stringMatch("Eve will use a calendar of a ", obj.activity[7].detail!!.description))
        assertEquals("2012-07-30", obj.activity[8].progress[0].time.toString())
        assertTrue(stringMatch("Will be able to esume exercis", obj.activity[8].progress[0].text))
        assertEquals("2012-08-13", obj.activity[8].progress[1].time.toString())
        assertTrue(stringMatch("Eve prefers to focus on walki", obj.activity[8].progress[1].text))
        assertTrue(stringMatch("http://example.org/fhir/Struc", obj.activity[8].detail!!.extension[0].url))
        assertEquals("2012-08-23", obj.activity[8].detail!!.extension[0].valueDate.toString())
        assertTrue(stringMatch("http://hl7.org/fhir/care-plan", obj.activity[8].detail!!.category!!.coding[0].system))
        assertTrue(stringMatch("other", obj.activity[8].detail!!.category!!.coding[0].code))
        assertTrue(stringMatch("#g3", obj.activity[8].detail!!.goal[0].reference))
        assertTrue(stringMatch("on-hold", obj.activity[8].detail!!.status))
        assertEquals(false, if (obj.activity[8].detail!!.prohibited != null) obj.activity[8].detail!!.prohibited else false, "Field: obj.activity[8].detail!!.prohibited")
        assertEquals("2012-07-23", obj.activity[8].detail!!.scheduledPeriod!!.start.toString())
        assertTrue(stringMatch("Eve will start using stretch ", obj.activity[8].detail!!.description))
        assertTrue(stringMatch("http://example.org/fhir/Struc", obj.activity[9].detail!!.extension[0].url))
        assertEquals("2012-07-23", obj.activity[9].detail!!.extension[0].valueDate.toString())
        assertTrue(stringMatch("http://hl7.org/fhir/care-plan", obj.activity[9].detail!!.category!!.coding[0].system))
        assertTrue(stringMatch("other", obj.activity[9].detail!!.category!!.coding[0].code))
        assertTrue(stringMatch("#g4", obj.activity[9].detail!!.goal[0].reference))
        assertTrue(stringMatch("completed", obj.activity[9].detail!!.status))
        assertEquals(false, if (obj.activity[9].detail!!.prohibited != null) obj.activity[9].detail!!.prohibited else false, "Field: obj.activity[9].detail!!.prohibited")
        assertEquals("2012-07-10", obj.activity[9].detail!!.scheduledPeriod!!.start.toString())
        assertTrue(stringMatch("Eve will match a printed medi", obj.activity[9].detail!!.description))
        assertEquals("2012-07-16", obj.activity[10].progress[0].time.toString())
        assertTrue(stringMatch("Eve now has some of her medic", obj.activity[10].progress[0].text))
        assertTrue(stringMatch("http://example.org/fhir/Struc", obj.activity[10].detail!!.extension[0].url))
        assertEquals("2012-07-16", obj.activity[10].detail!!.extension[0].valueDate.toString())
        assertTrue(stringMatch("http://hl7.org/fhir/care-plan", obj.activity[10].detail!!.category!!.coding[0].system))
        assertTrue(stringMatch("other", obj.activity[10].detail!!.category!!.coding[0].code))
        assertTrue(stringMatch("#g4", obj.activity[10].detail!!.goal[0].reference))
        assertTrue(stringMatch("completed", obj.activity[10].detail!!.status))
        assertEquals(false, if (obj.activity[10].detail!!.prohibited != null) obj.activity[10].detail!!.prohibited else false, "Field: obj.activity[10].detail!!.prohibited")
        assertEquals("2012-07-10", obj.activity[10].detail!!.scheduledPeriod!!.start.toString())
        assertTrue(stringMatch("Eve will get a medication box", obj.activity[10].detail!!.description))
        assertEquals("2012-07-12", obj.activity[11].progress[0].time.toString())
        assertTrue(stringMatch("Eve will be able to resume ex", obj.activity[11].progress[0].text))
        assertEquals("2012-08-13", obj.activity[11].progress[1].time.toString())
        assertTrue(stringMatch("hold until \"less busy\"", obj.activity[11].progress[1].text))
        assertTrue(stringMatch("http://example.org/fhir/Struc", obj.activity[11].detail!!.extension[0].url))
        assertEquals("2012-08-13", obj.activity[11].detail!!.extension[0].valueDate.toString())
        assertTrue(stringMatch("http://hl7.org/fhir/care-plan", obj.activity[11].detail!!.category!!.coding[0].system))
        assertTrue(stringMatch("other", obj.activity[11].detail!!.category!!.coding[0].code))
        assertTrue(stringMatch("#g3", obj.activity[11].detail!!.goal[0].reference))
        assertTrue(stringMatch("on-hold", obj.activity[11].detail!!.status))
        assertEquals(false, if (obj.activity[11].detail!!.prohibited != null) obj.activity[11].detail!!.prohibited else false, "Field: obj.activity[11].detail!!.prohibited")
        assertEquals("2012-07-23", obj.activity[11].detail!!.scheduledPeriod!!.start.toString())
        assertTrue(stringMatch("Eve will open \"The Firm\" DVD ", obj.activity[11].detail!!.description))
        assertTrue(stringMatch("Patient family is not ready t", obj.note[0].text))
    }

    @Test
    fun `careplan-example-f003-pharynx 335 Test`() {
        val json = File("./src/test/resources/model/sample_data/careplan-example-f003-pharynx.json").readTextAndClose()
        val obj = mapper.fromJson(json, CarePlan::class.java)
        assertTrue(stringMatch("CarePlan", obj.resourceType))
        assertTrue(stringMatch("f003", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("CareTeam", (obj.contained[0] as CareTeam).resourceType))
        assertTrue(stringMatch("careteam", (obj.contained[0] as CareTeam).id))
        assertTrue(stringMatch("Practitioner/f001", (obj.contained[0] as CareTeam).participant[0].member!!.reference))
        assertTrue(stringMatch("E.M. van den broek", (obj.contained[0] as CareTeam).participant[0].member!!.display))
    }

    @Test
    fun `careplan-example-f003-pharynx 336 Test`() {
        val json = File("./src/test/resources/model/sample_data/careplan-example-f003-pharynx.json").readTextAndClose()
        val obj = mapper.fromJson(json, CarePlan::class.java)
        assertTrue(stringMatch("Goal", (obj.contained[1] as Goal).resourceType))
        assertTrue(stringMatch("goal", (obj.contained[1] as Goal).id))
        assertTrue(stringMatch("achieved", (obj.contained[1] as Goal).status))
        assertTrue(stringMatch("Retropharyngeal abscess remov", (obj.contained[1] as Goal).description.text))
        assertTrue(stringMatch("Patient/f001", (obj.contained[1] as Goal).subject!!.reference))
        assertTrue(stringMatch("P. van de Heuvel", (obj.contained[1] as Goal).subject!!.display))
        assertTrue(stringMatch("goal accomplished without com", (obj.contained[1] as Goal).note[0].text))
        assertTrue(stringMatch("official", obj.identifier[0].use))
        assertTrue(stringMatch("http://www.bmc.nl/zorgportal/", obj.identifier[0].system))
        assertTrue(stringMatch("CP3953", obj.identifier[0].value))
        assertTrue(stringMatch("completed", obj.status))
        assertTrue(stringMatch("plan", obj.intent))
        assertTrue(stringMatch("Patient/f001", obj.subject.reference))
        assertTrue(stringMatch("P. van de Heuvel", obj.subject.display))
        assertEquals("2013-03-08T09:00:10+01:00", obj.period!!.start.toString())
        assertEquals("2013-03-08T09:30:10+01:00", obj.period!!.end.toString())
        assertTrue(stringMatch("#careteam", obj.careTeam[0].reference))
        assertTrue(stringMatch("Condition/f201", obj.addresses[0].reference))
        assertTrue(stringMatch("?????", obj.addresses[0].display))
        assertTrue(stringMatch("#goal", obj.goal[0].reference))
        assertTrue(stringMatch("http://hl7.org/fhir/care-plan", obj.activity[0].detail!!.category!!.coding[0].system))
        assertTrue(stringMatch("procedure", obj.activity[0].detail!!.category!!.coding[0].code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.activity[0].detail!!.code!!.coding[0].system))
        assertTrue(stringMatch("172960003", obj.activity[0].detail!!.code!!.coding[0].code))
        assertTrue(stringMatch("Incision of retropharyngeal a", obj.activity[0].detail!!.code!!.coding[0].display))
        assertTrue(stringMatch("completed", obj.activity[0].detail!!.status))
        assertEquals(true, if (obj.activity[0].detail!!.prohibited != null) obj.activity[0].detail!!.prohibited else false, "Field: obj.activity[0].detail!!.prohibited")
        assertTrue(stringMatch("2011-06-27T09:30:10+01:00", obj.activity[0].detail!!.scheduledString))
        assertTrue(stringMatch("Practitioner/f001", obj.activity[0].detail!!.performer[0].reference))
        assertTrue(stringMatch("E.M. van den broek", obj.activity[0].detail!!.performer[0].display))
    }

    @Test
    fun `careplan-example-f001-heart 337 Test`() {
        val json = File("./src/test/resources/model/sample_data/careplan-example-f001-heart.json").readTextAndClose()
        val obj = mapper.fromJson(json, CarePlan::class.java)
        assertTrue(stringMatch("CarePlan", obj.resourceType))
        assertTrue(stringMatch("f001", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("CareTeam", (obj.contained[0] as CareTeam).resourceType))
        assertTrue(stringMatch("careteam", (obj.contained[0] as CareTeam).id))
        assertTrue(stringMatch("Practitioner/f002", (obj.contained[0] as CareTeam).participant[0].member!!.reference))
        assertTrue(stringMatch("P. Voigt", (obj.contained[0] as CareTeam).participant[0].member!!.display))
        assertTrue(stringMatch("Goal", (obj.contained[1] as Goal).resourceType))
        assertTrue(stringMatch("goal", (obj.contained[1] as Goal).id))
        assertTrue(stringMatch("achieved", (obj.contained[1] as Goal).status))
        assertTrue(stringMatch("recovery surgery on heart of ", (obj.contained[1] as Goal).description.text))
        assertTrue(stringMatch("Patient/f001", (obj.contained[1] as Goal).subject!!.reference))
        assertTrue(stringMatch("P. van de Heuvel", (obj.contained[1] as Goal).subject!!.display))
        assertTrue(stringMatch("goal accomplished without com", (obj.contained[1] as Goal).note[0].text))
        assertTrue(stringMatch("official", obj.identifier[0].use))
        assertTrue(stringMatch("http://www.bmc.nl/zorgportal/", obj.identifier[0].system))
        assertTrue(stringMatch("CP2903", obj.identifier[0].value))
        assertTrue(stringMatch("completed", obj.status))
        assertTrue(stringMatch("plan", obj.intent))
        assertTrue(stringMatch("Patient/f001", obj.subject.reference))
        assertTrue(stringMatch("P. van de Heuvel", obj.subject.display))
        assertEquals("2011-06-26", obj.period!!.start.toString())
        assertEquals("2011-06-27", obj.period!!.end.toString())
        assertTrue(stringMatch("#careteam", obj.careTeam[0].reference))
        assertTrue(stringMatch("Condition/f201", obj.addresses[0].reference))
        assertTrue(stringMatch("?????", obj.addresses[0].display))
        assertTrue(stringMatch("#goal", obj.goal[0].reference))
        assertTrue(stringMatch("http://hl7.org/fhir/care-plan", obj.activity[0].detail!!.category!!.coding[0].system))
        assertTrue(stringMatch("procedure", obj.activity[0].detail!!.category!!.coding[0].code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.activity[0].detail!!.code!!.coding[0].system))
        assertTrue(stringMatch("64915003", obj.activity[0].detail!!.code!!.coding[0].code))
        assertTrue(stringMatch("Operation on heart", obj.activity[0].detail!!.code!!.coding[0].display))
        assertTrue(stringMatch("completed", obj.activity[0].detail!!.status))
        assertEquals(true, if (obj.activity[0].detail!!.prohibited != null) obj.activity[0].detail!!.prohibited else false, "Field: obj.activity[0].detail!!.prohibited")
        assertTrue(stringMatch("2011-06-27T09:30:10+01:00", obj.activity[0].detail!!.scheduledString))
        assertTrue(stringMatch("Practitioner/f002", obj.activity[0].detail!!.performer[0].reference))
        assertTrue(stringMatch("P. Voigt", obj.activity[0].detail!!.performer[0].display))
    }

    @Test
    fun `careplan-example-pregnancy 338 Test`() {
        val json = File("./src/test/resources/model/sample_data/careplan-example-pregnancy.json").readTextAndClose()
        val obj = mapper.fromJson(json, CarePlan::class.java)
        assertTrue(stringMatch("CarePlan", obj.resourceType))
        assertTrue(stringMatch("preg", obj.id))
        assertTrue(stringMatch("additional", obj.text!!.status))
    }

    @Test
    fun `careplan-example-pregnancy 339 Test`() {
        val json = File("./src/test/resources/model/sample_data/careplan-example-pregnancy.json").readTextAndClose()
        val obj = mapper.fromJson(json, CarePlan::class.java)
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("Condition", (obj.contained[0] as Condition).resourceType))
        assertTrue(stringMatch("p1", (obj.contained[0] as Condition).id))
        assertTrue(stringMatch("active", (obj.contained[0] as Condition).clinicalStatus))
        assertTrue(stringMatch("confirmed", (obj.contained[0] as Condition).verificationStatus))
        assertTrue(stringMatch("pregnancy", (obj.contained[0] as Condition).code!!.text))
        assertTrue(stringMatch("Patient/1", (obj.contained[0] as Condition).subject.reference))
        assertTrue(stringMatch("Eve Everywoman", (obj.contained[0] as Condition).subject.display))
        assertTrue(stringMatch("Practitioner", (obj.contained[1] as Practitioner).resourceType))
        assertTrue(stringMatch("pr1", (obj.contained[1] as Practitioner).id))
        assertTrue(stringMatch("Midwife", (obj.contained[1] as Practitioner).name[0].family))
        assertTrue(stringMatch("Mavis", (obj.contained[1] as Practitioner).name[0].given[0]))
        assertTrue(stringMatch("Practitioner", (obj.contained[2] as Practitioner).resourceType))
        assertTrue(stringMatch("pr2", (obj.contained[2] as Practitioner).id))
        assertTrue(stringMatch("Obstetrician", (obj.contained[2] as Practitioner).name[0].family))
        assertTrue(stringMatch("Oscar", (obj.contained[2] as Practitioner).name[0].given[0]))
        assertTrue(stringMatch("CareTeam", (obj.contained[3] as CareTeam).resourceType))
        assertTrue(stringMatch("careteam", (obj.contained[3] as CareTeam).id))
        assertTrue(stringMatch("http://example.org/mysys", (obj.contained[3] as CareTeam).participant[0].role!!.coding[0].system))
        assertTrue(stringMatch("lmc", (obj.contained[3] as CareTeam).participant[0].role!!.coding[0].code))
        assertTrue(stringMatch("Midwife", (obj.contained[3] as CareTeam).participant[0].role!!.text))
        assertTrue(stringMatch("#pr1", (obj.contained[3] as CareTeam).participant[0].member!!.reference))
        assertTrue(stringMatch("Mavis Midwife", (obj.contained[3] as CareTeam).participant[0].member!!.display))
        assertTrue(stringMatch("http://example.org/mysys", (obj.contained[3] as CareTeam).participant[1].role!!.coding[0].system))
        assertTrue(stringMatch("obs", (obj.contained[3] as CareTeam).participant[1].role!!.coding[0].code))
        assertTrue(stringMatch("Obstretitian", (obj.contained[3] as CareTeam).participant[1].role!!.text))
        assertTrue(stringMatch("#pr2", (obj.contained[3] as CareTeam).participant[1].member!!.reference))
        assertTrue(stringMatch("Oscar Obstetrician", (obj.contained[3] as CareTeam).participant[1].member!!.display))
        assertTrue(stringMatch("Goal", (obj.contained[4] as Goal).resourceType))
        assertTrue(stringMatch("goal", (obj.contained[4] as Goal).id))
        assertTrue(stringMatch("in-progress", (obj.contained[4] as Goal).status))
        assertTrue(stringMatch("Maintain patient's health thr", (obj.contained[4] as Goal).description.text))
        assertTrue(stringMatch("Patient/1", (obj.contained[4] as Goal).subject!!.reference))
        assertTrue(stringMatch("Eve Everywoman", (obj.contained[4] as Goal).subject!!.display))
        assertTrue(stringMatch("http://example.org/fhir/Struc", obj.extension[0].url))
        assertEquals("2013-01-01", obj.extension[0].valueDateTime.toString())
        assertTrue(stringMatch("active", obj.status))
        assertTrue(stringMatch("plan", obj.intent))
        assertTrue(stringMatch("Patient/1", obj.subject.reference))
        assertTrue(stringMatch("Eve Everywoman", obj.subject.display))
        assertEquals("2013-01-01", obj.period!!.start.toString())
        assertEquals("2013-10-01", obj.period!!.end.toString())
        assertTrue(stringMatch("#careteam", obj.careTeam[0].reference))
        assertTrue(stringMatch("#p1", obj.addresses[0].reference))
        assertTrue(stringMatch("pregnancy", obj.addresses[0].display))
        assertTrue(stringMatch("#goal", obj.goal[0].reference))
        assertTrue(stringMatch("Prenatal vitamin MedicationRe", obj.activity[0].reference!!.display))
        assertTrue(stringMatch("http://example.org/fhir/Struc", obj.activity[1].extension[0].url))
        assertTrue(stringMatch("http://orionhealth.com/fhir/c", obj.activity[1].extension[0].valueUri))
        assertTrue(stringMatch("http://hl7.org/fhir/care-plan", obj.activity[1].detail!!.category!!.coding[0].system))
        assertTrue(stringMatch("encounter", obj.activity[1].detail!!.category!!.coding[0].code))
        assertTrue(stringMatch("http://example.org/mySystem", obj.activity[1].detail!!.code!!.coding[0].system))
        assertTrue(stringMatch("1an", obj.activity[1].detail!!.code!!.coding[0].code))
        assertTrue(stringMatch("First Antenatal encounter", obj.activity[1].detail!!.code!!.text))
        assertTrue(stringMatch("scheduled", obj.activity[1].detail!!.status))
        assertEquals(false, if (obj.activity[1].detail!!.prohibited != null) obj.activity[1].detail!!.prohibited else false, "Field: obj.activity[1].detail!!.prohibited")
        assertEquals("2013-02-14", obj.activity[1].detail!!.scheduledTiming!!.repeat!!.boundsPeriod!!.start.toString())
        assertEquals("2013-02-28", obj.activity[1].detail!!.scheduledTiming!!.repeat!!.boundsPeriod!!.end.toString())
        assertTrue(stringMatch("#pr1", obj.activity[1].detail!!.performer[0].reference))
        assertTrue(stringMatch("Mavis Midwife", obj.activity[1].detail!!.performer[0].display))
        assertTrue(stringMatch("The first antenatal encounter", obj.activity[1].detail!!.description))
        assertTrue(stringMatch("http://hl7.org/fhir/care-plan", obj.activity[2].detail!!.category!!.coding[0].system))
        assertTrue(stringMatch("encounter", obj.activity[2].detail!!.category!!.coding[0].code))
        assertTrue(stringMatch("http://example.org/mySystem", obj.activity[2].detail!!.code!!.coding[0].system))
        assertTrue(stringMatch("an", obj.activity[2].detail!!.code!!.coding[0].code))
        assertTrue(stringMatch("Follow-up Antenatal encounter", obj.activity[2].detail!!.code!!.text))
        assertTrue(stringMatch("not-started", obj.activity[2].detail!!.status))
        assertEquals(false, if (obj.activity[2].detail!!.prohibited != null) obj.activity[2].detail!!.prohibited else false, "Field: obj.activity[2].detail!!.prohibited")
        assertEquals("2013-03-01", obj.activity[2].detail!!.scheduledTiming!!.repeat!!.boundsPeriod!!.start.toString())
        assertEquals("2013-03-14", obj.activity[2].detail!!.scheduledTiming!!.repeat!!.boundsPeriod!!.end.toString())
        assertTrue(stringMatch("#pr1", obj.activity[2].detail!!.performer[0].reference))
    }

    @Test
    fun `careplan-example-pregnancy 340 Test`() {
        val json = File("./src/test/resources/model/sample_data/careplan-example-pregnancy.json").readTextAndClose()
        val obj = mapper.fromJson(json, CarePlan::class.java)
        assertTrue(stringMatch("Mavis Midwife", obj.activity[2].detail!!.performer[0].display))
        assertTrue(stringMatch("The second antenatal encounte", obj.activity[2].detail!!.description))
        assertTrue(stringMatch("http://hl7.org/fhir/care-plan", obj.activity[3].detail!!.category!!.coding[0].system))
        assertTrue(stringMatch("encounter", obj.activity[3].detail!!.category!!.coding[0].code))
        assertTrue(stringMatch("http://example.org/mySystem", obj.activity[3].detail!!.code!!.coding[0].system))
        assertTrue(stringMatch("del", obj.activity[3].detail!!.code!!.coding[0].code))
        assertTrue(stringMatch("Delivery", obj.activity[3].detail!!.code!!.text))
        assertTrue(stringMatch("not-started", obj.activity[3].detail!!.status))
        assertEquals(false, if (obj.activity[3].detail!!.prohibited != null) obj.activity[3].detail!!.prohibited else false, "Field: obj.activity[3].detail!!.prohibited")
        assertEquals("2013-09-01", obj.activity[3].detail!!.scheduledTiming!!.repeat!!.boundsPeriod!!.start.toString())
        assertEquals("2013-09-14", obj.activity[3].detail!!.scheduledTiming!!.repeat!!.boundsPeriod!!.end.toString())
        assertTrue(stringMatch("#pr1", obj.activity[3].detail!!.performer[0].reference))
        assertTrue(stringMatch("Mavis Midwife", obj.activity[3].detail!!.performer[0].display))
        assertTrue(stringMatch("The delivery.", obj.activity[3].detail!!.description))
    }

    @Test
    fun `careplan-example-f203-sepsis 341 Test`() {
        val json = File("./src/test/resources/model/sample_data/careplan-example-f203-sepsis.json").readTextAndClose()
        val obj = mapper.fromJson(json, CarePlan::class.java)
        assertTrue(stringMatch("CarePlan", obj.resourceType))
        assertTrue(stringMatch("f203", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("CareTeam", (obj.contained[0] as CareTeam).resourceType))
        assertTrue(stringMatch("careteam", (obj.contained[0] as CareTeam).id))
        assertTrue(stringMatch("http://snomed.info/sct", (obj.contained[0] as CareTeam).participant[0].role!!.coding[0].system))
        assertTrue(stringMatch("425268008", (obj.contained[0] as CareTeam).participant[0].role!!.coding[0].code))
        assertTrue(stringMatch("Review of care plan", (obj.contained[0] as CareTeam).participant[0].role!!.coding[0].display))
        assertTrue(stringMatch("Practitioner/f201", (obj.contained[0] as CareTeam).participant[0].member!!.reference))
        assertTrue(stringMatch("Dokter Bronsig", (obj.contained[0] as CareTeam).participant[0].member!!.display))
        assertTrue(stringMatch("http://snomed.info/sct", (obj.contained[0] as CareTeam).participant[1].role!!.coding[0].system))
        assertTrue(stringMatch("278110001", (obj.contained[0] as CareTeam).participant[1].role!!.coding[0].code))
        assertTrue(stringMatch("Radiographic imaging", (obj.contained[0] as CareTeam).participant[1].role!!.coding[0].display))
        assertTrue(stringMatch("Practitioner/f202", (obj.contained[0] as CareTeam).participant[1].member!!.reference))
        assertTrue(stringMatch("Luigi Maas", (obj.contained[0] as CareTeam).participant[1].member!!.display))
        assertTrue(stringMatch("Goal", (obj.contained[1] as Goal).resourceType))
        assertTrue(stringMatch("goal", (obj.contained[1] as Goal).id))
        assertTrue(stringMatch("cancelled", (obj.contained[1] as Goal).status))
        assertTrue(stringMatch("Check whether further treatme", (obj.contained[1] as Goal).description.text))
        assertTrue(stringMatch("Patient/f201", (obj.contained[1] as Goal).subject!!.reference))
        assertTrue(stringMatch("Roel", (obj.contained[1] as Goal).subject!!.display))
        assertTrue(stringMatch("completed", obj.status))
        assertTrue(stringMatch("plan", obj.intent))
        assertTrue(stringMatch("Patient/f201", obj.subject.reference))
        assertTrue(stringMatch("Roel", obj.subject.display))
        assertEquals("2013-04-14", obj.period!!.start.toString())
        assertEquals("2013-04-21", obj.period!!.end.toString())
        assertTrue(stringMatch("#careteam", obj.careTeam[0].reference))
        assertTrue(stringMatch("Condition/f203", obj.addresses[0].reference))
        assertTrue(stringMatch("Roel's sepsis", obj.addresses[0].display))
        assertTrue(stringMatch("#goal", obj.goal[0].reference))
        assertTrue(stringMatch("http://hl7.org/fhir/care-plan", obj.activity[0].detail!!.category!!.coding[0].system))
        assertTrue(stringMatch("observation", obj.activity[0].detail!!.category!!.coding[0].code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.activity[0].detail!!.code!!.coding[0].system))
        assertTrue(stringMatch("241541005", obj.activity[0].detail!!.code!!.coding[0].code))
        assertTrue(stringMatch("High resolution computed tomo", obj.activity[0].detail!!.code!!.coding[0].display))
        assertTrue(stringMatch("not-started", obj.activity[0].detail!!.status))
        assertEquals(false, if (obj.activity[0].detail!!.prohibited != null) obj.activity[0].detail!!.prohibited else false, "Field: obj.activity[0].detail!!.prohibited")
    }
}
