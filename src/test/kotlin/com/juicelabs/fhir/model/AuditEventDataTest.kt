package com.juicelabs.fhir.model

import java.io.File
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.junit.jupiter.api.Test

class AuditEventDataTest : DataTests() {
    @Test
    fun `audit-event-example-search 170 Test`() {
        val json = File("./src/test/resources/model/sample_data/audit-event-example-search.json").readTextAndClose()
        val obj = mapper.fromJson(json, AuditEvent::class.java)
        assertTrue(stringMatch("AuditEvent", obj.resourceType))
        assertTrue(stringMatch("example-search", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://hl7.org/fhir/audit-eve", obj.type.system))
        assertTrue(stringMatch("rest", obj.type.code))
        assertTrue(stringMatch("Restful Operation", obj.type.display))
        assertTrue(stringMatch("http://hl7.org/fhir/restful-i", obj.subtype[0].system))
        assertTrue(stringMatch("search", obj.subtype[0].code))
        assertTrue(stringMatch("search", obj.subtype[0].display))
        assertTrue(stringMatch("E", obj.action))
        assertTrue(stringMatch("2015-08-22T23:42:24Z", obj.recorded))
        assertTrue(stringMatch("0", obj.outcome))
        assertTrue(stringMatch("95", obj.agent[0].userId!!.value))
        assertTrue(stringMatch("601847123", obj.agent[0].altId))
        assertTrue(stringMatch("Grahame Grieve", obj.agent[0].name))
        assertEquals(true, if (obj.agent[0].requestor != null) obj.agent[0].requestor else false, "Field: obj.agent[0].requestor")
        assertTrue(stringMatch("http://dicom.nema.org/resourc", obj.agent[1].role[0].coding[0].system))
        assertTrue(stringMatch("110153", obj.agent[1].role[0].coding[0].code))
        assertTrue(stringMatch("Source Role ID", obj.agent[1].role[0].coding[0].display))
        assertTrue(stringMatch("2.16.840.1.113883.4.2|2.16.84", obj.agent[1].userId!!.value))
        assertTrue(stringMatch("6580", obj.agent[1].altId))
        assertEquals(false, if (obj.agent[1].requestor != null) obj.agent[1].requestor else false, "Field: obj.agent[1].requestor")
        assertTrue(stringMatch("Workstation1.ehr.familyclinic", obj.agent[1].network!!.address))
        assertTrue(stringMatch("1", obj.agent[1].network!!.type))
        assertTrue(stringMatch("Cloud", obj.source.site))
        assertTrue(stringMatch("hl7connect.healthintersection", obj.source.identifier.value))
        assertTrue(stringMatch("http://hl7.org/fhir/security-", obj.source.type[0].system))
        assertTrue(stringMatch("3", obj.source.type[0].code))
        assertTrue(stringMatch("Web Server", obj.source.type[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/object-ty", obj.entity[0].type!!.system))
        assertTrue(stringMatch("2", obj.entity[0].type!!.code))
        assertTrue(stringMatch("System Object", obj.entity[0].type!!.display))
        assertTrue(stringMatch("http://hl7.org/fhir/object-ro", obj.entity[0].role!!.system))
        assertTrue(stringMatch("24", obj.entity[0].role!!.code))
        assertTrue(stringMatch("Query", obj.entity[0].role!!.display))
        assertTrue(stringMatch("aHR0cDovL2ZoaXItZGV2LmhlYWx0a", obj.entity[0].query))
    }

    fun `audit-event-example-search Init`(obj: Bundle) {
    }

    @Test
    fun `audit-event-example-logout 171 Test`() {
        val json = File("./src/test/resources/model/sample_data/audit-event-example-logout.json").readTextAndClose()
        val obj = mapper.fromJson(json, AuditEvent::class.java)
        assertTrue(stringMatch("AuditEvent", obj.resourceType))
        assertTrue(stringMatch("example-logout", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://dicom.nema.org/resourc", obj.type.system))
        assertTrue(stringMatch("110114", obj.type.code))
        assertTrue(stringMatch("User Authentication", obj.type.display))
        assertTrue(stringMatch("http://dicom.nema.org/resourc", obj.subtype[0].system))
        assertTrue(stringMatch("110123", obj.subtype[0].code))
        assertTrue(stringMatch("Logout", obj.subtype[0].display))
        assertTrue(stringMatch("E", obj.action))
        assertTrue(stringMatch("2013-06-20T23:46:41Z", obj.recorded))
        assertTrue(stringMatch("0", obj.outcome))
        assertTrue(stringMatch("95", obj.agent[0].userId!!.value))
        assertTrue(stringMatch("601847123", obj.agent[0].altId))
        assertTrue(stringMatch("Grahame Grieve", obj.agent[0].name))
        assertEquals(true, if (obj.agent[0].requestor != null) obj.agent[0].requestor else false, "Field: obj.agent[0].requestor")
        assertTrue(stringMatch("127.0.0.1", obj.agent[0].network!!.address))
        assertTrue(stringMatch("2", obj.agent[0].network!!.type))
        assertTrue(stringMatch("http://dicom.nema.org/resourc", obj.agent[1].role[0].coding[0].system))
        assertTrue(stringMatch("110153", obj.agent[1].role[0].coding[0].code))
        assertTrue(stringMatch("Source Role ID", obj.agent[1].role[0].coding[0].display))
        assertTrue(stringMatch("2.16.840.1.113883.4.2|2.16.84", obj.agent[1].userId!!.value))
        assertTrue(stringMatch("6580", obj.agent[1].altId))
        assertEquals(false, if (obj.agent[1].requestor != null) obj.agent[1].requestor else false, "Field: obj.agent[1].requestor")
        assertTrue(stringMatch("Workstation1.ehr.familyclinic", obj.agent[1].network!!.address))
        assertTrue(stringMatch("1", obj.agent[1].network!!.type))
        assertTrue(stringMatch("Cloud", obj.source.site))
        assertTrue(stringMatch("hl7connect.healthintersection", obj.source.identifier.value))
        assertTrue(stringMatch("http://hl7.org/fhir/security-", obj.source.type[0].system))
        assertTrue(stringMatch("3", obj.source.type[0].code))
        assertTrue(stringMatch("Web Server", obj.source.type[0].display))
    }

    fun `audit-event-example-logout Init`(obj: Bundle) {
    }

    @Test
    fun `audit-event-example-vread 172 Test`() {
        val json = File("./src/test/resources/model/sample_data/audit-event-example-vread.json").readTextAndClose()
        val obj = mapper.fromJson(json, AuditEvent::class.java)
        assertTrue(stringMatch("AuditEvent", obj.resourceType))
        assertTrue(stringMatch("example-rest", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://hl7.org/fhir/audit-eve", obj.type.system))
        assertTrue(stringMatch("rest", obj.type.code))
        assertTrue(stringMatch("Restful Operation", obj.type.display))
        assertTrue(stringMatch("http://hl7.org/fhir/restful-i", obj.subtype[0].system))
        assertTrue(stringMatch("vread", obj.subtype[0].code))
        assertTrue(stringMatch("vread", obj.subtype[0].display))
        assertTrue(stringMatch("R", obj.action))
        assertTrue(stringMatch("2013-06-20T23:42:24Z", obj.recorded))
        assertTrue(stringMatch("0", obj.outcome))
        assertTrue(stringMatch("95", obj.agent[0].userId!!.value))
        assertTrue(stringMatch("601847123", obj.agent[0].altId))
        assertTrue(stringMatch("Grahame Grieve", obj.agent[0].name))
        assertEquals(true, if (obj.agent[0].requestor != null) obj.agent[0].requestor else false, "Field: obj.agent[0].requestor")
        assertTrue(stringMatch("http://dicom.nema.org/resourc", obj.agent[1].role[0].coding[0].system))
        assertTrue(stringMatch("110153", obj.agent[1].role[0].coding[0].code))
        assertTrue(stringMatch("Source Role ID", obj.agent[1].role[0].coding[0].display))
        assertTrue(stringMatch("2.16.840.1.113883.4.2|2.16.84", obj.agent[1].userId!!.value))
        assertTrue(stringMatch("6580", obj.agent[1].altId))
        assertEquals(false, if (obj.agent[1].requestor != null) obj.agent[1].requestor else false, "Field: obj.agent[1].requestor")
        assertTrue(stringMatch("Workstation1.ehr.familyclinic", obj.agent[1].network!!.address))
        assertTrue(stringMatch("1", obj.agent[1].network!!.type))
        assertTrue(stringMatch("Cloud", obj.source.site))
        assertTrue(stringMatch("hl7connect.healthintersection", obj.source.identifier.value))
        assertTrue(stringMatch("http://hl7.org/fhir/security-", obj.source.type[0].system))
        assertTrue(stringMatch("3", obj.source.type[0].code))
        assertTrue(stringMatch("Web Server", obj.source.type[0].display))
        assertTrue(stringMatch("Patient/example/_history/1", obj.entity[0].reference!!.reference))
        assertTrue(stringMatch("http://hl7.org/fhir/object-ty", obj.entity[0].type!!.system))
        assertTrue(stringMatch("2", obj.entity[0].type!!.code))
        assertTrue(stringMatch("System Object", obj.entity[0].type!!.display))
        assertTrue(stringMatch("http://hl7.org/fhir/dicom-aud", obj.entity[0].lifecycle!!.system))
        assertTrue(stringMatch("6", obj.entity[0].lifecycle!!.code))
        assertTrue(stringMatch("Access / Use", obj.entity[0].lifecycle!!.display))
    }

    fun `audit-event-example-vread Init`(obj: Bundle) {
    }

    @Test
    fun `audit-event-example-media 173 Test`() {
        val json = File("./src/test/resources/model/sample_data/audit-event-example-media.json").readTextAndClose()
        val obj = mapper.fromJson(json, AuditEvent::class.java)
        assertTrue(stringMatch("AuditEvent", obj.resourceType))
        assertTrue(stringMatch("example-media", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://dicom.nema.org/resourc", obj.type.system))
        assertTrue(stringMatch("110106", obj.type.code))
        assertTrue(stringMatch("Export", obj.type.display))
        assertTrue(stringMatch("urn:oid:1.3.6.1.4.1.19376.1.2", obj.subtype[0].system))
        assertTrue(stringMatch("ITI-32", obj.subtype[0].code))
        assertTrue(stringMatch("Distribute Document Set on Me", obj.subtype[0].display))
        assertTrue(stringMatch("R", obj.action))
        assertTrue(stringMatch("2015-08-27T23:42:24Z", obj.recorded))
        assertTrue(stringMatch("0", obj.outcome))
        assertTrue(stringMatch("http://dicom.nema.org/resourc", obj.agent[0].role[0].coding[0].system))
        assertTrue(stringMatch("110153", obj.agent[0].role[0].coding[0].code))
        assertTrue(stringMatch("Source Role ID", obj.agent[0].role[0].coding[0].display))
        assertTrue(stringMatch("ExportToMedia.app", obj.agent[0].userId!!.value))
        assertEquals(false, if (obj.agent[0].requestor != null) obj.agent[0].requestor else false, "Field: obj.agent[0].requestor")
        assertTrue(stringMatch("95", obj.agent[1].userId!!.value))
        assertTrue(stringMatch("601847123", obj.agent[1].altId))
        assertTrue(stringMatch("Grahame Grieve", obj.agent[1].name))
        assertEquals(true, if (obj.agent[1].requestor != null) obj.agent[1].requestor else false, "Field: obj.agent[1].requestor")
        assertTrue(stringMatch("Media title: Hello World", obj.agent[2].name))
        assertEquals(false, if (obj.agent[2].requestor != null) obj.agent[2].requestor else false, "Field: obj.agent[2].requestor")
        assertTrue(stringMatch("http://dicom.nema.org/resourc", obj.agent[2].media!!.system))
        assertTrue(stringMatch("110033", obj.agent[2].media!!.code))
        assertTrue(stringMatch("DVD", obj.agent[2].media!!.display))
        assertTrue(stringMatch("hl7connect.healthintersection", obj.source.identifier.value))
        assertTrue(stringMatch("e3cdfc81a0d24bd^^^&2.16.840.1", obj.entity[0].identifier!!.value))
        assertTrue(stringMatch("http://hl7.org/fhir/object-ty", obj.entity[0].type!!.system))
        assertTrue(stringMatch("1", obj.entity[0].type!!.code))
        assertTrue(stringMatch("Person", obj.entity[0].type!!.display))
        assertTrue(stringMatch("http://hl7.org/fhir/object-ro", obj.entity[0].role!!.system))
        assertTrue(stringMatch("1", obj.entity[0].role!!.code))
        assertTrue(stringMatch("Patient", obj.entity[0].role!!.display))
        assertTrue(stringMatch("urn:uuid:a54d6aa5-d40d-43f9-8", obj.entity[1].identifier!!.type!!.coding[0].system))
        assertTrue(stringMatch("IHE XDS Metadata", obj.entity[1].identifier!!.type!!.coding[0].code))
        assertTrue(stringMatch("submission set classification", obj.entity[1].identifier!!.type!!.coding[0].display))
        assertTrue(stringMatch("e3cdfc81a0d24bd^^^&2.16.840.1", obj.entity[1].identifier!!.value))
        assertTrue(stringMatch("http://hl7.org/fhir/object-ty", obj.entity[1].type!!.system))
        assertTrue(stringMatch("2", obj.entity[1].type!!.code))
        assertTrue(stringMatch("System Object", obj.entity[1].type!!.display))
        assertTrue(stringMatch("http://hl7.org/fhir/object-ro", obj.entity[1].role!!.system))
        assertTrue(stringMatch("20", obj.entity[1].role!!.code))
        assertTrue(stringMatch("Job", obj.entity[1].role!!.display))
        assertTrue(stringMatch("DocumentManifest/example", obj.entity[2].reference!!.reference))
        assertTrue(stringMatch("http://hl7.org/fhir/object-ty", obj.entity[2].type!!.system))
        assertTrue(stringMatch("2", obj.entity[2].type!!.code))
        assertTrue(stringMatch("System Object", obj.entity[2].type!!.display))
    }

    fun `audit-event-example-media Init`(obj: Bundle) {
    }

    @Test
    fun `audit-event-example-login 174 Test`() {
        val json = File("./src/test/resources/model/sample_data/audit-event-example-login.json").readTextAndClose()
        val obj = mapper.fromJson(json, AuditEvent::class.java)
        assertTrue(stringMatch("AuditEvent", obj.resourceType))
        assertTrue(stringMatch("example-login", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://dicom.nema.org/resourc", obj.type.system))
        assertTrue(stringMatch("110114", obj.type.code))
        assertTrue(stringMatch("User Authentication", obj.type.display))
        assertTrue(stringMatch("http://dicom.nema.org/resourc", obj.subtype[0].system))
        assertTrue(stringMatch("110122", obj.subtype[0].code))
        assertTrue(stringMatch("Login", obj.subtype[0].display))
        assertTrue(stringMatch("E", obj.action))
        assertTrue(stringMatch("2013-06-20T23:41:23Z", obj.recorded))
        assertTrue(stringMatch("0", obj.outcome))
        assertTrue(stringMatch("95", obj.agent[0].userId!!.value))
        assertTrue(stringMatch("601847123", obj.agent[0].altId))
        assertTrue(stringMatch("Grahame Grieve", obj.agent[0].name))
        assertEquals(true, if (obj.agent[0].requestor != null) obj.agent[0].requestor else false, "Field: obj.agent[0].requestor")
        assertTrue(stringMatch("127.0.0.1", obj.agent[0].network!!.address))
        assertTrue(stringMatch("2", obj.agent[0].network!!.type))
        assertTrue(stringMatch("http://dicom.nema.org/resourc", obj.agent[1].role[0].coding[0].system))
        assertTrue(stringMatch("110153", obj.agent[1].role[0].coding[0].code))
        assertTrue(stringMatch("Source Role ID", obj.agent[1].role[0].coding[0].display))
        assertTrue(stringMatch("2.16.840.1.113883.4.2|2.16.84", obj.agent[1].userId!!.value))
        assertTrue(stringMatch("6580", obj.agent[1].altId))
        assertEquals(false, if (obj.agent[1].requestor != null) obj.agent[1].requestor else false, "Field: obj.agent[1].requestor")
        assertTrue(stringMatch("Workstation1.ehr.familyclinic", obj.agent[1].network!!.address))
        assertTrue(stringMatch("1", obj.agent[1].network!!.type))
        assertTrue(stringMatch("Cloud", obj.source.site))
        assertTrue(stringMatch("hl7connect.healthintersection", obj.source.identifier.value))
        assertTrue(stringMatch("http://hl7.org/fhir/security-", obj.source.type[0].system))
        assertTrue(stringMatch("3", obj.source.type[0].code))
        assertTrue(stringMatch("Web Server", obj.source.type[0].display))
    }

    fun `audit-event-example-login Init`(obj: Bundle) {
    }

    @Test
    fun `audit-event-example-pixQuery 175 Test`() {
        val json = File("./src/test/resources/model/sample_data/audit-event-example-pixQuery.json").readTextAndClose()
        val obj = mapper.fromJson(json, AuditEvent::class.java)
        assertTrue(stringMatch("AuditEvent", obj.resourceType))
        assertTrue(stringMatch("example-pixQuery", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://dicom.nema.org/resourc", obj.type.system))
        assertTrue(stringMatch("110112", obj.type.code))
        assertTrue(stringMatch("Query", obj.type.display))
        assertTrue(stringMatch("urn:oid:1.3.6.1.4.1.19376.1.2", obj.subtype[0].system))
        assertTrue(stringMatch("ITI-9", obj.subtype[0].code))
        assertTrue(stringMatch("PIX Query", obj.subtype[0].display))
        assertTrue(stringMatch("E", obj.action))
        assertTrue(stringMatch("2015-08-26T23:42:24Z", obj.recorded))
        assertTrue(stringMatch("0", obj.outcome))
        assertTrue(stringMatch("http://dicom.nema.org/resourc", obj.agent[0].role[0].coding[0].system))
        assertTrue(stringMatch("110153", obj.agent[0].role[0].coding[0].code))
        assertTrue(stringMatch("Source Role ID", obj.agent[0].role[0].coding[0].display))
        assertTrue(stringMatch("2.16.840.1.113883.4.2|2.16.84", obj.agent[0].userId!!.value))
        assertTrue(stringMatch("6580", obj.agent[0].altId))
        assertEquals(false, if (obj.agent[0].requestor != null) obj.agent[0].requestor else false, "Field: obj.agent[0].requestor")
        assertTrue(stringMatch("Workstation1.ehr.familyclinic", obj.agent[0].network!!.address))
        assertTrue(stringMatch("1", obj.agent[0].network!!.type))
        assertTrue(stringMatch("95", obj.agent[1].userId!!.value))
        assertTrue(stringMatch("601847123", obj.agent[1].altId))
        assertTrue(stringMatch("Grahame Grieve", obj.agent[1].name))
        assertEquals(true, if (obj.agent[1].requestor != null) obj.agent[1].requestor else false, "Field: obj.agent[1].requestor")
        assertTrue(stringMatch("hl7connect.healthintersection", obj.source.identifier.value))
        assertTrue(stringMatch("e3cdfc81a0d24bd^^^&2.16.840.1", obj.entity[0].identifier!!.value))
        assertTrue(stringMatch("http://hl7.org/fhir/object-ty", obj.entity[0].type!!.system))
        assertTrue(stringMatch("1", obj.entity[0].type!!.code))
        assertTrue(stringMatch("Person", obj.entity[0].type!!.display))
        assertTrue(stringMatch("http://hl7.org/fhir/object-ro", obj.entity[0].role!!.system))
        assertTrue(stringMatch("1", obj.entity[0].role!!.code))
        assertTrue(stringMatch("Patient", obj.entity[0].role!!.display))
        assertTrue(stringMatch("http://hl7.org/fhir/object-ty", obj.entity[1].type!!.system))
        assertTrue(stringMatch("2", obj.entity[1].type!!.code))
        assertTrue(stringMatch("System Object", obj.entity[1].type!!.display))
        assertTrue(stringMatch("http://hl7.org/fhir/object-ro", obj.entity[1].role!!.system))
        assertTrue(stringMatch("24", obj.entity[1].role!!.code))
        assertTrue(stringMatch("Query", obj.entity[1].role!!.display))
        assertTrue(stringMatch("PD94bWwgdmVyc2lvbj0iMS4wIiBlb", obj.entity[1].query))
        assertTrue(stringMatch("MSH-10", obj.entity[1].detail[0].type))
        assertTrue(stringMatch("MS4yLjg0MC4xMTQzNTAuMS4xMy4wL", obj.entity[1].detail[0].value))
    }

    fun `audit-event-example-pixQuery Init`(obj: Bundle) {
    }

    @Test
    fun `auditevent-example 176 Test`() {
        val json = File("./src/test/resources/model/sample_data/auditevent-example.json").readTextAndClose()
        val obj = mapper.fromJson(json, AuditEvent::class.java)
        assertTrue(stringMatch("AuditEvent", obj.resourceType))
        assertTrue(stringMatch("example", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://dicom.nema.org/resourc", obj.type.system))
        assertTrue(stringMatch("110100", obj.type.code))
        assertTrue(stringMatch("Application Activity", obj.type.display))
        assertTrue(stringMatch("http://dicom.nema.org/resourc", obj.subtype[0].system))
        assertTrue(stringMatch("110120", obj.subtype[0].code))
        assertTrue(stringMatch("Application Start", obj.subtype[0].display))
        assertTrue(stringMatch("E", obj.action))
        assertTrue(stringMatch("2012-10-25T22:04:27+11:00", obj.recorded))
        assertTrue(stringMatch("0", obj.outcome))
        assertTrue(stringMatch("Service User (Logon)", obj.agent[0].role[0].text))
        assertTrue(stringMatch("Grahame", obj.agent[0].userId!!.value))
        assertEquals(false, if (obj.agent[0].requestor != null) obj.agent[0].requestor else false, "Field: obj.agent[0].requestor")
        assertTrue(stringMatch("127.0.0.1", obj.agent[0].network!!.address))
        assertTrue(stringMatch("2", obj.agent[0].network!!.type))
        assertTrue(stringMatch("http://dicom.nema.org/resourc", obj.agent[1].role[0].coding[0].system))
        assertTrue(stringMatch("110153", obj.agent[1].role[0].coding[0].code))
        assertTrue(stringMatch("Source Role ID", obj.agent[1].role[0].coding[0].display))
        assertTrue(stringMatch("2.16.840.1.113883.4.2|2.16.84", obj.agent[1].userId!!.value))
        assertTrue(stringMatch("6580", obj.agent[1].altId))
        assertEquals(false, if (obj.agent[1].requestor != null) obj.agent[1].requestor else false, "Field: obj.agent[1].requestor")
        assertTrue(stringMatch("Workstation1.ehr.familyclinic", obj.agent[1].network!!.address))
        assertTrue(stringMatch("1", obj.agent[1].network!!.type))
        assertTrue(stringMatch("Development", obj.source.site))
        assertTrue(stringMatch("Grahame's Laptop", obj.source.identifier.value))
        assertTrue(stringMatch("http://dicom.nema.org/resourc", obj.source.type[0].system))
        assertTrue(stringMatch("110122", obj.source.type[0].code))
        assertTrue(stringMatch("Login", obj.source.type[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/identifie", obj.entity[0].identifier!!.type!!.coding[0].system))
        assertTrue(stringMatch("SNO", obj.entity[0].identifier!!.type!!.coding[0].code))
        assertTrue(stringMatch("Dell Serial Number", obj.entity[0].identifier!!.type!!.text))
        assertTrue(stringMatch("ABCDEF", obj.entity[0].identifier!!.value))
        assertTrue(stringMatch("http://hl7.org/fhir/object-ty", obj.entity[0].type!!.system))
        assertTrue(stringMatch("4", obj.entity[0].type!!.code))
        assertTrue(stringMatch("Other", obj.entity[0].type!!.display))
        assertTrue(stringMatch("http://hl7.org/fhir/object-ro", obj.entity[0].role!!.system))
        assertTrue(stringMatch("4", obj.entity[0].role!!.code))
        assertTrue(stringMatch("Domain Resource", obj.entity[0].role!!.display))
        assertTrue(stringMatch("http://hl7.org/fhir/dicom-aud", obj.entity[0].lifecycle!!.system))
        assertTrue(stringMatch("6", obj.entity[0].lifecycle!!.code))
        assertTrue(stringMatch("Access / Use", obj.entity[0].lifecycle!!.display))
        assertTrue(stringMatch("Grahame's Laptop", obj.entity[0].name))
    }

    fun `auditevent-example Init`(obj: Bundle) {
    }

    @Test
    fun `auditevent-example-disclosure 177 Test`() {
        val json = File("./src/test/resources/model/sample_data/auditevent-example-disclosure.json").readTextAndClose()
        val obj = mapper.fromJson(json, AuditEvent::class.java)
        assertTrue(stringMatch("AuditEvent", obj.resourceType))
        assertTrue(stringMatch("example-disclosure", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://dicom.nema.org/resourc", obj.type.system))
        assertTrue(stringMatch("110106", obj.type.code))
        assertTrue(stringMatch("Export", obj.type.display))
        assertTrue(stringMatch("Disclosure", obj.subtype[0].code))
        assertTrue(stringMatch("HIPAA disclosure", obj.subtype[0].display))
        assertTrue(stringMatch("R", obj.action))
        assertTrue(stringMatch("2013-09-22T00:08:00Z", obj.recorded))
        assertTrue(stringMatch("0", obj.outcome))
        assertTrue(stringMatch("Successful  Disclosure", obj.outcomeDesc))
        assertTrue(stringMatch("http://hl7.org/fhir/v3/ActRea", obj.purposeOfEvent[0].coding[0].system))
        assertTrue(stringMatch("HMARKT", obj.purposeOfEvent[0].coding[0].code))
        assertTrue(stringMatch("healthcare marketing", obj.purposeOfEvent[0].coding[0].display))
        assertTrue(stringMatch("http://dicom.nema.org/resourc", obj.agent[0].role[0].coding[0].system))
        assertTrue(stringMatch("110153", obj.agent[0].role[0].coding[0].code))
        assertTrue(stringMatch("Source Role ID", obj.agent[0].role[0].coding[0].display))
        assertTrue(stringMatch("SomeIdiot@nowhere.com", obj.agent[0].userId!!.value))
        assertTrue(stringMatch("notMe", obj.agent[0].altId))
        assertTrue(stringMatch("That guy everyone wishes woul", obj.agent[0].name))
        assertEquals(true, if (obj.agent[0].requestor != null) obj.agent[0].requestor else false, "Field: obj.agent[0].requestor")
        assertTrue(stringMatch("Location/1", obj.agent[0].location!!.reference))
        assertTrue(stringMatch("http://consent.com/yes", obj.agent[0].policy[0]))
        assertTrue(stringMatch("custodian.net", obj.agent[0].network!!.address))
        assertTrue(stringMatch("1", obj.agent[0].network!!.type))
        assertTrue(stringMatch("http://dicom.nema.org/resourc", obj.agent[1].role[0].coding[0].system))
        assertTrue(stringMatch("110152", obj.agent[1].role[0].coding[0].code))
        assertTrue(stringMatch("Destination Role ID", obj.agent[1].role[0].coding[0].display))
        assertTrue(stringMatch("Practitioner/example", obj.agent[1].reference!!.reference))
        assertTrue(stringMatch("Where", obj.agent[1].userId!!.value))
        assertEquals(false, if (obj.agent[1].requestor != null) obj.agent[1].requestor else false, "Field: obj.agent[1].requestor")
        assertTrue(stringMatch("marketing.land", obj.agent[1].network!!.address))
        assertTrue(stringMatch("1", obj.agent[1].network!!.type))
        assertTrue(stringMatch("http://hl7.org/fhir/v3/ActRea", obj.agent[1].purposeOfUse[0].coding[0].system))
        assertTrue(stringMatch("HMARKT", obj.agent[1].purposeOfUse[0].coding[0].code))
        assertTrue(stringMatch("healthcare marketing", obj.agent[1].purposeOfUse[0].coding[0].display))
        assertTrue(stringMatch("Watcher", obj.source.site))
        assertTrue(stringMatch("Watchers Accounting of Disclo", obj.source.identifier.value))
        assertTrue(stringMatch("http://hl7.org/fhir/security-", obj.source.type[0].system))
        assertTrue(stringMatch("4", obj.source.type[0].code))
        assertTrue(stringMatch("Application Server", obj.source.type[0].display))
        assertTrue(stringMatch("Patient/example", obj.entity[0].reference!!.reference))
        assertTrue(stringMatch("http://hl7.org/fhir/object-ty", obj.entity[0].type!!.system))
        assertTrue(stringMatch("1", obj.entity[0].type!!.code))
        assertTrue(stringMatch("Person", obj.entity[0].type!!.display))
        assertTrue(stringMatch("http://hl7.org/fhir/object-ro", obj.entity[0].role!!.system))
        assertTrue(stringMatch("1", obj.entity[0].role!!.code))
        assertTrue(stringMatch("Patient", obj.entity[0].role!!.display))
        assertTrue(stringMatch("What.id", obj.entity[1].identifier!!.value))
        assertTrue(stringMatch("Patient/example/_history/1", obj.entity[1].reference!!.reference))
        assertTrue(stringMatch("http://hl7.org/fhir/object-ty", obj.entity[1].type!!.system))
        assertTrue(stringMatch("2", obj.entity[1].type!!.code))
        assertTrue(stringMatch("System Object", obj.entity[1].type!!.display))
        assertTrue(stringMatch("http://hl7.org/fhir/object-ro", obj.entity[1].role!!.system))
        assertTrue(stringMatch("4", obj.entity[1].role!!.code))
        assertTrue(stringMatch("Domain Resource", obj.entity[1].role!!.display))
        assertTrue(stringMatch("http://hl7.org/fhir/dicom-aud", obj.entity[1].lifecycle!!.system))
        assertTrue(stringMatch("11", obj.entity[1].lifecycle!!.code))
        assertTrue(stringMatch("Disclosure", obj.entity[1].lifecycle!!.display))
        assertTrue(stringMatch("http://hl7.org/fhir/v3/Confid", obj.entity[1].securityLabel[0].system))
        assertTrue(stringMatch("V", obj.entity[1].securityLabel[0].code))
        assertTrue(stringMatch("very restricted", obj.entity[1].securityLabel[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/v3/ActCod", obj.entity[1].securityLabel[1].system))
        assertTrue(stringMatch("STD", obj.entity[1].securityLabel[1].code))
        assertTrue(stringMatch("sexually transmitted disease ", obj.entity[1].securityLabel[1].display))
        assertTrue(stringMatch("http://hl7.org/fhir/v3/ActCod", obj.entity[1].securityLabel[2].system))
        assertTrue(stringMatch("DELAU", obj.entity[1].securityLabel[2].code))
        assertTrue(stringMatch("delete after use", obj.entity[1].securityLabel[2].display))
        assertTrue(stringMatch("Namne of What", obj.entity[1].name))
        assertTrue(stringMatch("data about Everthing importan", obj.entity[1].description))
    }

    fun `auditevent-example-disclosure Init`(obj: Bundle) {
    }
}
