package com.juicelabs.fhir.model

import java.io.File
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.junit.jupiter.api.Test

class TaskDataTest : DataTests() {
    @Test
    fun `task-example6 728 Test`() {
        val json = File("./src/test/resources/model/sample_data/task-example6.json").readTextAndClose()
        val obj = mapper.fromJson(json, Task::class.java)
        assertTrue(stringMatch("Task", obj.resourceType))
        assertTrue(stringMatch("example6", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("official", obj.identifier[0].use))
        assertTrue(stringMatch("http:/goodhealth.org/identifi", obj.identifier[0].system))
        assertTrue(stringMatch("20170201-001", obj.identifier[0].value))
        assertTrue(stringMatch("General Wellness Careplan", obj.basedOn[0].display))
        assertTrue(stringMatch("official", obj.groupIdentifier!!.use))
        assertTrue(stringMatch("http:/goodhealth.org/accessio", obj.groupIdentifier!!.system))
        assertTrue(stringMatch("G20170201-001", obj.groupIdentifier!!.value))
        assertTrue(stringMatch("completed", obj.status))
        assertTrue(stringMatch("test completed and posted", obj.businessStatus!!.text))
        assertTrue(stringMatch("order", obj.intent))
        assertTrue(stringMatch("routine", obj.priority))
        assertTrue(stringMatch("Lipid Panel", obj.code!!.text))
        assertTrue(stringMatch("Create order for getting spec", obj.description))
        assertTrue(stringMatch("ProcedureRequest/lipid", obj.focus!!.reference))
        assertTrue(stringMatch("Lipid Panel Request", obj.focus!!.display))
        assertTrue(stringMatch("Patient/example", obj.for_fhir!!.reference))
        assertTrue(stringMatch("Peter James Chalmers", obj.for_fhir!!.display))
        assertTrue(stringMatch("Encounter/example", obj.context!!.reference))
        assertTrue(stringMatch("Example In-Patient Encounter", obj.context!!.display))
        assertEquals("2016-10-31T08:25:05+10:00", obj.executionPeriod!!.start.toString())
        assertEquals("2016-10-31T18:45:05+10:00", obj.executionPeriod!!.end.toString())
        assertEquals("2016-10-31T08:25:05+10:00", obj.authoredOn.toString())
        assertEquals("2016-10-31T18:45:05+10:00", obj.lastModified.toString())
        assertTrue(stringMatch("Practitioner/example", obj.requester!!.agent.reference))
        assertTrue(stringMatch("Dr Adam Careful", obj.requester!!.agent.display))
        assertTrue(stringMatch("Organization/2.16.840.1.11388", obj.requester!!.onBehalfOf!!.reference))
        assertTrue(stringMatch("Good Health Clinic", obj.requester!!.onBehalfOf!!.display))
        assertTrue(stringMatch("http://hl7.org/fhir/task-perf", obj.performerType[0].coding[0].system))
        assertTrue(stringMatch("performer", obj.performerType[0].coding[0].code))
        assertTrue(stringMatch("Performer", obj.performerType[0].coding[0].display))
        assertTrue(stringMatch("Performer", obj.performerType[0].text))
        assertTrue(stringMatch("Organization/1832473e-2fe0-45", obj.owner!!.reference))
        assertTrue(stringMatch("Clinical Laboratory @ Acme Ho", obj.owner!!.display))
        assertTrue(stringMatch("The Task.reason should only b", obj.reason!!.text))
        assertTrue(stringMatch("This is an example to demonst", obj.note[0].text))
        assertEquals(1, obj.restriction!!.repetitions)
        assertEquals("2016-11-02T09:45:05+10:00", obj.restriction!!.period!!.end.toString())
        assertTrue(stringMatch("DiagnosticReport generated", obj.output[0].type.text))
        assertTrue(stringMatch("DiagnosticReport/lipids", obj.output[0].valueReference.reference))
        assertTrue(stringMatch("collected specimen", obj.output[1].type.text))
        assertTrue(stringMatch("Specimen/101", obj.output[1].valueReference.reference))
    }

    @Test
    fun `task-example1 729 Test`() {
        val json = File("./src/test/resources/model/sample_data/task-example1.json").readTextAndClose()
        val obj = mapper.fromJson(json, Task::class.java)
        assertTrue(stringMatch("Task", obj.resourceType))
        assertTrue(stringMatch("example1", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("Provenance", (obj.contained[0] as Provenance).resourceType))
        assertTrue(stringMatch("signature", (obj.contained[0] as Provenance).id))
        assertTrue(stringMatch("ProcedureRequest/physiotherap", (obj.contained[0] as Provenance).target[0].reference))
    }

    @Test
    fun `task-example1 730 Test`() {
        val json = File("./src/test/resources/model/sample_data/task-example1.json").readTextAndClose()
        val obj = mapper.fromJson(json, Task::class.java)
        assertEquals("2016-10-31T08:25:05+10:00", (obj.contained[0] as Provenance).recorded.toString())
        assertTrue(stringMatch("http://hl7.org/fhir/v3/Partic", (obj.contained[0] as Provenance).agent[0].role[0].coding[0].system))
        assertTrue(stringMatch("AUT", (obj.contained[0] as Provenance).agent[0].role[0].coding[0].code))
        assertTrue(stringMatch("Practitioner/f202", (obj.contained[0] as Provenance).agent[0].whoReference.reference))
        assertTrue(stringMatch("Luigi Maas", (obj.contained[0] as Provenance).agent[0].whoReference.display))
        assertTrue(stringMatch("urn:iso-astm:E1762-95:2013", (obj.contained[0] as Provenance).signature[0].type[0].system))
        assertTrue(stringMatch("1.2.840.10065.1.12.1.1", (obj.contained[0] as Provenance).signature[0].type[0].code))
        assertTrue(stringMatch("Author's Signature", (obj.contained[0] as Provenance).signature[0].type[0].display))
        assertEquals("2016-10-31T08:25:05+10:00", (obj.contained[0] as Provenance).signature[0].when_fhir.toString())
        assertTrue(stringMatch("Practitioner/example", (obj.contained[0] as Provenance).signature[0].whoReference.reference))
        assertTrue(stringMatch("Dr Adam Careful", (obj.contained[0] as Provenance).signature[0].whoReference.display))
        assertTrue(stringMatch("application/signature+xml", (obj.contained[0] as Provenance).signature[0].contentType))
        assertTrue(stringMatch("dGhpcyBibG9iIGlzIHNuaXBwZWQ=", (obj.contained[0] as Provenance).signature[0].blob))
        assertTrue(stringMatch("official", obj.identifier[0].use))
        assertTrue(stringMatch("http:/goodhealth.org/identifi", obj.identifier[0].system))
        assertTrue(stringMatch("20170201-001", obj.identifier[0].value))
        assertTrue(stringMatch("General Wellness Careplan", obj.basedOn[0].display))
        assertTrue(stringMatch("official", obj.groupIdentifier!!.use))
        assertTrue(stringMatch("http:/goodhealth.org/accessio", obj.groupIdentifier!!.system))
        assertTrue(stringMatch("G20170201-001", obj.groupIdentifier!!.value))
        assertTrue(stringMatch("in-progress", obj.status))
        assertTrue(stringMatch("waiting for specimen", obj.businessStatus!!.text))
        assertTrue(stringMatch("order", obj.intent))
        assertTrue(stringMatch("routine", obj.priority))
        assertTrue(stringMatch("Lipid Panel", obj.code!!.text))
        assertTrue(stringMatch("Create order for getting spec", obj.description))
        assertTrue(stringMatch("ProcedureRequest/lipid", obj.focus!!.reference))
        assertTrue(stringMatch("Lipid Panel Request", obj.focus!!.display))
        assertTrue(stringMatch("Patient/example", obj.for_fhir!!.reference))
        assertTrue(stringMatch("Peter James Chalmers", obj.for_fhir!!.display))
        assertTrue(stringMatch("Encounter/example", obj.context!!.reference))
        assertTrue(stringMatch("Example In-Patient Encounter", obj.context!!.display))
        assertEquals("2016-10-31T08:25:05+10:00", obj.executionPeriod!!.start.toString())
        assertEquals("2016-10-31T08:25:05+10:00", obj.authoredOn.toString())
        assertEquals("2016-10-31T09:45:05+10:00", obj.lastModified.toString())
        assertTrue(stringMatch("Practitioner/example", obj.requester!!.agent.reference))
        assertTrue(stringMatch("Dr Adam Careful", obj.requester!!.agent.display))
        assertTrue(stringMatch("Organization/2.16.840.1.11388", obj.requester!!.onBehalfOf!!.reference))
        assertTrue(stringMatch("Good Health Clinic", obj.requester!!.onBehalfOf!!.display))
        assertTrue(stringMatch("http://hl7.org/fhir/task-perf", obj.performerType[0].coding[0].system))
        assertTrue(stringMatch("performer", obj.performerType[0].coding[0].code))
        assertTrue(stringMatch("Performer", obj.performerType[0].coding[0].display))
        assertTrue(stringMatch("Performer", obj.performerType[0].text))
        assertTrue(stringMatch("Organization/1832473e-2fe0-45", obj.owner!!.reference))
        assertTrue(stringMatch("Clinical Laboratory @ Acme Ho", obj.owner!!.display))
        assertTrue(stringMatch("The Task.reason should only b", obj.reason!!.text))
        assertTrue(stringMatch("This is an example to demonst", obj.note[0].text))
        assertTrue(stringMatch("#signature", obj.relevantHistory[0].reference))
        assertTrue(stringMatch("Author's Signature", obj.relevantHistory[0].display))
        assertEquals(1, obj.restriction!!.repetitions)
        assertEquals("2016-11-02T09:45:05+10:00", obj.restriction!!.period!!.end.toString())
    }

    @Test
    fun `task-example3 731 Test`() {
        val json = File("./src/test/resources/model/sample_data/task-example3.json").readTextAndClose()
        val obj = mapper.fromJson(json, Task::class.java)
        assertTrue(stringMatch("Task", obj.resourceType))
        assertTrue(stringMatch("example3", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("draft", obj.status))
        assertTrue(stringMatch("order", obj.intent))
        assertTrue(stringMatch("Refill Request", obj.code!!.text))
        assertTrue(stringMatch("MedicationRequest/medrx002", obj.focus!!.reference))
        assertTrue(stringMatch("Patient/f001", obj.for_fhir!!.reference))
        assertEquals("2016-03-10T22:39:32-04:00", obj.authoredOn.toString())
        assertEquals("2016-03-10T22:39:32-04:00", obj.lastModified.toString())
        assertTrue(stringMatch("Patient/example", obj.requester!!.agent.reference))
        assertTrue(stringMatch("Practitioner/example", obj.owner!!.reference))
    }

    @Test
    fun `task-example2 732 Test`() {
        val json = File("./src/test/resources/model/sample_data/task-example2.json").readTextAndClose()
        val obj = mapper.fromJson(json, Task::class.java)
        assertTrue(stringMatch("Task", obj.resourceType))
        assertTrue(stringMatch("example2", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("official", obj.identifier[0].use))
        assertTrue(stringMatch("http:/goodhealth.org/identifi", obj.identifier[0].system))
        assertTrue(stringMatch("20170201-002", obj.identifier[0].value))
    }

    @Test
    fun `task-example2 733 Test`() {
        val json = File("./src/test/resources/model/sample_data/task-example2.json").readTextAndClose()
        val obj = mapper.fromJson(json, Task::class.java)
        assertTrue(stringMatch("official", obj.groupIdentifier!!.use))
        assertTrue(stringMatch("http:/goodhealth.org/accessio", obj.groupIdentifier!!.system))
        assertTrue(stringMatch("G20170201-001", obj.groupIdentifier!!.value))
        assertTrue(stringMatch("Task/example1", obj.partOf[0].reference))
        assertTrue(stringMatch("Lipid Panel", obj.partOf[0].display))
        assertTrue(stringMatch("accepted", obj.status))
        assertTrue(stringMatch("waiting for patient", obj.businessStatus!!.text))
        assertTrue(stringMatch("filler-order", obj.intent))
        assertTrue(stringMatch("routine", obj.priority))
        assertTrue(stringMatch("Specimen Collection", obj.code!!.text))
        assertTrue(stringMatch("BloodDraw ProcedureRequest", obj.focus!!.display))
        assertTrue(stringMatch("Patient/example", obj.for_fhir!!.reference))
        assertTrue(stringMatch("Peter James Chalmers", obj.for_fhir!!.display))
        assertTrue(stringMatch("Encounter/example", obj.context!!.reference))
        assertTrue(stringMatch("Example In-Patient Encounter", obj.context!!.display))
        assertEquals("2016-10-31T08:45:05+10:00", obj.executionPeriod!!.start.toString())
        assertEquals("2016-10-31T08:45:05+10:00", obj.authoredOn.toString())
        assertEquals("2016-10-31T09:45:05+10:00", obj.lastModified.toString())
        assertTrue(stringMatch("Organization/1832473e-2fe0-45", obj.requester!!.agent.reference))
        assertTrue(stringMatch("Clinical Laboratory @ Acme Ho", obj.requester!!.agent.display))
        assertTrue(stringMatch("http://hl7.org/fhir/task-perf", obj.performerType[0].coding[0].system))
        assertTrue(stringMatch("performer", obj.performerType[0].coding[0].code))
        assertTrue(stringMatch("Performer", obj.performerType[0].coding[0].display))
        assertTrue(stringMatch("Performer", obj.performerType[0].text))
        assertTrue(stringMatch("Organization/1832473e-2fe0-45", obj.owner!!.reference))
        assertTrue(stringMatch("Clinical Laboratory @ Acme Ho", obj.owner!!.display))
        assertEquals(1, obj.restriction!!.repetitions)
        assertEquals("2016-11-01T09:45:05+10:00", obj.restriction!!.period!!.end.toString())
    }

    @Test
    fun `task-example5 734 Test`() {
        val json = File("./src/test/resources/model/sample_data/task-example5.json").readTextAndClose()
        val obj = mapper.fromJson(json, Task::class.java)
        assertTrue(stringMatch("Task", obj.resourceType))
        assertTrue(stringMatch("example5", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("official", obj.identifier[0].use))
        assertTrue(stringMatch("http:/goodhealth.org/identifi", obj.identifier[0].system))
        assertTrue(stringMatch("20170201-001", obj.identifier[0].value))
        assertTrue(stringMatch("General Wellness Careplan", obj.basedOn[0].display))
        assertTrue(stringMatch("official", obj.groupIdentifier!!.use))
        assertTrue(stringMatch("http:/goodhealth.org/accessio", obj.groupIdentifier!!.system))
        assertTrue(stringMatch("G20170201-001", obj.groupIdentifier!!.value))
        assertTrue(stringMatch("in-progress", obj.status))
        assertTrue(stringMatch("specimen received, test in pr", obj.businessStatus!!.text))
        assertTrue(stringMatch("order", obj.intent))
        assertTrue(stringMatch("routine", obj.priority))
        assertTrue(stringMatch("Lipid Panel", obj.code!!.text))
        assertTrue(stringMatch("Create order for getting spec", obj.description))
        assertTrue(stringMatch("ProcedureRequest/lipid", obj.focus!!.reference))
        assertTrue(stringMatch("Lipid Panel Request", obj.focus!!.display))
        assertTrue(stringMatch("Patient/example", obj.for_fhir!!.reference))
        assertTrue(stringMatch("Peter James Chalmers", obj.for_fhir!!.display))
        assertTrue(stringMatch("Encounter/example", obj.context!!.reference))
        assertTrue(stringMatch("Example In-Patient Encounter", obj.context!!.display))
        assertEquals("2016-10-31T08:25:05+10:00", obj.executionPeriod!!.start.toString())
        assertEquals("2016-10-31T08:25:05+10:00", obj.authoredOn.toString())
        assertEquals("2016-10-31T16:45:05+10:00", obj.lastModified.toString())
        assertTrue(stringMatch("Practitioner/example", obj.requester!!.agent.reference))
        assertTrue(stringMatch("Dr Adam Careful", obj.requester!!.agent.display))
        assertTrue(stringMatch("Organization/2.16.840.1.11388", obj.requester!!.onBehalfOf!!.reference))
        assertTrue(stringMatch("Good Health Clinic", obj.requester!!.onBehalfOf!!.display))
        assertTrue(stringMatch("http://hl7.org/fhir/task-perf", obj.performerType[0].coding[0].system))
        assertTrue(stringMatch("performer", obj.performerType[0].coding[0].code))
        assertTrue(stringMatch("Performer", obj.performerType[0].coding[0].display))
        assertTrue(stringMatch("Performer", obj.performerType[0].text))
        assertTrue(stringMatch("Organization/1832473e-2fe0-45", obj.owner!!.reference))
        assertTrue(stringMatch("Clinical Laboratory @ Acme Ho", obj.owner!!.display))
        assertTrue(stringMatch("The Task.reason should only b", obj.reason!!.text))
        assertTrue(stringMatch("This is an example to demonst", obj.note[0].text))
        assertEquals(1, obj.restriction!!.repetitions)
        assertEquals("2016-11-02T09:45:05+10:00", obj.restriction!!.period!!.end.toString())
        assertTrue(stringMatch("collected specimen", obj.output[0].type.text))
        assertTrue(stringMatch("Specimen/101", obj.output[0].valueReference.reference))
    }

    @Test
    fun `task-example4 735 Test`() {
        val json = File("./src/test/resources/model/sample_data/task-example4.json").readTextAndClose()
        val obj = mapper.fromJson(json, Task::class.java)
        assertTrue(stringMatch("Task", obj.resourceType))
    }

    @Test
    fun `task-example4 736 Test`() {
        val json = File("./src/test/resources/model/sample_data/task-example4.json").readTextAndClose()
        val obj = mapper.fromJson(json, Task::class.java)
        assertTrue(stringMatch("example4", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("official", obj.identifier[0].use))
        assertTrue(stringMatch("http:/goodhealth.org/identifi", obj.identifier[0].system))
        assertTrue(stringMatch("20170201-002", obj.identifier[0].value))
        assertTrue(stringMatch("official", obj.groupIdentifier!!.use))
        assertTrue(stringMatch("http:/goodhealth.org/accessio", obj.groupIdentifier!!.system))
        assertTrue(stringMatch("G20170201-001", obj.groupIdentifier!!.value))
        assertTrue(stringMatch("Task/example1", obj.partOf[0].reference))
        assertTrue(stringMatch("Lipid Panel", obj.partOf[0].display))
        assertTrue(stringMatch("completed", obj.status))
        assertTrue(stringMatch("filler-order", obj.intent))
        assertTrue(stringMatch("routine", obj.priority))
        assertTrue(stringMatch("Specimen Collection", obj.code!!.text))
        assertTrue(stringMatch("BloodDraw ProcedureRequest", obj.focus!!.display))
        assertTrue(stringMatch("Patient/example", obj.for_fhir!!.reference))
        assertTrue(stringMatch("Peter James Chalmers", obj.for_fhir!!.display))
        assertTrue(stringMatch("Encounter/example", obj.context!!.reference))
        assertTrue(stringMatch("Example In-Patient Encounter", obj.context!!.display))
        assertEquals("2016-10-31T08:45:05+10:00", obj.executionPeriod!!.start.toString())
        assertEquals("2016-10-31T14:45:05+10:00", obj.executionPeriod!!.end.toString())
        assertEquals("2016-10-31T08:45:05+10:00", obj.authoredOn.toString())
        assertEquals("2016-10-31T09:45:05+10:00", obj.lastModified.toString())
        assertTrue(stringMatch("Organization/1832473e-2fe0-45", obj.requester!!.agent.reference))
        assertTrue(stringMatch("Clinical Laboratory @ Acme Ho", obj.requester!!.agent.display))
        assertTrue(stringMatch("http://hl7.org/fhir/task-perf", obj.performerType[0].coding[0].system))
        assertTrue(stringMatch("performer", obj.performerType[0].coding[0].code))
        assertTrue(stringMatch("Performer", obj.performerType[0].coding[0].display))
        assertTrue(stringMatch("Performer", obj.performerType[0].text))
        assertTrue(stringMatch("Practitioner/f202", obj.owner!!.reference))
        assertTrue(stringMatch("Luigi Maas", obj.owner!!.display))
        assertEquals(1, obj.restriction!!.repetitions)
        assertEquals("2016-11-01T09:45:05+10:00", obj.restriction!!.period!!.end.toString())
        assertTrue(stringMatch("collected specimen", obj.output[0].type.text))
        assertTrue(stringMatch("Specimen/101", obj.output[0].valueReference.reference))
    }
}
