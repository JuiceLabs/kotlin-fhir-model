package com.juicelabs.fhir.model

import java.io.File
import java.lang.SuppressWarnings
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.junit.jupiter.api.Test

class ObservationDataTest : DataTests() {
    @Test
    fun `observation-example-genetics-1 6 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-genetics-1.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("Observation", obj.resourceType))
        assertTrue(stringMatch("example-genetics-1", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.extension[0].url))
        assertTrue(stringMatch("NG_007726.3:g.146252T>G", obj.extension[0].valueCodeableConcept!!.text))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.extension[1].url))
        assertTrue(stringMatch("http://www.genenames.org", obj.extension[1].valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("3236", obj.extension[1].valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("EGFR", obj.extension[1].valueCodeableConcept!!.coding[0].display))
    }

    @Test
    fun `observation-example-genetics-1 7 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-genetics-1.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.extension[2].url))
        assertTrue(stringMatch("Exon 21", obj.extension[2].valueString))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.extension[3].url))
        assertTrue(stringMatch("http://loinc.org", obj.extension[3].valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("LA6684-0", obj.extension[3].valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("somatic", obj.extension[3].valueCodeableConcept!!.coding[0].display))
        assertTrue(stringMatch("final", obj.status))
        assertTrue(stringMatch("http://loinc.org", obj.code.coding[0].system))
        assertTrue(stringMatch("55233-1", obj.code.coding[0].code))
        assertTrue(stringMatch("Genetic analysis master panel", obj.code.coding[0].display))
        assertTrue(stringMatch("Patient/example", obj.subject!!.reference))
        assertTrue(stringMatch("Molecular Lab Patient ID: HOS", obj.subject!!.display))
        assertTrue(stringMatch("2013-04-03T15:30:10+01:00", obj.issued))
        assertTrue(stringMatch("Practitioner/example", obj.performer[0].reference))
        assertTrue(stringMatch("Molecular Diagnostics Laborat", obj.performer[0].display))
        assertTrue(stringMatch("http://snomed.info/sct", obj.valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("10828004", obj.valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("Positive", obj.valueCodeableConcept!!.coding[0].display))
        assertTrue(stringMatch("Specimen/genetics-example1-so", obj.specimen!!.reference))
        assertTrue(stringMatch("Molecular Specimen ID: MLD45-", obj.specimen!!.display))
    }

    fun `observation-example-genetics-1 Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `observation-example-bmd 8 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-bmd.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("Observation", obj.resourceType))
        assertTrue(stringMatch("bmd", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("final", obj.status))
        assertTrue(stringMatch("http://loinc.org", obj.code.coding[0].system))
        assertTrue(stringMatch("24701-5", obj.code.coding[0].code))
        assertTrue(stringMatch("Femur DXA Bone density", obj.code.coding[0].display))
        assertTrue(stringMatch("BMD - Left Femur", obj.code.text))
        assertTrue(stringMatch("Patient/pat2", obj.subject!!.reference))
        assertTrue(stringMatch("Organization/1832473e-2fe0-45", obj.performer[0].reference))
        assertTrue(stringMatch("Acme Imaging Diagnostics", obj.performer[0].display))
        assertTrue(stringMatch("%.2f".format(0.887f), "%.2f".format(obj.valueQuantity!!.value)))
        assertTrue(stringMatch("g/cmÂ²", obj.valueQuantity!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.valueQuantity!!.system))
        assertTrue(stringMatch("g/cm-2", obj.valueQuantity!!.code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.bodySite!!.coding[0].system))
        assertTrue(stringMatch("71341001:272741003=7771000", obj.bodySite!!.coding[0].code))
        assertTrue(stringMatch("Left Femur", obj.bodySite!!.text))
    }

    fun `observation-example-bmd Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `observation-example-respiratory-rate 9 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-respiratory-rate.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("Observation", obj.resourceType))
        assertTrue(stringMatch("respiratory-rate", obj.id))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.meta!!.profile[0]))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("final", obj.status))
        assertTrue(stringMatch("http://hl7.org/fhir/observati", obj.category[0].coding[0].system))
        assertTrue(stringMatch("vital-signs", obj.category[0].coding[0].code))
        assertTrue(stringMatch("Vital Signs", obj.category[0].coding[0].display))
        assertTrue(stringMatch("Vital Signs", obj.category[0].text))
        assertTrue(stringMatch("http://loinc.org", obj.code.coding[0].system))
        assertTrue(stringMatch("9279-1", obj.code.coding[0].code))
        assertTrue(stringMatch("Respiratory rate", obj.code.coding[0].display))
        assertTrue(stringMatch("Respiratory rate", obj.code.text))
        assertTrue(stringMatch("Patient/example", obj.subject!!.reference))
        assertTrue(stringMatch("1999-07-02", obj.effectiveDateTime))
        assertTrue(stringMatch("%.2f".format(26f), "%.2f".format(obj.valueQuantity!!.value)))
        assertTrue(stringMatch("breaths/minute", obj.valueQuantity!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.valueQuantity!!.system))
        assertTrue(stringMatch("/min", obj.valueQuantity!!.code))
    }

    fun `observation-example-respiratory-rate Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `observation-example 10 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("Observation", obj.resourceType))
        assertTrue(stringMatch("example", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("final", obj.status))
        assertTrue(stringMatch("http://hl7.org/fhir/observati", obj.category[0].coding[0].system))
        assertTrue(stringMatch("vital-signs", obj.category[0].coding[0].code))
        assertTrue(stringMatch("Vital Signs", obj.category[0].coding[0].display))
        assertTrue(stringMatch("http://loinc.org", obj.code.coding[0].system))
        assertTrue(stringMatch("29463-7", obj.code.coding[0].code))
        assertTrue(stringMatch("Body Weight", obj.code.coding[0].display))
        assertTrue(stringMatch("http://loinc.org", obj.code.coding[1].system))
        assertTrue(stringMatch("3141-9", obj.code.coding[1].code))
        assertTrue(stringMatch("Body weight Measured", obj.code.coding[1].display))
        assertTrue(stringMatch("http://snomed.info/sct", obj.code.coding[2].system))
        assertTrue(stringMatch("27113001", obj.code.coding[2].code))
        assertTrue(stringMatch("Body weight", obj.code.coding[2].display))
        assertTrue(stringMatch("http://acme.org/devices/clini", obj.code.coding[3].system))
        assertTrue(stringMatch("body-weight", obj.code.coding[3].code))
        assertTrue(stringMatch("Body Weight", obj.code.coding[3].display))
        assertTrue(stringMatch("Patient/example", obj.subject!!.reference))
        assertTrue(stringMatch("Encounter/example", obj.context!!.reference))
        assertTrue(stringMatch("2016-03-28", obj.effectiveDateTime))
        assertTrue(stringMatch("%.2f".format(185f), "%.2f".format(obj.valueQuantity!!.value)))
        assertTrue(stringMatch("lbs", obj.valueQuantity!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.valueQuantity!!.system))
        assertTrue(stringMatch("[lb_av]", obj.valueQuantity!!.code))
    }

    fun `observation-example Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `observation-example-haplotype2 11 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-haplotype2.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("Observation", obj.resourceType))
        assertTrue(stringMatch("example-haplotype2", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.extension[0].url))
        assertTrue(stringMatch("http://www.genenames.org", obj.extension[0].valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("2623", obj.extension[0].valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("CYP2C9", obj.extension[0].valueCodeableConcept!!.coding[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.extension[1].url))
        assertTrue(stringMatch("Sequence/example-sequence1", obj.extension[1].valueReference!!.reference))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.extension[2].url))
        assertTrue(stringMatch("Sequence/example-sequence2", obj.extension[2].valueReference!!.reference))
        assertTrue(stringMatch("unknown", obj.status))
        assertTrue(stringMatch("http://loinc.org", obj.code.coding[0].system))
        assertTrue(stringMatch("55233-1", obj.code.coding[0].code))
        assertTrue(stringMatch("Genetic analysis master panel", obj.code.coding[0].display))
        assertTrue(stringMatch("Patient/727127", obj.subject!!.reference))
        assertTrue(stringMatch("J*********** C***********", obj.subject!!.display))
        assertTrue(stringMatch("2013-04-03T15:30:10+01:00", obj.issued))
        assertTrue(stringMatch("http://pharmakb.org", obj.valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("PA16581679", obj.valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("*4", obj.valueCodeableConcept!!.coding[0].display))
        assertTrue(stringMatch("Specimen/genetics-example1-so", obj.specimen!!.reference))
        assertTrue(stringMatch("Molecular Specimen ID: MLD45-", obj.specimen!!.display))
        assertTrue(stringMatch("derived-from", obj.related[0].type))
        assertTrue(stringMatch("Sequence/example-pgx-1", obj.related[0].target.reference))
        assertTrue(stringMatch("derived-from", obj.related[1].type))
        assertTrue(stringMatch("Sequence/example-pgx-2", obj.related[1].target.reference))
    }

    fun `observation-example-haplotype2 Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `observation-example-mbp 12 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-mbp.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("Observation", obj.resourceType))
        assertTrue(stringMatch("mbp", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("final", obj.status))
        assertTrue(stringMatch("http://hl7.org/fhir/observati", obj.category[0].coding[0].system))
        assertTrue(stringMatch("vital-signs", obj.category[0].coding[0].code))
        assertTrue(stringMatch("Vital Signs", obj.category[0].coding[0].display))
        assertTrue(stringMatch("Vital Signs", obj.category[0].text))
        assertTrue(stringMatch("http://loinc.org", obj.code.coding[0].system))
        assertTrue(stringMatch("8478-0", obj.code.coding[0].code))
        assertTrue(stringMatch("Mean blood pressure", obj.code.coding[0].display))
        assertTrue(stringMatch("Mean blood pressure", obj.code.text))
        assertTrue(stringMatch("Patient/example", obj.subject!!.reference))
        assertTrue(stringMatch("1999-07-02", obj.effectiveDateTime))
        assertTrue(stringMatch("%.2f".format(80f), "%.2f".format(obj.valueQuantity!!.value)))
        assertTrue(stringMatch("mm[Hg]", obj.valueQuantity!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.valueQuantity!!.system))
        assertTrue(stringMatch("mm[Hg]", obj.valueQuantity!!.code))
    }

    fun `observation-example-mbp Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `observation-example-bmi 13 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-bmi.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("Observation", obj.resourceType))
        assertTrue(stringMatch("bmi", obj.id))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.meta!!.profile[0]))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("final", obj.status))
        assertTrue(stringMatch("http://hl7.org/fhir/observati", obj.category[0].coding[0].system))
        assertTrue(stringMatch("vital-signs", obj.category[0].coding[0].code))
        assertTrue(stringMatch("Vital Signs", obj.category[0].coding[0].display))
        assertTrue(stringMatch("Vital Signs", obj.category[0].text))
        assertTrue(stringMatch("http://loinc.org", obj.code.coding[0].system))
        assertTrue(stringMatch("39156-5", obj.code.coding[0].code))
        assertTrue(stringMatch("Body mass index (BMI) [Ratio]", obj.code.coding[0].display))
        assertTrue(stringMatch("BMI", obj.code.text))
        assertTrue(stringMatch("Patient/example", obj.subject!!.reference))
        assertTrue(stringMatch("1999-07-02", obj.effectiveDateTime))
        assertTrue(stringMatch("%.2f".format(16.2f), "%.2f".format(obj.valueQuantity!!.value)))
        assertTrue(stringMatch("kg/m2", obj.valueQuantity!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.valueQuantity!!.system))
        assertTrue(stringMatch("kg/m2", obj.valueQuantity!!.code))
    }

    fun `observation-example-bmi Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `observation-example-body-height 14 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-body-height.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("Observation", obj.resourceType))
        assertTrue(stringMatch("body-height", obj.id))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.meta!!.profile[0]))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("final", obj.status))
        assertTrue(stringMatch("http://hl7.org/fhir/observati", obj.category[0].coding[0].system))
        assertTrue(stringMatch("vital-signs", obj.category[0].coding[0].code))
        assertTrue(stringMatch("Vital Signs", obj.category[0].coding[0].display))
        assertTrue(stringMatch("Vital Signs", obj.category[0].text))
        assertTrue(stringMatch("http://loinc.org", obj.code.coding[0].system))
        assertTrue(stringMatch("8302-2", obj.code.coding[0].code))
        assertTrue(stringMatch("Body height", obj.code.coding[0].display))
        assertTrue(stringMatch("Body height", obj.code.text))
        assertTrue(stringMatch("Patient/example", obj.subject!!.reference))
        assertTrue(stringMatch("1999-07-02", obj.effectiveDateTime))
        assertTrue(stringMatch("%.2f".format(66.899999999999991f), "%.2f".format(obj.valueQuantity!!.value)))
        assertTrue(stringMatch("in", obj.valueQuantity!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.valueQuantity!!.system))
        assertTrue(stringMatch("[in_i]", obj.valueQuantity!!.code))
    }

    fun `observation-example-body-height Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `observation-example-eye-color 15 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-eye-color.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("Observation", obj.resourceType))
        assertTrue(stringMatch("eye-color", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("final", obj.status))
        assertTrue(stringMatch("eye color", obj.code.text))
        assertTrue(stringMatch("Patient/example", obj.subject!!.reference))
        assertTrue(stringMatch("2016-05-18", obj.effectiveDateTime))
        assertTrue(stringMatch("blue", obj.valueString))
    }

    fun `observation-example-eye-color Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `observation-example-body-temperature 16 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-body-temperature.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("Observation", obj.resourceType))
        assertTrue(stringMatch("body-temperature", obj.id))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.meta!!.profile[0]))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("final", obj.status))
        assertTrue(stringMatch("http://hl7.org/fhir/observati", obj.category[0].coding[0].system))
        assertTrue(stringMatch("vital-signs", obj.category[0].coding[0].code))
        assertTrue(stringMatch("Vital Signs", obj.category[0].coding[0].display))
        assertTrue(stringMatch("Vital Signs", obj.category[0].text))
        assertTrue(stringMatch("http://loinc.org", obj.code.coding[0].system))
        assertTrue(stringMatch("8310-5", obj.code.coding[0].code))
        assertTrue(stringMatch("Body temperature", obj.code.coding[0].display))
        assertTrue(stringMatch("Body temperature", obj.code.text))
        assertTrue(stringMatch("Patient/example", obj.subject!!.reference))
        assertTrue(stringMatch("1999-07-02", obj.effectiveDateTime))
        assertTrue(stringMatch("%.2f".format(36.5f), "%.2f".format(obj.valueQuantity!!.value)))
        assertTrue(stringMatch("C", obj.valueQuantity!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.valueQuantity!!.system))
        assertTrue(stringMatch("Cel", obj.valueQuantity!!.code))
    }

    fun `observation-example-body-temperature Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `observation-example-TPMT-diplotype 17 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-TPMT-diplotype.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("Observation", obj.resourceType))
        assertTrue(stringMatch("example-TPMT-diplotype", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.extension[0].url))
        assertTrue(stringMatch("http://www.genenames.org", obj.extension[0].valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("12014", obj.extension[0].valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("TPMT", obj.extension[0].valueCodeableConcept!!.coding[0].display))
        assertTrue(stringMatch("final", obj.status))
        assertTrue(stringMatch("http://snomed.info", obj.code.coding[0].system))
        assertTrue(stringMatch("363779003", obj.code.coding[0].code))
        assertTrue(stringMatch("Genotype determination", obj.code.coding[0].display))
        assertTrue(stringMatch("Diplotype Call", obj.code.text))
        assertTrue(stringMatch("Patient/example", obj.subject!!.reference))
        assertTrue(stringMatch("E***********", obj.subject!!.display))
        assertTrue(stringMatch("2013-04-03T15:30:10+01:00", obj.issued))
        assertTrue(stringMatch("*1/*4", obj.valueString))
        assertTrue(stringMatch("derived-from", obj.related[0].type))
        assertTrue(stringMatch("Observation/example-TPMT-hapl", obj.related[0].target.reference))
        assertTrue(stringMatch("derived-from", obj.related[1].type))
        assertTrue(stringMatch("Observation/example-TPMT-hapl", obj.related[1].target.reference))
    }

    fun `observation-example-TPMT-diplotype Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `observation-example-f002-excess 18 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-f002-excess.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("Observation", obj.resourceType))
        assertTrue(stringMatch("f002", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("official", obj.identifier[0].use))
        assertTrue(stringMatch("http://www.bmc.nl/zorgportal/", obj.identifier[0].system))
        assertTrue(stringMatch("6324", obj.identifier[0].value))
        assertTrue(stringMatch("final", obj.status))
        assertTrue(stringMatch("http://loinc.org", obj.code.coding[0].system))
        assertTrue(stringMatch("11555-0", obj.code.coding[0].code))
        assertTrue(stringMatch("Base excess in Blood by calcu", obj.code.coding[0].display))
        assertTrue(stringMatch("Patient/f001", obj.subject!!.reference))
        assertTrue(stringMatch("P. van de Heuvel", obj.subject!!.display))
        assertTrue(stringMatch("2013-04-02T10:30:10+01:00", obj.effectivePeriod!!.start))
        assertTrue(stringMatch("2013-04-05T10:30:10+01:00", obj.effectivePeriod!!.end))
        assertTrue(stringMatch("2013-04-03T15:30:10+01:00", obj.issued))
        assertTrue(stringMatch("Practitioner/f005", obj.performer[0].reference))
        assertTrue(stringMatch("A. Langeveld", obj.performer[0].display))
        assertTrue(stringMatch("%.2f".format(12.6f), "%.2f".format(obj.valueQuantity!!.value)))
        assertTrue(stringMatch("mmol/l", obj.valueQuantity!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.valueQuantity!!.system))
        assertTrue(stringMatch("mmol/L", obj.valueQuantity!!.code))
        assertTrue(stringMatch("http://hl7.org/fhir/v2/0078", obj.interpretation!!.coding[0].system))
        assertTrue(stringMatch("H", obj.interpretation!!.coding[0].code))
        assertTrue(stringMatch("High", obj.interpretation!!.coding[0].display))
        assertTrue(stringMatch("%.2f".format(7.1f), "%.2f".format(obj.referenceRange[0].low!!.value)))
        assertTrue(stringMatch("mmol/l", obj.referenceRange[0].low!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.referenceRange[0].low!!.system))
        assertTrue(stringMatch("mmol/L", obj.referenceRange[0].low!!.code))
        assertTrue(stringMatch("%.2f".format(11.2f), "%.2f".format(obj.referenceRange[0].high!!.value)))
        assertTrue(stringMatch("mmol/l", obj.referenceRange[0].high!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.referenceRange[0].high!!.system))
        assertTrue(stringMatch("mmol/L", obj.referenceRange[0].high!!.code))
    }

    fun `observation-example-f002-excess Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `observation-example-vitals-panel 19 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-vitals-panel.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("Observation", obj.resourceType))
        assertTrue(stringMatch("vitals-panel", obj.id))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.meta!!.profile[0]))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("final", obj.status))
        assertTrue(stringMatch("http://hl7.org/fhir/observati", obj.category[0].coding[0].system))
        assertTrue(stringMatch("vital-signs", obj.category[0].coding[0].code))
        assertTrue(stringMatch("Vital Signs", obj.category[0].coding[0].display))
        assertTrue(stringMatch("Vital Signs", obj.category[0].text))
        assertTrue(stringMatch("http://loinc.org", obj.code.coding[0].system))
        assertTrue(stringMatch("85353-1", obj.code.coding[0].code))
        assertTrue(stringMatch("Vital signs, weight, height, ", obj.code.coding[0].display))
        assertTrue(stringMatch("Vital signs Panel", obj.code.text))
        assertTrue(stringMatch("Patient/example", obj.subject!!.reference))
        assertTrue(stringMatch("1999-07-02", obj.effectiveDateTime))
        assertTrue(stringMatch("has-member", obj.related[0].type))
        assertTrue(stringMatch("Observation/respiratory-rate", obj.related[0].target.reference))
        assertTrue(stringMatch("Respiratory Rate", obj.related[0].target.display))
        assertTrue(stringMatch("has-member", obj.related[1].type))
        assertTrue(stringMatch("Observation/heart-rate", obj.related[1].target.reference))
        assertTrue(stringMatch("Heart Rate", obj.related[1].target.display))
        assertTrue(stringMatch("has-member", obj.related[2].type))
        assertTrue(stringMatch("Observation/blood-pressure", obj.related[2].target.reference))
        assertTrue(stringMatch("Blood Pressure", obj.related[2].target.display))
        assertTrue(stringMatch("has-member", obj.related[3].type))
        assertTrue(stringMatch("Observation/body-temperature", obj.related[3].target.reference))
        assertTrue(stringMatch("Body Temperature", obj.related[3].target.display))
    }

    fun `observation-example-vitals-panel Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `observation-example-phenotype 20 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-phenotype.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("Observation", obj.resourceType))
        assertTrue(stringMatch("example-phenotype", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.extension[0].url))
        assertTrue(stringMatch("http://www.genenames.org", obj.extension[0].valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("2623", obj.extension[0].valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("CYP2C9", obj.extension[0].valueCodeableConcept!!.coding[0].display))
        assertTrue(stringMatch("final", obj.status))
        assertTrue(stringMatch("http://loinc.org", obj.code.coding[0].system))
        assertTrue(stringMatch("79716-7", obj.code.coding[0].code))
        assertTrue(stringMatch("CYP2C9 gene product metabolic", obj.code.coding[0].display))
        assertTrue(stringMatch("Patient/727127", obj.subject!!.reference))
        assertTrue(stringMatch("J*********** C***********", obj.subject!!.display))
        assertTrue(stringMatch("2013-04-03T15:30:10+01:00", obj.issued))
        assertTrue(stringMatch("http://loinc.org", obj.valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("LA25391-6", obj.valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("Normal metabolizer", obj.valueCodeableConcept!!.coding[0].display))
        assertTrue(stringMatch("Specimen/genetics-example1-so", obj.specimen!!.reference))
        assertTrue(stringMatch("Molecular Specimen ID: MLD45-", obj.specimen!!.display))
        assertTrue(stringMatch("derived-from", obj.related[0].type))
        assertTrue(stringMatch("Observation/example-diplotype", obj.related[0].target.reference))
    }

    fun `observation-example-phenotype Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `observation-example-head-circumference 21 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-head-circumference.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("Observation", obj.resourceType))
        assertTrue(stringMatch("head-circumference", obj.id))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.meta!!.profile[0]))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("final", obj.status))
        assertTrue(stringMatch("http://hl7.org/fhir/observati", obj.category[0].coding[0].system))
        assertTrue(stringMatch("vital-signs", obj.category[0].coding[0].code))
        assertTrue(stringMatch("Vital Signs", obj.category[0].coding[0].display))
        assertTrue(stringMatch("Vital Signs", obj.category[0].text))
        assertTrue(stringMatch("http://loinc.org", obj.code.coding[0].system))
        assertTrue(stringMatch("8287-5", obj.code.coding[0].code))
        assertTrue(stringMatch("Head Occipital-frontal circum", obj.code.coding[0].display))
        assertTrue(stringMatch("Head Circumference", obj.code.text))
        assertTrue(stringMatch("Patient/example", obj.subject!!.reference))
        assertTrue(stringMatch("1999-07-02", obj.effectiveDateTime))
        assertTrue(stringMatch("%.2f".format(51.2f), "%.2f".format(obj.valueQuantity!!.value)))
        assertTrue(stringMatch("cm", obj.valueQuantity!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.valueQuantity!!.system))
        assertTrue(stringMatch("cm", obj.valueQuantity!!.code))
    }

    fun `observation-example-head-circumference Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `observation-example-TPMT-haplotype-two 22 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-TPMT-haplotype-two.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("Observation", obj.resourceType))
        assertTrue(stringMatch("example-TPMT-haplotype-two", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.extension[0].url))
        assertTrue(stringMatch("http://www.genenames.org", obj.extension[0].valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("12014", obj.extension[0].valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("TPMT", obj.extension[0].valueCodeableConcept!!.coding[0].display))
        assertTrue(stringMatch("unknown", obj.status))
        assertTrue(stringMatch("http://snomed.info", obj.code.coding[0].system))
        assertTrue(stringMatch("363779003", obj.code.coding[0].code))
        assertTrue(stringMatch("Genotype determination", obj.code.coding[0].display))
        assertTrue(stringMatch("Haplotype Call", obj.code.text))
        assertTrue(stringMatch("Patient/example", obj.subject!!.reference))
        assertTrue(stringMatch("E***********", obj.subject!!.display))
        assertTrue(stringMatch("2013-04-03T15:30:10+01:00", obj.issued))
        assertTrue(stringMatch("http://pharmakb.org", obj.valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("PA166128353", obj.valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("*4", obj.valueCodeableConcept!!.coding[0].display))
        assertTrue(stringMatch("derived-from", obj.related[0].type))
        assertTrue(stringMatch("Sequence/example-TPMT-two", obj.related[0].target.reference))
    }

    fun `observation-example-TPMT-haplotype-two Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `observation-example-f206-staphylococcus 23 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-f206-staphylococcus.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("Observation", obj.resourceType))
        assertTrue(stringMatch("f206", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("final", obj.status))
        assertTrue(stringMatch("http://acmelabs.org", obj.code.coding[0].system))
        assertTrue(stringMatch("104177", obj.code.coding[0].code))
        assertTrue(stringMatch("Blood culture", obj.code.coding[0].display))
        assertTrue(stringMatch("http://loinc.org", obj.code.coding[1].system))
        assertTrue(stringMatch("600-7", obj.code.coding[1].code))
        assertTrue(stringMatch("Bacteria identified in Blood ", obj.code.coding[1].display))
        assertTrue(stringMatch("Patient/f201", obj.subject!!.reference))
        assertTrue(stringMatch("Roel", obj.subject!!.display))
        assertTrue(stringMatch("2013-03-11T10:28:00+01:00", obj.issued))
        assertTrue(stringMatch("Practitioner/f202", obj.performer[0].reference))
        assertTrue(stringMatch("Luigi Maas", obj.performer[0].display))
        assertTrue(stringMatch("http://snomed.info/sct", obj.valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("3092008", obj.valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("Staphylococcus aureus", obj.valueCodeableConcept!!.coding[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/v2/0078", obj.interpretation!!.coding[0].system))
        assertTrue(stringMatch("POS", obj.interpretation!!.coding[0].code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.method!!.coding[0].system))
        assertTrue(stringMatch("104177005", obj.method!!.coding[0].code))
        assertTrue(stringMatch("Blood culture for bacteria, i", obj.method!!.coding[0].display))
    }

    fun `observation-example-f206-staphylococcus Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `observation-example-bloodpressure-cancel 24 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-bloodpressure-cancel.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("Observation", obj.resourceType))
        assertTrue(stringMatch("blood-pressure-cancel", obj.id))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.meta!!.profile[0]))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("urn:ietf:rfc:3986", obj.identifier[0].system))
        assertTrue(stringMatch("urn:uuid:187e0c12-8dd2-67e2-9", obj.identifier[0].value))
        assertTrue(stringMatch("cancelled", obj.status))
        assertTrue(stringMatch("http://hl7.org/fhir/observati", obj.category[0].coding[0].system))
        assertTrue(stringMatch("vital-signs", obj.category[0].coding[0].code))
        assertTrue(stringMatch("Vital Signs", obj.category[0].coding[0].display))
        assertTrue(stringMatch("http://loinc.org", obj.code.coding[0].system))
        assertTrue(stringMatch("85354-9", obj.code.coding[0].code))
        assertTrue(stringMatch("Bood pressure panel with all ", obj.code.coding[0].display))
        assertTrue(stringMatch("Blood pressure systolic & dia", obj.code.text))
        assertTrue(stringMatch("Patient/example", obj.subject!!.reference))
        assertTrue(stringMatch("2012-09-17", obj.effectiveDateTime))
        assertTrue(stringMatch("Practitioner/example", obj.performer[0].reference))
        assertTrue(stringMatch("http://hl7.org/fhir/v2/0078", obj.interpretation!!.coding[0].system))
        assertTrue(stringMatch("L", obj.interpretation!!.coding[0].code))
        assertTrue(stringMatch("low", obj.interpretation!!.coding[0].display))
        assertTrue(stringMatch("Below low normal", obj.interpretation!!.text))
        assertTrue(stringMatch("In this example, the blood pr", obj.comment))
        assertTrue(stringMatch("http://snomed.info/sct", obj.bodySite!!.coding[0].system))
        assertTrue(stringMatch("368209003", obj.bodySite!!.coding[0].code))
        assertTrue(stringMatch("Right arm", obj.bodySite!!.coding[0].display))
        assertTrue(stringMatch("http://loinc.org", obj.component[0].code.coding[0].system))
        assertTrue(stringMatch("8480-6", obj.component[0].code.coding[0].code))
        assertTrue(stringMatch("Systolic blood pressure", obj.component[0].code.coding[0].display))
        assertTrue(stringMatch("http://snomed.info/sct", obj.component[0].code.coding[1].system))
        assertTrue(stringMatch("271649006", obj.component[0].code.coding[1].code))
        assertTrue(stringMatch("Systolic blood pressure", obj.component[0].code.coding[1].display))
        assertTrue(stringMatch("http://acme.org/devices/clini", obj.component[0].code.coding[2].system))
        assertTrue(stringMatch("bp-s", obj.component[0].code.coding[2].code))
        assertTrue(stringMatch("Systolic Blood pressure", obj.component[0].code.coding[2].display))
        assertTrue(stringMatch("http://hl7.org/fhir/data-abse", obj.component[0].dataAbsentReason!!.coding[0].system))
        assertTrue(stringMatch("not-asked", obj.component[0].dataAbsentReason!!.coding[0].code))
        assertTrue(stringMatch("Not Asked", obj.component[0].dataAbsentReason!!.coding[0].display))
        assertTrue(stringMatch("http://loinc.org", obj.component[1].code.coding[0].system))
        assertTrue(stringMatch("8462-4", obj.component[1].code.coding[0].code))
        assertTrue(stringMatch("Diastolic blood pressure", obj.component[1].code.coding[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/data-abse", obj.component[1].dataAbsentReason!!.coding[0].system))
        assertTrue(stringMatch("not-asked", obj.component[1].dataAbsentReason!!.coding[0].code))
        assertTrue(stringMatch("Not Asked", obj.component[1].dataAbsentReason!!.coding[0].display))
    }

    fun `observation-example-bloodpressure-cancel Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `observation-example-date-lastmp 25 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-date-lastmp.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("Observation", obj.resourceType))
        assertTrue(stringMatch("date-lastmp", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("final", obj.status))
        assertTrue(stringMatch("http://hl7.org/fhir/observati", obj.category[0].coding[0].system))
        assertTrue(stringMatch("survey", obj.category[0].coding[0].code))
        assertTrue(stringMatch("Survey", obj.category[0].coding[0].display))
        assertTrue(stringMatch("AOE", obj.category[0].text))
        assertTrue(stringMatch("http://loinc.org", obj.code.coding[0].system))
        assertTrue(stringMatch("8665-2", obj.code.coding[0].code))
        assertTrue(stringMatch("Date last menstrual period", obj.code.coding[0].display))
        assertTrue(stringMatch("Date last menstrual period", obj.code.text))
        assertTrue(stringMatch("Patient/pat2", obj.subject!!.reference))
        assertTrue(stringMatch("2016-01-24", obj.effectiveDateTime))
        assertTrue(stringMatch("2016-12-30", obj.valueDateTime))
    }

    fun `observation-example-date-lastmp Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `observation-example-glasgow 26 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-glasgow.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("Observation", obj.resourceType))
        assertTrue(stringMatch("glasgow", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("Observation", (obj.contained[0] as Observation).resourceType))
        assertTrue(stringMatch("motor", (obj.contained[0] as Observation).id))
        assertTrue(stringMatch("final", (obj.contained[0] as Observation).status))
        assertTrue(stringMatch("http://loinc.org", (obj.contained[0] as Observation).code.coding[0].system))
        assertTrue(stringMatch("9268-4", (obj.contained[0] as Observation).code.coding[0].code))
        assertTrue(stringMatch("Glasgow coma score motor", (obj.contained[0] as Observation).code.coding[0].display))
        assertTrue(stringMatch("GCS motor", (obj.contained[0] as Observation).code.text))
        assertTrue(stringMatch("Patient/example", (obj.contained[0] as Observation).subject!!.reference))
        assertTrue(stringMatch("2014-12-11T04:44:16Z", (obj.contained[0] as Observation).effectiveDateTime))
        assertTrue(stringMatch("http:/acme.ec/gcsmotor", (obj.contained[0] as Observation).valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("5", (obj.contained[0] as Observation).valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("Localizes painful stimuli", (obj.contained[0] as Observation).valueCodeableConcept!!.coding[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", (obj.contained[0] as Observation).valueCodeableConcept!!.coding[1].extension[0].url))
        assertTrue(stringMatch("%.2f".format(5f), "%.2f".format((obj.contained[0] as Observation).valueCodeableConcept!!.coding[1].extension[0].valueDecimal)))
        assertTrue(stringMatch("http://loinc.org", (obj.contained[0] as Observation).valueCodeableConcept!!.coding[1].system))
        assertTrue(stringMatch("LA6566-9", (obj.contained[0] as Observation).valueCodeableConcept!!.coding[1].code))
        assertTrue(stringMatch("Localizing pain", (obj.contained[0] as Observation).valueCodeableConcept!!.coding[1].display))
        assertTrue(stringMatch("5 (Localizes painful stimuli)", (obj.contained[0] as Observation).valueCodeableConcept!!.text))
        assertTrue(stringMatch("Observation", (obj.contained[1] as Observation).resourceType))
        assertTrue(stringMatch("verbal", (obj.contained[1] as Observation).id))
        assertTrue(stringMatch("final", (obj.contained[1] as Observation).status))
        assertTrue(stringMatch("http://loinc.org", (obj.contained[1] as Observation).code.coding[0].system))
        assertTrue(stringMatch("9270-0", (obj.contained[1] as Observation).code.coding[0].code))
        assertTrue(stringMatch("Glasgow coma score verbal", (obj.contained[1] as Observation).code.coding[0].display))
        assertTrue(stringMatch("Verbal", (obj.contained[1] as Observation).code.text))
        assertTrue(stringMatch("Patient/example", (obj.contained[1] as Observation).subject!!.reference))
        assertTrue(stringMatch("2014-12-11T04:44:16Z", (obj.contained[1] as Observation).effectiveDateTime))
        assertTrue(stringMatch("http:/acme.ec/gcsverbal", (obj.contained[1] as Observation).valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("4", (obj.contained[1] as Observation).valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("Confused, disoriented", (obj.contained[1] as Observation).valueCodeableConcept!!.coding[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", (obj.contained[1] as Observation).valueCodeableConcept!!.coding[1].extension[0].url))
        assertTrue(stringMatch("%.2f".format(4f), "%.2f".format((obj.contained[1] as Observation).valueCodeableConcept!!.coding[1].extension[0].valueDecimal)))
        assertTrue(stringMatch("http://loinc.org", (obj.contained[1] as Observation).valueCodeableConcept!!.coding[1].system))
        assertTrue(stringMatch("LA6560-2", (obj.contained[1] as Observation).valueCodeableConcept!!.coding[1].code))
        assertTrue(stringMatch("Confused", (obj.contained[1] as Observation).valueCodeableConcept!!.coding[1].display))
        assertTrue(stringMatch("4 (Confused, disoriented)", (obj.contained[1] as Observation).valueCodeableConcept!!.text))
        assertTrue(stringMatch("Observation", (obj.contained[2] as Observation).resourceType))
        assertTrue(stringMatch("eyes", (obj.contained[2] as Observation).id))
        assertTrue(stringMatch("final", (obj.contained[2] as Observation).status))
        assertTrue(stringMatch("http://loinc.org", (obj.contained[2] as Observation).code.coding[0].system))
        assertTrue(stringMatch("9267-6", (obj.contained[2] as Observation).code.coding[0].code))
        assertTrue(stringMatch("Glasgow coma score eye openin", (obj.contained[2] as Observation).code.coding[0].display))
        assertTrue(stringMatch("Eyes", (obj.contained[2] as Observation).code.text))
        assertTrue(stringMatch("Patient/example", (obj.contained[2] as Observation).subject!!.reference))
        assertTrue(stringMatch("2014-12-11T04:44:16Z", (obj.contained[2] as Observation).effectiveDateTime))
        assertTrue(stringMatch("http:/acme.ec/gcseye", (obj.contained[2] as Observation).valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("4", (obj.contained[2] as Observation).valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("Opens eyes spontaneously", (obj.contained[2] as Observation).valueCodeableConcept!!.coding[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", (obj.contained[2] as Observation).valueCodeableConcept!!.coding[1].extension[0].url))
        assertTrue(stringMatch("%.2f".format(4f), "%.2f".format((obj.contained[2] as Observation).valueCodeableConcept!!.coding[1].extension[0].valueDecimal)))
        assertTrue(stringMatch("http://loinc.org", (obj.contained[2] as Observation).valueCodeableConcept!!.coding[1].system))
        assertTrue(stringMatch("LA6556-0", (obj.contained[2] as Observation).valueCodeableConcept!!.coding[1].code))
        assertTrue(stringMatch("Eyes open spontaneously", (obj.contained[2] as Observation).valueCodeableConcept!!.coding[1].display))
        assertTrue(stringMatch("4 (Opens eyes spontaneously)", (obj.contained[2] as Observation).valueCodeableConcept!!.text))
        assertTrue(stringMatch("final", obj.status))
        assertTrue(stringMatch("http://loinc.org", obj.code.coding[0].system))
        assertTrue(stringMatch("9269-2", obj.code.coding[0].code))
        assertTrue(stringMatch("Glasgow coma score total", obj.code.coding[0].display))
        assertTrue(stringMatch("Glasgow Coma Scale , (GCS)", obj.code.text))
        assertTrue(stringMatch("Patient/example", obj.subject!!.reference))
        assertTrue(stringMatch("Peter James Chalmers", obj.subject!!.display))
        assertTrue(stringMatch("2014-12-11T04:44:16Z", obj.effectiveDateTime))
        assertTrue(stringMatch("%.2f".format(13f), "%.2f".format(obj.valueQuantity!!.value)))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.valueQuantity!!.system))
        assertTrue(stringMatch("{score}", obj.valueQuantity!!.code))
        assertTrue(stringMatch("%.2f".format(8f), "%.2f".format(obj.referenceRange[0].high!!.value)))
    }

    @Test
    fun `observation-example-glasgow 27 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-glasgow.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.referenceRange[0].high!!.system))
        assertTrue(stringMatch("{score}", obj.referenceRange[0].high!!.code))
        assertTrue(stringMatch("Severe TBI", obj.referenceRange[0].type!!.text))
        assertTrue(stringMatch("%.2f".format(9f), "%.2f".format(obj.referenceRange[1].low!!.value)))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.referenceRange[1].low!!.system))
        assertTrue(stringMatch("{score}", obj.referenceRange[1].low!!.code))
        assertTrue(stringMatch("%.2f".format(12f), "%.2f".format(obj.referenceRange[1].high!!.value)))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.referenceRange[1].high!!.system))
        assertTrue(stringMatch("{score}", obj.referenceRange[1].high!!.code))
        assertTrue(stringMatch("Moderate TBI", obj.referenceRange[1].type!!.text))
        assertTrue(stringMatch("%.2f".format(13f), "%.2f".format(obj.referenceRange[2].low!!.value)))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.referenceRange[2].low!!.system))
        assertTrue(stringMatch("{score}", obj.referenceRange[2].low!!.code))
        assertTrue(stringMatch("Mild TBI", obj.referenceRange[2].type!!.text))
        assertTrue(stringMatch("derived-from", obj.related[0].type))
        assertTrue(stringMatch("#motor", obj.related[0].target.reference))
        assertTrue(stringMatch("Motor score", obj.related[0].target.display))
        assertTrue(stringMatch("derived-from", obj.related[1].type))
        assertTrue(stringMatch("#verbal", obj.related[1].target.reference))
        assertTrue(stringMatch("Verbal score", obj.related[1].target.display))
        assertTrue(stringMatch("derived-from", obj.related[2].type))
        assertTrue(stringMatch("#eyes", obj.related[2].target.reference))
        assertTrue(stringMatch("Eyes score", obj.related[2].target.display))
    }

    fun `observation-example-glasgow Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `observation-example-10minute-apgar-score 28 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-10minute-apgar-score.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("Observation", obj.resourceType))
        assertTrue(stringMatch("10minute-apgar-score", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("Patient", (obj.contained[0] as Patient).resourceType))
        assertTrue(stringMatch("newborn", (obj.contained[0] as Patient).id))
        assertTrue(stringMatch("http://acmehealthcare/org/mrn", (obj.contained[0] as Patient).identifier[0].system))
        assertTrue(stringMatch("12345", (obj.contained[0] as Patient).identifier[0].value))
        assertEquals(true, if ((obj.contained[0] as Patient).active != null) (obj.contained[0] as Patient).active else false, "Field: (obj.contained[0] as Patient).active")
        assertTrue(stringMatch("Chalmers", (obj.contained[0] as Patient).name[0].family))
        assertTrue(stringMatch("Peter", (obj.contained[0] as Patient).name[0].given[0]))
        assertTrue(stringMatch("James", (obj.contained[0] as Patient).name[0].given[1]))
        assertTrue(stringMatch("male", (obj.contained[0] as Patient).gender))
        assertTrue(stringMatch("2016-05-18", (obj.contained[0] as Patient).birthDate))
        assertTrue(stringMatch("final", obj.status))
        assertTrue(stringMatch("http://hl7.org/fhir/observati", obj.category[0].coding[0].system))
        assertTrue(stringMatch("survey", obj.category[0].coding[0].code))
        assertTrue(stringMatch("Survey", obj.category[0].coding[0].display))
        assertTrue(stringMatch("Survey", obj.category[0].text))
        assertTrue(stringMatch("http://loinc.org", obj.code.coding[0].system))
        assertTrue(stringMatch("9271-8", obj.code.coding[0].code))
        assertTrue(stringMatch("10 minute Apgar Score", obj.code.coding[0].display))
        assertTrue(stringMatch("http://snomed.info/sct", obj.code.coding[1].system))
        assertTrue(stringMatch("169922007", obj.code.coding[1].code))
        assertTrue(stringMatch("Apgar at 10 minutes", obj.code.coding[1].display))
        assertTrue(stringMatch("10 minute Apgar Score", obj.code.text))
        assertTrue(stringMatch("#newborn", obj.subject!!.reference))
        assertTrue(stringMatch("2016-05-18T22:33:22Z", obj.effectiveDateTime))
        assertTrue(stringMatch("Practitioner/example", obj.performer[0].reference))
        assertTrue(stringMatch("%.2f".format(10f), "%.2f".format(obj.valueQuantity!!.value)))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.valueQuantity!!.system))
        assertTrue(stringMatch("{score}", obj.valueQuantity!!.code))
        assertTrue(stringMatch("http://loinc.org", obj.component[0].code.coding[0].system))
        assertTrue(stringMatch("32401-2", obj.component[0].code.coding[0].code))
        assertTrue(stringMatch("10 minute Apgar Color", obj.component[0].code.coding[0].display))
        assertTrue(stringMatch("http://snomed.info/sct", obj.component[0].code.coding[1].system))
        assertTrue(stringMatch("249227004", obj.component[0].code.coding[1].code))
        assertTrue(stringMatch("Apgar color score", obj.component[0].code.coding[1].display))
        assertTrue(stringMatch("Apgar color score", obj.component[0].code.text))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.component[0].valueCodeableConcept!!.coding[0].extension[0].url))
        assertTrue(stringMatch("%.2f".format(2f), "%.2f".format(obj.component[0].valueCodeableConcept!!.coding[0].extension[0].valueDecimal)))
        assertTrue(stringMatch("http://loinc.org/la", obj.component[0].valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("LA6724-4", obj.component[0].valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("Good color all over", obj.component[0].valueCodeableConcept!!.coding[0].display))
        assertTrue(stringMatch("http:/acme.ped/apgarcolor", obj.component[0].valueCodeableConcept!!.coding[1].system))
        assertTrue(stringMatch("2", obj.component[0].valueCodeableConcept!!.coding[1].code))
        assertTrue(stringMatch("2. Good color all over", obj.component[0].valueCodeableConcept!!.text))
        assertTrue(stringMatch("http://loinc.org", obj.component[1].code.coding[0].system))
        assertTrue(stringMatch("32402-0", obj.component[1].code.coding[0].code))
        assertTrue(stringMatch("10 minute Apgar Heart Rate", obj.component[1].code.coding[0].display))
        assertTrue(stringMatch("http://snomed.info/sct", obj.component[1].code.coding[1].system))
        assertTrue(stringMatch("249223000", obj.component[1].code.coding[1].code))
        assertTrue(stringMatch("Apgar heart rate score", obj.component[1].code.coding[1].display))
        assertTrue(stringMatch("Apgar respiratory effort scor", obj.component[1].code.text))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.component[1].valueCodeableConcept!!.coding[0].extension[0].url))
        assertTrue(stringMatch("%.2f".format(2f), "%.2f".format(obj.component[1].valueCodeableConcept!!.coding[0].extension[0].valueDecimal)))
        assertTrue(stringMatch("http://loinc.org/la", obj.component[1].valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("LA6718-6", obj.component[1].valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("At least 100 beats per minute", obj.component[1].valueCodeableConcept!!.coding[0].display))
        assertTrue(stringMatch("http:/acme.ped/apgarheartrate", obj.component[1].valueCodeableConcept!!.coding[1].system))
        assertTrue(stringMatch("2", obj.component[1].valueCodeableConcept!!.coding[1].code))
        assertTrue(stringMatch("2. At least 100 beats per min", obj.component[1].valueCodeableConcept!!.text))
        assertTrue(stringMatch("http://loinc.org", obj.component[2].code.coding[0].system))
        assertTrue(stringMatch("32404-6", obj.component[2].code.coding[0].code))
        assertTrue(stringMatch("10 minute Apgar Reflex Irrita", obj.component[2].code.coding[0].display))
        assertTrue(stringMatch("http://snomed.info/sct", obj.component[2].code.coding[1].system))
        assertTrue(stringMatch("249226008", obj.component[2].code.coding[1].code))
        assertTrue(stringMatch("Apgar response to stimulus sc", obj.component[2].code.coding[1].display))
        assertTrue(stringMatch("Apgar response to stimulus sc", obj.component[2].code.text))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.component[2].valueCodeableConcept!!.coding[0].extension[0].url))
        assertTrue(stringMatch("%.2f".format(2f), "%.2f".format(obj.component[2].valueCodeableConcept!!.coding[0].extension[0].valueDecimal)))
        assertTrue(stringMatch("http://loinc.org/la", obj.component[2].valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("LA6721-0", obj.component[2].valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("Grimace and pulling away, cou", obj.component[2].valueCodeableConcept!!.coding[0].display))
        assertTrue(stringMatch("http:/acme.ped/apgarreflexirr", obj.component[2].valueCodeableConcept!!.coding[1].system))
        assertTrue(stringMatch("2", obj.component[2].valueCodeableConcept!!.coding[1].code))
        assertTrue(stringMatch("2. Grimace and pulling away, ", obj.component[2].valueCodeableConcept!!.text))
        assertTrue(stringMatch("http://loinc.org", obj.component[3].code.coding[0].system))
        assertTrue(stringMatch("32403-8", obj.component[3].code.coding[0].code))
        assertTrue(stringMatch("10 minute Apgar Muscle Tone", obj.component[3].code.coding[0].display))
        assertTrue(stringMatch("http://snomed.info/sct", obj.component[3].code.coding[1].system))
        assertTrue(stringMatch("249225007", obj.component[3].code.coding[1].code))
        assertTrue(stringMatch("Apgar muscle tone score", obj.component[3].code.coding[1].display))
        assertTrue(stringMatch("Apgar muscle tone score", obj.component[3].code.text))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.component[3].valueCodeableConcept!!.coding[0].extension[0].url))
        assertTrue(stringMatch("%.2f".format(2f), "%.2f".format(obj.component[3].valueCodeableConcept!!.coding[0].extension[0].valueDecimal)))
        assertTrue(stringMatch("http://loinc.org/la", obj.component[3].valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("LA6715-2", obj.component[3].valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("Active motion ", obj.component[3].valueCodeableConcept!!.coding[0].display))
        assertTrue(stringMatch("http:/acme.ped/apgarmuscleton", obj.component[3].valueCodeableConcept!!.coding[1].system))
        assertTrue(stringMatch("2", obj.component[3].valueCodeableConcept!!.coding[1].code))
        assertTrue(stringMatch("2. Active motion", obj.component[3].valueCodeableConcept!!.text))
        assertTrue(stringMatch("http://loinc.org", obj.component[4].code.coding[0].system))
        assertTrue(stringMatch("32405-3", obj.component[4].code.coding[0].code))
        assertTrue(stringMatch("10 minute Apgar Respiratory e", obj.component[4].code.coding[0].display))
        assertTrue(stringMatch("http://snomed.info/sct", obj.component[4].code.coding[1].system))
        assertTrue(stringMatch("249224006", obj.component[4].code.coding[1].code))
        assertTrue(stringMatch("Apgar respiratory effort scor", obj.component[4].code.coding[1].display))
        assertTrue(stringMatch("Apgar respiratory effort scor", obj.component[4].code.text))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.component[4].valueCodeableConcept!!.coding[0].extension[0].url))
        assertTrue(stringMatch("%.2f".format(2f), "%.2f".format(obj.component[4].valueCodeableConcept!!.coding[0].extension[0].valueDecimal)))
        assertTrue(stringMatch("http://loinc.org/la", obj.component[4].valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("LA6727-7", obj.component[4].valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("Good, strong cry; normal rate", obj.component[4].valueCodeableConcept!!.coding[0].display))
        assertTrue(stringMatch("http:/acme.ped/apgarrespirato", obj.component[4].valueCodeableConcept!!.coding[1].system))
        assertTrue(stringMatch("2", obj.component[4].valueCodeableConcept!!.coding[1].code))
        assertTrue(stringMatch("2. Good, strong cry; normal r", obj.component[4].valueCodeableConcept!!.text))
    }

    fun `observation-example-10minute-apgar-score Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `observation-example-satO2 29 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-satO2.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("Observation", obj.resourceType))
        assertTrue(stringMatch("satO2", obj.id))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.meta!!.profile[0]))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://goodcare.org/observati", obj.identifier[0].system))
        assertTrue(stringMatch("o1223435-10", obj.identifier[0].value))
        assertTrue(stringMatch("final", obj.status))
        assertTrue(stringMatch("http://hl7.org/fhir/observati", obj.category[0].coding[0].system))
        assertTrue(stringMatch("vital-signs", obj.category[0].coding[0].code))
        assertTrue(stringMatch("Vital Signs", obj.category[0].coding[0].display))
        assertTrue(stringMatch("Vital Signs", obj.category[0].text))
        assertTrue(stringMatch("http://loinc.org", obj.code.coding[0].system))
        assertTrue(stringMatch("59408-5", obj.code.coding[0].code))
        assertTrue(stringMatch("Oxygen saturation in Arterial", obj.code.coding[0].display))
        assertTrue(stringMatch("urn:iso:std:iso:11073:10101", obj.code.coding[1].system))
        assertTrue(stringMatch("150456", obj.code.coding[1].code))
        assertTrue(stringMatch("MDC_PULS_OXIM_SAT_O2", obj.code.coding[1].display))
        assertTrue(stringMatch("Patient/example", obj.subject!!.reference))
        assertTrue(stringMatch("2014-12-05T09:30:10+01:00", obj.effectiveDateTime))
        assertTrue(stringMatch("%.2f".format(95f), "%.2f".format(obj.valueQuantity!!.value)))
        assertTrue(stringMatch("%", obj.valueQuantity!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.valueQuantity!!.system))
        assertTrue(stringMatch("%", obj.valueQuantity!!.code))
        assertTrue(stringMatch("http://hl7.org/fhir/v2/0078", obj.interpretation!!.coding[0].system))
        assertTrue(stringMatch("N", obj.interpretation!!.coding[0].code))
        assertTrue(stringMatch("Normal", obj.interpretation!!.coding[0].display))
        assertTrue(stringMatch("Normal (applies to non-numeri", obj.interpretation!!.text))
        assertTrue(stringMatch("DeviceMetric/example", obj.device!!.reference))
        assertTrue(stringMatch("%.2f".format(90f), "%.2f".format(obj.referenceRange[0].low!!.value)))
        assertTrue(stringMatch("%", obj.referenceRange[0].low!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.referenceRange[0].low!!.system))
        assertTrue(stringMatch("%", obj.referenceRange[0].low!!.code))
        assertTrue(stringMatch("%.2f".format(99f), "%.2f".format(obj.referenceRange[0].high!!.value)))
        assertTrue(stringMatch("%", obj.referenceRange[0].high!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.referenceRange[0].high!!.system))
        assertTrue(stringMatch("%", obj.referenceRange[0].high!!.code))
    }

    fun `observation-example-satO2 Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `observation-example-glasgow-qa 30 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-glasgow-qa.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("Observation", obj.resourceType))
        assertTrue(stringMatch("gcs-qa", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("final", obj.status))
        assertTrue(stringMatch("http://loinc.org", obj.code.coding[0].system))
        assertTrue(stringMatch("9269-2", obj.code.coding[0].code))
        assertTrue(stringMatch("Glasgow coma score total", obj.code.coding[0].display))
        assertTrue(stringMatch("Glasgow Coma Scale , (GCS)", obj.code.text))
        assertTrue(stringMatch("Patient/example", obj.subject!!.reference))
        assertTrue(stringMatch("Peter James Chalmers", obj.subject!!.display))
        assertTrue(stringMatch("2014-12-11T04:44:16Z", obj.effectiveDateTime))
        assertTrue(stringMatch("%.2f".format(13f), "%.2f".format(obj.valueQuantity!!.value)))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.valueQuantity!!.system))
        assertTrue(stringMatch("{score}", obj.valueQuantity!!.code))
        assertTrue(stringMatch("%.2f".format(8f), "%.2f".format(obj.referenceRange[0].high!!.value)))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.referenceRange[0].high!!.system))
        assertTrue(stringMatch("{score}", obj.referenceRange[0].high!!.code))
        assertTrue(stringMatch("Severe TBI", obj.referenceRange[0].type!!.text))
        assertTrue(stringMatch("%.2f".format(9f), "%.2f".format(obj.referenceRange[1].low!!.value)))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.referenceRange[1].low!!.system))
        assertTrue(stringMatch("{score}", obj.referenceRange[1].low!!.code))
        assertTrue(stringMatch("%.2f".format(12f), "%.2f".format(obj.referenceRange[1].high!!.value)))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.referenceRange[1].high!!.system))
        assertTrue(stringMatch("{score}", obj.referenceRange[1].high!!.code))
        assertTrue(stringMatch("Moderate TBI", obj.referenceRange[1].type!!.text))
        assertTrue(stringMatch("%.2f".format(13f), "%.2f".format(obj.referenceRange[2].low!!.value)))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.referenceRange[2].low!!.system))
        assertTrue(stringMatch("{score}", obj.referenceRange[2].low!!.code))
        assertTrue(stringMatch("Mild TBI", obj.referenceRange[2].type!!.text))
        assertTrue(stringMatch("derived-from", obj.related[0].type))
        assertTrue(stringMatch("QuestionnaireResponse/gcs", obj.related[0].target.reference))
        assertTrue(stringMatch("GCS form results", obj.related[0].target.display))
    }

    fun `observation-example-glasgow-qa Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `observation-example-TPMT-haplotype-one 31 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-TPMT-haplotype-one.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("Observation", obj.resourceType))
        assertTrue(stringMatch("example-TPMT-haplotype-one", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.extension[0].url))
        assertTrue(stringMatch("http://www.genenames.org", obj.extension[0].valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("12014", obj.extension[0].valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("TPMT", obj.extension[0].valueCodeableConcept!!.coding[0].display))
        assertTrue(stringMatch("unknown", obj.status))
        assertTrue(stringMatch("http://snomed.info", obj.code.coding[0].system))
        assertTrue(stringMatch("363779003", obj.code.coding[0].code))
        assertTrue(stringMatch("Genotype determination", obj.code.coding[0].display))
        assertTrue(stringMatch("Haplotype Call", obj.code.text))
        assertTrue(stringMatch("Patient/example", obj.subject!!.reference))
        assertTrue(stringMatch("E***********", obj.subject!!.display))
        assertTrue(stringMatch("2013-04-03T15:30:10+01:00", obj.issued))
        assertTrue(stringMatch("http://pharmakb.org", obj.valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("PA166128347", obj.valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("*1", obj.valueCodeableConcept!!.coding[0].display))
        assertTrue(stringMatch("derived-from", obj.related[0].type))
        assertTrue(stringMatch("Sequence/example-TPMT-one", obj.related[0].target.reference))
    }

    fun `observation-example-TPMT-haplotype-one Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `observation-example-f004-erythrocyte 32 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-f004-erythrocyte.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("Observation", obj.resourceType))
        assertTrue(stringMatch("f004", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("official", obj.identifier[0].use))
        assertTrue(stringMatch("http://www.bmc.nl/zorgportal/", obj.identifier[0].system))
        assertTrue(stringMatch("6326", obj.identifier[0].value))
        assertTrue(stringMatch("final", obj.status))
        assertTrue(stringMatch("http://loinc.org", obj.code.coding[0].system))
        assertTrue(stringMatch("789-8", obj.code.coding[0].code))
        assertTrue(stringMatch("Erythrocytes [#/volume] in Bl", obj.code.coding[0].display))
        assertTrue(stringMatch("Patient/f001", obj.subject!!.reference))
        assertTrue(stringMatch("P. van de Heuvel", obj.subject!!.display))
        assertTrue(stringMatch("2013-04-02T10:30:10+01:00", obj.effectivePeriod!!.start))
        assertTrue(stringMatch("2013-04-05T10:30:10+01:00", obj.effectivePeriod!!.end))
        assertTrue(stringMatch("2013-04-03T15:30:10+01:00", obj.issued))
        assertTrue(stringMatch("Practitioner/f005", obj.performer[0].reference))
        assertTrue(stringMatch("A. Langeveld", obj.performer[0].display))
        assertTrue(stringMatch("%.2f".format(4.12f), "%.2f".format(obj.valueQuantity!!.value)))
        assertTrue(stringMatch("10^12/L", obj.valueQuantity!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.valueQuantity!!.system))
        assertTrue(stringMatch("10*12/L", obj.valueQuantity!!.code))
        assertTrue(stringMatch("http://hl7.org/fhir/v2/0078", obj.interpretation!!.coding[0].system))
        assertTrue(stringMatch("L", obj.interpretation!!.coding[0].code))
        assertTrue(stringMatch("Low", obj.interpretation!!.coding[0].display))
        assertTrue(stringMatch(" 12-14 y Male: 4.4 - 5.2  x  ", obj.referenceRange[0].text))
    }

    fun `observation-example-f004-erythrocyte Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `observation-example-genetics-5 33 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-genetics-5.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("Observation", obj.resourceType))
        assertTrue(stringMatch("example-genetics-5", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("final", obj.status))
        assertTrue(stringMatch("PCR validation", obj.code.text))
        assertTrue(stringMatch("Patient/example", obj.subject!!.reference))
        assertTrue(stringMatch("Molecular Lab Patient ID: HOS", obj.subject!!.display))
        assertTrue(stringMatch("2013-04-03T15:30:10+01:00", obj.issued))
        assertTrue(stringMatch("Practitioner/example", obj.performer[0].reference))
        assertTrue(stringMatch("Sequence Analysis Laboratory", obj.performer[0].display))
        assertTrue(stringMatch("http://snomed.info/sct", obj.valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("260385009", obj.valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("Negative", obj.valueCodeableConcept!!.coding[0].display))
        assertTrue(stringMatch("sequel-to", obj.related[0].type))
        assertTrue(stringMatch("Observation/example-genetics-", obj.related[0].target.reference))
        assertTrue(stringMatch("ObservationForGenetics profil", obj.related[0].target.display))
    }

    fun `observation-example-genetics-5 Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `observation-example-f204-creatinine 34 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-f204-creatinine.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("Observation", obj.resourceType))
        assertTrue(stringMatch("f204", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("https://intranet.aumc.nl/labv", obj.identifier[0].system))
        assertTrue(stringMatch("1304-03720-Creatinine", obj.identifier[0].value))
        assertTrue(stringMatch("final", obj.status))
        assertTrue(stringMatch("https://intranet.aumc.nl/labt", obj.code.coding[0].system))
        assertTrue(stringMatch("20005", obj.code.coding[0].code))
        assertTrue(stringMatch("Creatinine(Serum)", obj.code.coding[0].display))
        assertTrue(stringMatch("Patient/f201", obj.subject!!.reference))
        assertTrue(stringMatch("Roel", obj.subject!!.display))
        assertTrue(stringMatch("2013-04-04T14:34:00+01:00", obj.issued))
        assertTrue(stringMatch("Practitioner/f202", obj.performer[0].reference))
        assertTrue(stringMatch("Luigi Maas", obj.performer[0].display))
        assertTrue(stringMatch("%.2f".format(122f), "%.2f".format(obj.valueQuantity!!.value)))
        assertTrue(stringMatch("umol/L", obj.valueQuantity!!.unit))
        assertTrue(stringMatch("http://snomed.info/sct", obj.valueQuantity!!.system))
        assertTrue(stringMatch("258814008", obj.valueQuantity!!.code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.interpretation!!.coding[0].system))
        assertTrue(stringMatch("166717003", obj.interpretation!!.coding[0].code))
        assertTrue(stringMatch("Serum creatinine raised", obj.interpretation!!.coding[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/v2/0078", obj.interpretation!!.coding[1].system))
        assertTrue(stringMatch("H", obj.interpretation!!.coding[1].code))
        assertTrue(stringMatch("%.2f".format(64f), "%.2f".format(obj.referenceRange[0].low!!.value)))
        assertTrue(stringMatch("%.2f".format(104f), "%.2f".format(obj.referenceRange[0].high!!.value)))
        assertTrue(stringMatch("http://hl7.org/fhir/reference", obj.referenceRange[0].type!!.coding[0].system))
        assertTrue(stringMatch("normal", obj.referenceRange[0].type!!.coding[0].code))
        assertTrue(stringMatch("Normal Range", obj.referenceRange[0].type!!.coding[0].display))
    }

    fun `observation-example-f204-creatinine Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `observation-example-genetics-4 35 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-genetics-4.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("Observation", obj.resourceType))
        assertTrue(stringMatch("example-genetics-4", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("final", obj.status))
        assertTrue(stringMatch("Allele ABC", obj.code.text))
        assertTrue(stringMatch("Patient/example", obj.subject!!.reference))
        assertTrue(stringMatch("Molecular Lab Patient ID: HOS", obj.subject!!.display))
        assertTrue(stringMatch("2013-04-03T15:30:10+01:00", obj.issued))
        assertTrue(stringMatch("Practitioner/example", obj.performer[0].reference))
        assertTrue(stringMatch("Molecular Diagnostics Laborat", obj.performer[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/v2/0078", obj.interpretation!!.coding[0].system))
        assertTrue(stringMatch("POS", obj.interpretation!!.coding[0].code))
        assertTrue(stringMatch("Positive", obj.interpretation!!.text))
        assertTrue(stringMatch("Specimen/genetics-example1-so", obj.specimen!!.reference))
        assertTrue(stringMatch("Molecular Specimen ID: MLD45-", obj.specimen!!.display))
        assertTrue(stringMatch("has-member", obj.related[0].type))
        assertTrue(stringMatch("Observation/example-genetics-", obj.related[0].target.reference))
        assertTrue(stringMatch("Variant-1", obj.related[0].target.display))
        assertTrue(stringMatch("has-member", obj.related[1].type))
        assertTrue(stringMatch("Observation/example-genetics-", obj.related[1].target.reference))
        assertTrue(stringMatch("Variant-2", obj.related[1].target.display))
        assertTrue(stringMatch("has-member", obj.related[2].type))
        assertTrue(stringMatch("Observation/example-genetics-", obj.related[2].target.reference))
        assertTrue(stringMatch("Variant-3", obj.related[2].target.display))
    }

    fun `observation-example-genetics-4 Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `observation-example-sample-data 36 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-sample-data.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("Observation", obj.resourceType))
        assertTrue(stringMatch("ekg", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("final", obj.status))
        assertTrue(stringMatch("http://hl7.org/fhir/observati", obj.category[0].coding[0].system))
        assertTrue(stringMatch("procedure", obj.category[0].coding[0].code))
        assertTrue(stringMatch("Procedure", obj.category[0].coding[0].display))
        assertTrue(stringMatch("urn:oid:2.16.840.1.113883.6.2", obj.code.coding[0].system))
        assertTrue(stringMatch("131328", obj.code.coding[0].code))
        assertTrue(stringMatch("MDC_ECG_ELEC_POTL", obj.code.coding[0].display))
        assertTrue(stringMatch("Patient/f001", obj.subject!!.reference))
        assertTrue(stringMatch("P. van de Heuvel", obj.subject!!.display))
        assertTrue(stringMatch("2015-02-19T09:30:35+01:00", obj.effectiveDateTime))
        assertTrue(stringMatch("Practitioner/f005", obj.performer[0].reference))
        assertTrue(stringMatch("A. Langeveld", obj.performer[0].display))
        assertTrue(stringMatch("12 lead EKG Device Metric", obj.device!!.display))
        assertTrue(stringMatch("urn:oid:2.16.840.1.113883.6.2", obj.component[0].code.coding[0].system))
        assertTrue(stringMatch("131329", obj.component[0].code.coding[0].code))
        assertTrue(stringMatch("MDC_ECG_ELEC_POTL_I", obj.component[0].code.coding[0].display))
        assertTrue(stringMatch("%.2f".format(2048f), "%.2f".format(obj.component[0].valueSampledData!!.origin.value)))
        assertTrue(stringMatch("%.2f".format(10f), "%.2f".format(obj.component[0].valueSampledData!!.period)))
        assertTrue(stringMatch("%.2f".format(1.612f), "%.2f".format(obj.component[0].valueSampledData!!.factor)))
        assertTrue(stringMatch("%.2f".format(-3300f), "%.2f".format(obj.component[0].valueSampledData!!.lowerLimit)))
        assertTrue(stringMatch("%.2f".format(3300f), "%.2f".format(obj.component[0].valueSampledData!!.upperLimit)))
        assertEquals(1, obj.component[0].valueSampledData!!.dimensions)
        assertTrue(stringMatch("2041 2043 2037 2047 2060 2062", obj.component[0].valueSampledData!!.data))
        assertTrue(stringMatch("urn:oid:2.16.840.1.113883.6.2", obj.component[1].code.coding[0].system))
        assertTrue(stringMatch("131330", obj.component[1].code.coding[0].code))
        assertTrue(stringMatch("MDC_ECG_ELEC_POTL_II", obj.component[1].code.coding[0].display))
        assertTrue(stringMatch("%.2f".format(2048f), "%.2f".format(obj.component[1].valueSampledData!!.origin.value)))
        assertTrue(stringMatch("%.2f".format(10f), "%.2f".format(obj.component[1].valueSampledData!!.period)))
        assertTrue(stringMatch("%.2f".format(1.612f), "%.2f".format(obj.component[1].valueSampledData!!.factor)))
        assertTrue(stringMatch("%.2f".format(-3300f), "%.2f".format(obj.component[1].valueSampledData!!.lowerLimit)))
        assertTrue(stringMatch("%.2f".format(3300f), "%.2f".format(obj.component[1].valueSampledData!!.upperLimit)))
        assertEquals(1, obj.component[1].valueSampledData!!.dimensions)
        assertTrue(stringMatch("2041 2043 2037 2047 2060 2062", obj.component[1].valueSampledData!!.data))
        assertTrue(stringMatch("urn:oid:2.16.840.1.113883.6.2", obj.component[2].code.coding[0].system))
        assertTrue(stringMatch("131389", obj.component[2].code.coding[0].code))
        assertTrue(stringMatch("MDC_ECG_ELEC_POTL_III", obj.component[2].code.coding[0].display))
        assertTrue(stringMatch("%.2f".format(2048f), "%.2f".format(obj.component[2].valueSampledData!!.origin.value)))
        assertTrue(stringMatch("%.2f".format(10f), "%.2f".format(obj.component[2].valueSampledData!!.period)))
        assertTrue(stringMatch("%.2f".format(1.612f), "%.2f".format(obj.component[2].valueSampledData!!.factor)))
        assertTrue(stringMatch("%.2f".format(-3300f), "%.2f".format(obj.component[2].valueSampledData!!.lowerLimit)))
        assertTrue(stringMatch("%.2f".format(3300f), "%.2f".format(obj.component[2].valueSampledData!!.upperLimit)))
        assertEquals(1, obj.component[2].valueSampledData!!.dimensions)
        assertTrue(stringMatch("2041 2043 2037 2047 2060 2062", obj.component[2].valueSampledData!!.data))
    }

    fun `observation-example-sample-data Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `observation-example-f005-hemoglobin 37 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-f005-hemoglobin.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("Observation", obj.resourceType))
        assertTrue(stringMatch("f005", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("official", obj.identifier[0].use))
        assertTrue(stringMatch("http://www.bmc.nl/zorgportal/", obj.identifier[0].system))
        assertTrue(stringMatch("6327", obj.identifier[0].value))
        assertTrue(stringMatch("final", obj.status))
        assertTrue(stringMatch("http://loinc.org", obj.code.coding[0].system))
        assertTrue(stringMatch("718-7", obj.code.coding[0].code))
        assertTrue(stringMatch("Hemoglobin [Mass/volume] in B", obj.code.coding[0].display))
        assertTrue(stringMatch("Patient/f001", obj.subject!!.reference))
        assertTrue(stringMatch("P. van de Heuvel", obj.subject!!.display))
        assertTrue(stringMatch("2013-04-05T10:30:10+01:00", obj.effectivePeriod!!.start))
        assertTrue(stringMatch("2013-04-05T10:30:10+01:00", obj.effectivePeriod!!.end))
        assertTrue(stringMatch("2013-04-05T15:30:10+01:00", obj.issued))
        assertTrue(stringMatch("Practitioner/f005", obj.performer[0].reference))
        assertTrue(stringMatch("A. Langeveld", obj.performer[0].display))
        assertTrue(stringMatch("%.2f".format(7.2f), "%.2f".format(obj.valueQuantity!!.value)))
        assertTrue(stringMatch("g/dl", obj.valueQuantity!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.valueQuantity!!.system))
        assertTrue(stringMatch("g/dL", obj.valueQuantity!!.code))
        assertTrue(stringMatch("http://hl7.org/fhir/v2/0078", obj.interpretation!!.coding[0].system))
        assertTrue(stringMatch("L", obj.interpretation!!.coding[0].code))
        assertTrue(stringMatch("Low", obj.interpretation!!.coding[0].display))
        assertTrue(stringMatch("%.2f".format(7.5f), "%.2f".format(obj.referenceRange[0].low!!.value)))
        assertTrue(stringMatch("g/dl", obj.referenceRange[0].low!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.referenceRange[0].low!!.system))
        assertTrue(stringMatch("g/dL", obj.referenceRange[0].low!!.code))
        assertTrue(stringMatch("%.2f".format(10f), "%.2f".format(obj.referenceRange[0].high!!.value)))
        assertTrue(stringMatch("g/dl", obj.referenceRange[0].high!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.referenceRange[0].high!!.system))
        assertTrue(stringMatch("g/dL", obj.referenceRange[0].high!!.code))
    }

    fun `observation-example-f005-hemoglobin Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `observation-example-f003-co2 38 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-f003-co2.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("Observation", obj.resourceType))
        assertTrue(stringMatch("f003", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("official", obj.identifier[0].use))
        assertTrue(stringMatch("http://www.bmc.nl/zorgportal/", obj.identifier[0].system))
        assertTrue(stringMatch("6325", obj.identifier[0].value))
        assertTrue(stringMatch("final", obj.status))
        assertTrue(stringMatch("http://loinc.org", obj.code.coding[0].system))
        assertTrue(stringMatch("11557-6", obj.code.coding[0].code))
        assertTrue(stringMatch("Carbon dioxide in blood", obj.code.coding[0].display))
        assertTrue(stringMatch("Patient/f001", obj.subject!!.reference))
        assertTrue(stringMatch("P. van de Heuvel", obj.subject!!.display))
        assertTrue(stringMatch("2013-04-02T10:30:10+01:00", obj.effectivePeriod!!.start))
        assertTrue(stringMatch("2013-04-05T10:30:10+01:00", obj.effectivePeriod!!.end))
        assertTrue(stringMatch("2013-04-03T15:30:10+01:00", obj.issued))
        assertTrue(stringMatch("Practitioner/f005", obj.performer[0].reference))
        assertTrue(stringMatch("A. Langeveld", obj.performer[0].display))
        assertTrue(stringMatch("%.2f".format(6.2f), "%.2f".format(obj.valueQuantity!!.value)))
        assertTrue(stringMatch("kPa", obj.valueQuantity!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.valueQuantity!!.system))
        assertTrue(stringMatch("kPa", obj.valueQuantity!!.code))
        assertTrue(stringMatch("http://hl7.org/fhir/v2/0078", obj.interpretation!!.coding[0].system))
        assertTrue(stringMatch("H", obj.interpretation!!.coding[0].code))
        assertTrue(stringMatch("High", obj.interpretation!!.coding[0].display))
        assertTrue(stringMatch("%.2f".format(4.8f), "%.2f".format(obj.referenceRange[0].low!!.value)))
        assertTrue(stringMatch("kPa", obj.referenceRange[0].low!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.referenceRange[0].low!!.system))
        assertTrue(stringMatch("kPa", obj.referenceRange[0].low!!.code))
        assertTrue(stringMatch("%.2f".format(6.0f), "%.2f".format(obj.referenceRange[0].high!!.value)))
        assertTrue(stringMatch("kPa", obj.referenceRange[0].high!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.referenceRange[0].high!!.system))
        assertTrue(stringMatch("kPa", obj.referenceRange[0].high!!.code))
    }

    fun `observation-example-f003-co2 Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `observation-example-1minute-apgar-score 39 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-1minute-apgar-score.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("Observation", obj.resourceType))
        assertTrue(stringMatch("1minute-apgar-score", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("Patient", (obj.contained[0] as Patient).resourceType))
        assertTrue(stringMatch("newborn", (obj.contained[0] as Patient).id))
        assertTrue(stringMatch("http://acmehealthcare/org/mrn", (obj.contained[0] as Patient).identifier[0].system))
        assertTrue(stringMatch("12345", (obj.contained[0] as Patient).identifier[0].value))
        assertEquals(true, if ((obj.contained[0] as Patient).active != null) (obj.contained[0] as Patient).active else false, "Field: (obj.contained[0] as Patient).active")
        assertTrue(stringMatch("Chalmers", (obj.contained[0] as Patient).name[0].family))
        assertTrue(stringMatch("Peter", (obj.contained[0] as Patient).name[0].given[0]))
        assertTrue(stringMatch("James", (obj.contained[0] as Patient).name[0].given[1]))
        assertTrue(stringMatch("male", (obj.contained[0] as Patient).gender))
        assertTrue(stringMatch("2016-05-18", (obj.contained[0] as Patient).birthDate))
        assertTrue(stringMatch("final", obj.status))
        assertTrue(stringMatch("http://hl7.org/fhir/observati", obj.category[0].coding[0].system))
        assertTrue(stringMatch("survey", obj.category[0].coding[0].code))
        assertTrue(stringMatch("Survey", obj.category[0].coding[0].display))
        assertTrue(stringMatch("Survey", obj.category[0].text))
        assertTrue(stringMatch("http://loinc.org", obj.code.coding[0].system))
        assertTrue(stringMatch("9272-6", obj.code.coding[0].code))
        assertTrue(stringMatch("1 minute Apgar Score", obj.code.coding[0].display))
        assertTrue(stringMatch("http://snomed.info/sct", obj.code.coding[1].system))
        assertTrue(stringMatch("169895004", obj.code.coding[1].code))
        assertTrue(stringMatch("Apgar at 1 minute", obj.code.coding[1].display))
        assertTrue(stringMatch("1 minute Apgar Score", obj.code.text))
        assertTrue(stringMatch("#newborn", obj.subject!!.reference))
        assertTrue(stringMatch("2016-05-18T22:33:22Z", obj.effectiveDateTime))
        assertTrue(stringMatch("Practitioner/example", obj.performer[0].reference))
        assertTrue(stringMatch("%.2f".format(0f), "%.2f".format(obj.valueQuantity!!.value)))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.valueQuantity!!.system))
        assertTrue(stringMatch("{score}", obj.valueQuantity!!.code))
        assertTrue(stringMatch("http://loinc.org", obj.component[0].code.coding[0].system))
        assertTrue(stringMatch("32406-1", obj.component[0].code.coding[0].code))
        assertTrue(stringMatch("1 minute Apgar Color", obj.component[0].code.coding[0].display))
        assertTrue(stringMatch("http://snomed.info/sct", obj.component[0].code.coding[1].system))
        assertTrue(stringMatch("249227004", obj.component[0].code.coding[1].code))
        assertTrue(stringMatch("Apgar color score", obj.component[0].code.coding[1].display))
        assertTrue(stringMatch("Apgar color score", obj.component[0].code.text))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.component[0].valueCodeableConcept!!.coding[0].extension[0].url))
        assertTrue(stringMatch("%.2f".format(0f), "%.2f".format(obj.component[0].valueCodeableConcept!!.coding[0].extension[0].valueDecimal)))
        assertTrue(stringMatch("http://loinc.org/la", obj.component[0].valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("LA6722-8", obj.component[0].valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("The baby's whole body is comp", obj.component[0].valueCodeableConcept!!.coding[0].display))
        assertTrue(stringMatch("http:/acme.ped/apgarcolor", obj.component[0].valueCodeableConcept!!.coding[1].system))
        assertTrue(stringMatch("0", obj.component[0].valueCodeableConcept!!.coding[1].code))
        assertTrue(stringMatch("0. The baby's whole body is c", obj.component[0].valueCodeableConcept!!.text))
        assertTrue(stringMatch("http://loinc.org", obj.component[1].code.coding[0].system))
        assertTrue(stringMatch("32407-9", obj.component[1].code.coding[0].code))
        assertTrue(stringMatch("1 minute Apgar Heart Rate", obj.component[1].code.coding[0].display))
        assertTrue(stringMatch("http://snomed.info/sct", obj.component[1].code.coding[1].system))
        assertTrue(stringMatch("249223000", obj.component[1].code.coding[1].code))
        assertTrue(stringMatch("Apgar heart rate score", obj.component[1].code.coding[1].display))
        assertTrue(stringMatch("Apgar respiratory effort scor", obj.component[1].code.text))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.component[1].valueCodeableConcept!!.coding[0].extension[0].url))
        assertTrue(stringMatch("%.2f".format(0f), "%.2f".format(obj.component[1].valueCodeableConcept!!.coding[0].extension[0].valueDecimal)))
        assertTrue(stringMatch("http://loinc.org/la", obj.component[1].valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("LA6716-0", obj.component[1].valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("No heart rate", obj.component[1].valueCodeableConcept!!.coding[0].display))
        assertTrue(stringMatch("http:/acme.ped/apgarheartrate", obj.component[1].valueCodeableConcept!!.coding[1].system))
        assertTrue(stringMatch("0", obj.component[1].valueCodeableConcept!!.coding[1].code))
        assertTrue(stringMatch("0. No heart rate", obj.component[1].valueCodeableConcept!!.text))
        assertTrue(stringMatch("http://loinc.org", obj.component[2].code.coding[0].system))
        assertTrue(stringMatch("32409-5", obj.component[2].code.coding[0].code))
        assertTrue(stringMatch("1 minute Apgar Reflex Irritab", obj.component[2].code.coding[0].display))
        assertTrue(stringMatch("http://snomed.info/sct", obj.component[2].code.coding[1].system))
        assertTrue(stringMatch("249226008", obj.component[2].code.coding[1].code))
        assertTrue(stringMatch("Apgar response to stimulus sc", obj.component[2].code.coding[1].display))
        assertTrue(stringMatch("Apgar response to stimulus sc", obj.component[2].code.text))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.component[2].valueCodeableConcept!!.coding[0].extension[0].url))
    }

    @Test
    fun `observation-example-1minute-apgar-score 40 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-1minute-apgar-score.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("%.2f".format(0f), "%.2f".format(obj.component[2].valueCodeableConcept!!.coding[0].extension[0].valueDecimal)))
        assertTrue(stringMatch("http://loinc.org/la", obj.component[2].valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("LA6719-4", obj.component[2].valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("No response to airways being ", obj.component[2].valueCodeableConcept!!.coding[0].display))
        assertTrue(stringMatch("http:/acme.ped/apgarreflexirr", obj.component[2].valueCodeableConcept!!.coding[1].system))
        assertTrue(stringMatch("0", obj.component[2].valueCodeableConcept!!.coding[1].code))
        assertTrue(stringMatch("0. No response to airways bei", obj.component[2].valueCodeableConcept!!.text))
        assertTrue(stringMatch("http://loinc.org", obj.component[3].code.coding[0].system))
        assertTrue(stringMatch("32408-7", obj.component[3].code.coding[0].code))
        assertTrue(stringMatch("1 minute Apgar Muscle Tone", obj.component[3].code.coding[0].display))
        assertTrue(stringMatch("http://snomed.info/sct", obj.component[3].code.coding[1].system))
        assertTrue(stringMatch("249225007", obj.component[3].code.coding[1].code))
        assertTrue(stringMatch("Apgar muscle tone score", obj.component[3].code.coding[1].display))
        assertTrue(stringMatch("Apgar muscle tone score", obj.component[3].code.text))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.component[3].valueCodeableConcept!!.coding[0].extension[0].url))
        assertTrue(stringMatch("%.2f".format(0f), "%.2f".format(obj.component[3].valueCodeableConcept!!.coding[0].extension[0].valueDecimal)))
        assertTrue(stringMatch("http://loinc.org/la", obj.component[3].valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("LA6713-7", obj.component[3].valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("Limp; no movement", obj.component[3].valueCodeableConcept!!.coding[0].display))
        assertTrue(stringMatch("http:/acme.ped/apgarmuscleton", obj.component[3].valueCodeableConcept!!.coding[1].system))
        assertTrue(stringMatch("0", obj.component[3].valueCodeableConcept!!.coding[1].code))
        assertTrue(stringMatch("0. Limp; no movement", obj.component[3].valueCodeableConcept!!.text))
        assertTrue(stringMatch("http://loinc.org", obj.component[4].code.coding[0].system))
        assertTrue(stringMatch("32410-3", obj.component[4].code.coding[0].code))
        assertTrue(stringMatch("1 minute Apgar Respiratory ef", obj.component[4].code.coding[0].display))
        assertTrue(stringMatch("http://snomed.info/sct", obj.component[4].code.coding[1].system))
        assertTrue(stringMatch("249224006", obj.component[4].code.coding[1].code))
        assertTrue(stringMatch("Apgar respiratory effort scor", obj.component[4].code.coding[1].display))
        assertTrue(stringMatch("Apgar respiratory effort scor", obj.component[4].code.text))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.component[4].valueCodeableConcept!!.coding[0].extension[0].url))
        assertTrue(stringMatch("%.2f".format(0f), "%.2f".format(obj.component[4].valueCodeableConcept!!.coding[0].extension[0].valueDecimal)))
        assertTrue(stringMatch("http://loinc.org/la", obj.component[4].valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("LA6725-1", obj.component[4].valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("Not breathing", obj.component[4].valueCodeableConcept!!.coding[0].display))
        assertTrue(stringMatch("http:/acme.ped/apgarrespirato", obj.component[4].valueCodeableConcept!!.coding[1].system))
        assertTrue(stringMatch("0", obj.component[4].valueCodeableConcept!!.coding[1].code))
        assertTrue(stringMatch("0. Not breathing", obj.component[4].valueCodeableConcept!!.text))
    }

    fun `observation-example-1minute-apgar-score Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `observation-example-genetics-3 41 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-genetics-3.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("Observation", obj.resourceType))
        assertTrue(stringMatch("example-genetics-3", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("final", obj.status))
        assertTrue(stringMatch("Further analysis", obj.code.text))
        assertTrue(stringMatch("Patient/example", obj.subject!!.reference))
        assertTrue(stringMatch("Molecular Lab Patient ID: HOS", obj.subject!!.display))
        assertTrue(stringMatch("2013-04-03T15:30:10+01:00", obj.issued))
        assertTrue(stringMatch("Practitioner/example", obj.performer[0].reference))
        assertTrue(stringMatch("Sequence Analysis Laboratory", obj.performer[0].display))
        assertTrue(stringMatch("The EGFR p.L858R mutation has", obj.comment))
        assertTrue(stringMatch("derived-from", obj.related[0].type))
        assertTrue(stringMatch("Observation/example-genetics-", obj.related[0].target.reference))
        assertTrue(stringMatch("ObservationForGenetics profil", obj.related[0].target.display))
    }

    fun `observation-example-genetics-3 Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `observation-example-bloodpressure 42 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-bloodpressure.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("Observation", obj.resourceType))
        assertTrue(stringMatch("blood-pressure", obj.id))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.meta!!.profile[0]))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("urn:ietf:rfc:3986", obj.identifier[0].system))
        assertTrue(stringMatch("urn:uuid:187e0c12-8dd2-67e2-9", obj.identifier[0].value))
        assertTrue(stringMatch("https://acme.org/identifiers", obj.basedOn[0].identifier!!.system))
        assertTrue(stringMatch("1234", obj.basedOn[0].identifier!!.value))
        assertTrue(stringMatch("final", obj.status))
        assertTrue(stringMatch("http://hl7.org/fhir/observati", obj.category[0].coding[0].system))
        assertTrue(stringMatch("vital-signs", obj.category[0].coding[0].code))
        assertTrue(stringMatch("Vital Signs", obj.category[0].coding[0].display))
        assertTrue(stringMatch("http://loinc.org", obj.code.coding[0].system))
        assertTrue(stringMatch("85354-9", obj.code.coding[0].code))
        assertTrue(stringMatch("Bood pressure panel with all ", obj.code.coding[0].display))
        assertTrue(stringMatch("Blood pressure systolic & dia", obj.code.text))
        assertTrue(stringMatch("Patient/example", obj.subject!!.reference))
        assertTrue(stringMatch("2012-09-17", obj.effectiveDateTime))
        assertTrue(stringMatch("Practitioner/example", obj.performer[0].reference))
        assertTrue(stringMatch("http://hl7.org/fhir/v2/0078", obj.interpretation!!.coding[0].system))
        assertTrue(stringMatch("L", obj.interpretation!!.coding[0].code))
        assertTrue(stringMatch("low", obj.interpretation!!.coding[0].display))
        assertTrue(stringMatch("Below low normal", obj.interpretation!!.text))
        assertTrue(stringMatch("http://snomed.info/sct", obj.bodySite!!.coding[0].system))
        assertTrue(stringMatch("368209003", obj.bodySite!!.coding[0].code))
        assertTrue(stringMatch("Right arm", obj.bodySite!!.coding[0].display))
        assertTrue(stringMatch("http://loinc.org", obj.component[0].code.coding[0].system))
        assertTrue(stringMatch("8480-6", obj.component[0].code.coding[0].code))
        assertTrue(stringMatch("Systolic blood pressure", obj.component[0].code.coding[0].display))
        assertTrue(stringMatch("http://snomed.info/sct", obj.component[0].code.coding[1].system))
        assertTrue(stringMatch("271649006", obj.component[0].code.coding[1].code))
        assertTrue(stringMatch("Systolic blood pressure", obj.component[0].code.coding[1].display))
        assertTrue(stringMatch("http://acme.org/devices/clini", obj.component[0].code.coding[2].system))
        assertTrue(stringMatch("bp-s", obj.component[0].code.coding[2].code))
        assertTrue(stringMatch("Systolic Blood pressure", obj.component[0].code.coding[2].display))
        assertTrue(stringMatch("%.2f".format(107f), "%.2f".format(obj.component[0].valueQuantity!!.value)))
        assertTrue(stringMatch("mmHg", obj.component[0].valueQuantity!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.component[0].valueQuantity!!.system))
        assertTrue(stringMatch("mm[Hg]", obj.component[0].valueQuantity!!.code))
        assertTrue(stringMatch("http://hl7.org/fhir/v2/0078", obj.component[0].interpretation!!.coding[0].system))
        assertTrue(stringMatch("N", obj.component[0].interpretation!!.coding[0].code))
        assertTrue(stringMatch("normal", obj.component[0].interpretation!!.coding[0].display))
        assertTrue(stringMatch("Normal", obj.component[0].interpretation!!.text))
        assertTrue(stringMatch("http://loinc.org", obj.component[1].code.coding[0].system))
        assertTrue(stringMatch("8462-4", obj.component[1].code.coding[0].code))
        assertTrue(stringMatch("Diastolic blood pressure", obj.component[1].code.coding[0].display))
        assertTrue(stringMatch("%.2f".format(60f), "%.2f".format(obj.component[1].valueQuantity!!.value)))
        assertTrue(stringMatch("mmHg", obj.component[1].valueQuantity!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.component[1].valueQuantity!!.system))
        assertTrue(stringMatch("mm[Hg]", obj.component[1].valueQuantity!!.code))
        assertTrue(stringMatch("http://hl7.org/fhir/v2/0078", obj.component[1].interpretation!!.coding[0].system))
        assertTrue(stringMatch("L", obj.component[1].interpretation!!.coding[0].code))
        assertTrue(stringMatch("low", obj.component[1].interpretation!!.coding[0].display))
        assertTrue(stringMatch("Below low normal", obj.component[1].interpretation!!.text))
    }

    fun `observation-example-bloodpressure Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `observation-example-haplotype1 43 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-haplotype1.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("Observation", obj.resourceType))
        assertTrue(stringMatch("example-haplotype1", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.extension[0].url))
        assertTrue(stringMatch("http://www.genenames.org", obj.extension[0].valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("2625", obj.extension[0].valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("CYP2D6", obj.extension[0].valueCodeableConcept!!.coding[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.extension[1].url))
        assertTrue(stringMatch("Sequence/example-sequence1", obj.extension[1].valueReference!!.reference))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.extension[2].url))
        assertTrue(stringMatch("Sequence/example-sequence2", obj.extension[2].valueReference!!.reference))
        assertTrue(stringMatch("unknown", obj.status))
        assertTrue(stringMatch("http://loinc.org", obj.code.coding[0].system))
        assertTrue(stringMatch("55233-1", obj.code.coding[0].code))
        assertTrue(stringMatch("Genetic analysis master panel", obj.code.coding[0].display))
        assertTrue(stringMatch("Patient/727127", obj.subject!!.reference))
        assertTrue(stringMatch("J*********** C***********", obj.subject!!.display))
        assertTrue(stringMatch("2013-04-03T15:30:10+01:00", obj.issued))
        assertTrue(stringMatch("http://pharmakb.org", obj.valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("PA165971587", obj.valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("*35B", obj.valueCodeableConcept!!.coding[0].display))
        assertTrue(stringMatch("Specimen/genetics-example1-so", obj.specimen!!.reference))
        assertTrue(stringMatch("Molecular Specimen ID: MLD45-", obj.specimen!!.display))
        assertTrue(stringMatch("derived-from", obj.related[0].type))
        assertTrue(stringMatch("Sequence/example-pgx-1", obj.related[0].target.reference))
        assertTrue(stringMatch("derived-from", obj.related[1].type))
        assertTrue(stringMatch("Sequence/example-pgx-2", obj.related[1].target.reference))
    }

    fun `observation-example-haplotype1 Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `observation-example-body-length 44 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-body-length.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("Observation", obj.resourceType))
        assertTrue(stringMatch("body-length", obj.id))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.meta!!.profile[0]))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("final", obj.status))
        assertTrue(stringMatch("http://hl7.org/fhir/observati", obj.category[0].coding[0].system))
        assertTrue(stringMatch("vital-signs", obj.category[0].coding[0].code))
        assertTrue(stringMatch("Vital Signs", obj.category[0].coding[0].display))
        assertTrue(stringMatch("Vital Signs", obj.category[0].text))
        assertTrue(stringMatch("http://loinc.org", obj.code.coding[0].system))
        assertTrue(stringMatch("8306-3", obj.code.coding[0].code))
        assertTrue(stringMatch("Body height --lying", obj.code.coding[0].display))
        assertTrue(stringMatch("Body Length", obj.code.text))
        assertTrue(stringMatch("Patient/example", obj.subject!!.reference))
        assertTrue(stringMatch("1999-07-02", obj.effectiveDateTime))
        assertTrue(stringMatch("%.2f".format(25f), "%.2f".format(obj.valueQuantity!!.value)))
        assertTrue(stringMatch("cm", obj.valueQuantity!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.valueQuantity!!.system))
        assertTrue(stringMatch("cm", obj.valueQuantity!!.code))
    }

    fun `observation-example-body-length Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `observation-example-5minute-apgar-score 45 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-5minute-apgar-score.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("Observation", obj.resourceType))
        assertTrue(stringMatch("5minute-apgar-score", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("Patient", (obj.contained[0] as Patient).resourceType))
        assertTrue(stringMatch("newborn", (obj.contained[0] as Patient).id))
        assertTrue(stringMatch("http://acmehealthcare/org/mrn", (obj.contained[0] as Patient).identifier[0].system))
        assertTrue(stringMatch("12345", (obj.contained[0] as Patient).identifier[0].value))
        assertEquals(true, if ((obj.contained[0] as Patient).active != null) (obj.contained[0] as Patient).active else false, "Field: (obj.contained[0] as Patient).active")
        assertTrue(stringMatch("Chalmers", (obj.contained[0] as Patient).name[0].family))
        assertTrue(stringMatch("Peter", (obj.contained[0] as Patient).name[0].given[0]))
        assertTrue(stringMatch("James", (obj.contained[0] as Patient).name[0].given[1]))
        assertTrue(stringMatch("male", (obj.contained[0] as Patient).gender))
        assertTrue(stringMatch("2016-05-18", (obj.contained[0] as Patient).birthDate))
        assertTrue(stringMatch("final", obj.status))
        assertTrue(stringMatch("http://hl7.org/fhir/observati", obj.category[0].coding[0].system))
        assertTrue(stringMatch("survey", obj.category[0].coding[0].code))
        assertTrue(stringMatch("Survey", obj.category[0].coding[0].display))
        assertTrue(stringMatch("Survey", obj.category[0].text))
        assertTrue(stringMatch("http://loinc.org", obj.code.coding[0].system))
        assertTrue(stringMatch("9274-2", obj.code.coding[0].code))
        assertTrue(stringMatch("5 minute Apgar Score", obj.code.coding[0].display))
        assertTrue(stringMatch("http://snomed.info/sct", obj.code.coding[1].system))
        assertTrue(stringMatch("169909004", obj.code.coding[1].code))
        assertTrue(stringMatch("Apgar at 5 minutes", obj.code.coding[1].display))
        assertTrue(stringMatch("5 minute Apgar Score", obj.code.text))
        assertTrue(stringMatch("#newborn", obj.subject!!.reference))
        assertTrue(stringMatch("2016-05-18T22:33:22Z", obj.effectiveDateTime))
        assertTrue(stringMatch("Practitioner/example", obj.performer[0].reference))
        assertTrue(stringMatch("%.2f".format(10f), "%.2f".format(obj.valueQuantity!!.value)))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.valueQuantity!!.system))
        assertTrue(stringMatch("{score}", obj.valueQuantity!!.code))
        assertTrue(stringMatch("http://loinc.org", obj.component[0].code.coding[0].system))
        assertTrue(stringMatch("32411-1", obj.component[0].code.coding[0].code))
        assertTrue(stringMatch("5 minute Apgar Color", obj.component[0].code.coding[0].display))
        assertTrue(stringMatch("http://snomed.info/sct", obj.component[0].code.coding[1].system))
        assertTrue(stringMatch("249227004", obj.component[0].code.coding[1].code))
        assertTrue(stringMatch("Apgar color score", obj.component[0].code.coding[1].display))
        assertTrue(stringMatch("Apgar color score", obj.component[0].code.text))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.component[0].valueCodeableConcept!!.coding[0].extension[0].url))
        assertTrue(stringMatch("%.2f".format(2f), "%.2f".format(obj.component[0].valueCodeableConcept!!.coding[0].extension[0].valueDecimal)))
        assertTrue(stringMatch("http://loinc.org/la", obj.component[0].valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("LA6724-4", obj.component[0].valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("Good color all over", obj.component[0].valueCodeableConcept!!.coding[0].display))
        assertTrue(stringMatch("http:/acme.ped/apgarcolor", obj.component[0].valueCodeableConcept!!.coding[1].system))
        assertTrue(stringMatch("2", obj.component[0].valueCodeableConcept!!.coding[1].code))
        assertTrue(stringMatch("2. Good color all over", obj.component[0].valueCodeableConcept!!.text))
        assertTrue(stringMatch("http://loinc.org", obj.component[1].code.coding[0].system))
        assertTrue(stringMatch("32412-9", obj.component[1].code.coding[0].code))
        assertTrue(stringMatch("5 minute Apgar Heart Rate", obj.component[1].code.coding[0].display))
        assertTrue(stringMatch("http://snomed.info/sct", obj.component[1].code.coding[1].system))
        assertTrue(stringMatch("249223000", obj.component[1].code.coding[1].code))
        assertTrue(stringMatch("Apgar heart rate score", obj.component[1].code.coding[1].display))
        assertTrue(stringMatch("Apgar respiratory effort scor", obj.component[1].code.text))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.component[1].valueCodeableConcept!!.coding[0].extension[0].url))
        assertTrue(stringMatch("%.2f".format(2f), "%.2f".format(obj.component[1].valueCodeableConcept!!.coding[0].extension[0].valueDecimal)))
        assertTrue(stringMatch("http://loinc.org/la", obj.component[1].valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("LA6718-6", obj.component[1].valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("At least 100 beats per minute", obj.component[1].valueCodeableConcept!!.coding[0].display))
        assertTrue(stringMatch("http:/acme.ped/apgarheartrate", obj.component[1].valueCodeableConcept!!.coding[1].system))
        assertTrue(stringMatch("2", obj.component[1].valueCodeableConcept!!.coding[1].code))
        assertTrue(stringMatch("2. At least 100 beats per min", obj.component[1].valueCodeableConcept!!.text))
        assertTrue(stringMatch("http://loinc.org", obj.component[2].code.coding[0].system))
        assertTrue(stringMatch("32414-5", obj.component[2].code.coding[0].code))
        assertTrue(stringMatch("5 minute Apgar Reflex Irritab", obj.component[2].code.coding[0].display))
        assertTrue(stringMatch("http://snomed.info/sct", obj.component[2].code.coding[1].system))
        assertTrue(stringMatch("249226008", obj.component[2].code.coding[1].code))
        assertTrue(stringMatch("Apgar response to stimulus sc", obj.component[2].code.coding[1].display))
        assertTrue(stringMatch("Apgar response to stimulus sc", obj.component[2].code.text))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.component[2].valueCodeableConcept!!.coding[0].extension[0].url))
        assertTrue(stringMatch("%.2f".format(2f), "%.2f".format(obj.component[2].valueCodeableConcept!!.coding[0].extension[0].valueDecimal)))
        assertTrue(stringMatch("http://loinc.org/la", obj.component[2].valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("LA6721-0", obj.component[2].valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("Grimace and pulling away, cou", obj.component[2].valueCodeableConcept!!.coding[0].display))
        assertTrue(stringMatch("http:/acme.ped/apgarreflexirr", obj.component[2].valueCodeableConcept!!.coding[1].system))
        assertTrue(stringMatch("2", obj.component[2].valueCodeableConcept!!.coding[1].code))
        assertTrue(stringMatch("2. Grimace and pulling away, ", obj.component[2].valueCodeableConcept!!.text))
        assertTrue(stringMatch("http://loinc.org", obj.component[3].code.coding[0].system))
        assertTrue(stringMatch("32413-7", obj.component[3].code.coding[0].code))
        assertTrue(stringMatch("5 minute Apgar Muscle Tone", obj.component[3].code.coding[0].display))
        assertTrue(stringMatch("http://snomed.info/sct", obj.component[3].code.coding[1].system))
        assertTrue(stringMatch("249225007", obj.component[3].code.coding[1].code))
        assertTrue(stringMatch("Apgar muscle tone score", obj.component[3].code.coding[1].display))
        assertTrue(stringMatch("Apgar muscle tone score", obj.component[3].code.text))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.component[3].valueCodeableConcept!!.coding[0].extension[0].url))
        assertTrue(stringMatch("%.2f".format(2f), "%.2f".format(obj.component[3].valueCodeableConcept!!.coding[0].extension[0].valueDecimal)))
        assertTrue(stringMatch("http://loinc.org/la", obj.component[3].valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("LA6715-2", obj.component[3].valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("Active motion ", obj.component[3].valueCodeableConcept!!.coding[0].display))
        assertTrue(stringMatch("http:/acme.ped/apgarmuscleton", obj.component[3].valueCodeableConcept!!.coding[1].system))
        assertTrue(stringMatch("2", obj.component[3].valueCodeableConcept!!.coding[1].code))
        assertTrue(stringMatch("2. Active motion", obj.component[3].valueCodeableConcept!!.text))
        assertTrue(stringMatch("http://loinc.org", obj.component[4].code.coding[0].system))
        assertTrue(stringMatch("32415-2", obj.component[4].code.coding[0].code))
        assertTrue(stringMatch("5 minute Apgar Respiratory ef", obj.component[4].code.coding[0].display))
        assertTrue(stringMatch("http://snomed.info/sct", obj.component[4].code.coding[1].system))
        assertTrue(stringMatch("249224006", obj.component[4].code.coding[1].code))
        assertTrue(stringMatch("Apgar respiratory effort scor", obj.component[4].code.coding[1].display))
        assertTrue(stringMatch("Apgar respiratory effort scor", obj.component[4].code.text))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.component[4].valueCodeableConcept!!.coding[0].extension[0].url))
        assertTrue(stringMatch("%.2f".format(2f), "%.2f".format(obj.component[4].valueCodeableConcept!!.coding[0].extension[0].valueDecimal)))
        assertTrue(stringMatch("http://loinc.org/la", obj.component[4].valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("LA6727-7", obj.component[4].valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("Good, strong cry; normal rate", obj.component[4].valueCodeableConcept!!.coding[0].display))
        assertTrue(stringMatch("http:/acme.ped/apgarrespirato", obj.component[4].valueCodeableConcept!!.coding[1].system))
        assertTrue(stringMatch("2", obj.component[4].valueCodeableConcept!!.coding[1].code))
        assertTrue(stringMatch("2. Good, strong cry; normal r", obj.component[4].valueCodeableConcept!!.text))
    }

    fun `observation-example-5minute-apgar-score Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `observation-example-diplotype1 46 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-diplotype1.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("Observation", obj.resourceType))
        assertTrue(stringMatch("example-diplotype1", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.extension[0].url))
        assertTrue(stringMatch("http://www.genenames.org", obj.extension[0].valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("2623", obj.extension[0].valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("CYP2C9", obj.extension[0].valueCodeableConcept!!.coding[0].display))
        assertTrue(stringMatch("final", obj.status))
        assertTrue(stringMatch("http://snomed.info", obj.code.coding[0].system))
        assertTrue(stringMatch("363779003", obj.code.coding[0].code))
        assertTrue(stringMatch("Genotype determination", obj.code.coding[0].display))
        assertTrue(stringMatch("Diplotype Call", obj.code.text))
        assertTrue(stringMatch("Patient/727127", obj.subject!!.reference))
        assertTrue(stringMatch("J*********** C***********", obj.subject!!.display))
        assertTrue(stringMatch("2013-04-03T15:30:10+01:00", obj.issued))
        assertTrue(stringMatch("Specimen/genetics-example1-so", obj.specimen!!.reference))
        assertTrue(stringMatch("Molecular Specimen ID: MLD45-", obj.specimen!!.display))
        assertTrue(stringMatch("derived-from", obj.related[0].type))
        assertTrue(stringMatch("Observation/example-haplotype", obj.related[0].target.reference))
        assertTrue(stringMatch("derived-from", obj.related[1].type))
        assertTrue(stringMatch("Observation/example-haplotype", obj.related[1].target.reference))
    }

    fun `observation-example-diplotype1 Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `observation-example-heart-rate 47 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-heart-rate.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("Observation", obj.resourceType))
        assertTrue(stringMatch("heart-rate", obj.id))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.meta!!.profile[0]))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("final", obj.status))
        assertTrue(stringMatch("http://hl7.org/fhir/observati", obj.category[0].coding[0].system))
        assertTrue(stringMatch("vital-signs", obj.category[0].coding[0].code))
        assertTrue(stringMatch("Vital Signs", obj.category[0].coding[0].display))
        assertTrue(stringMatch("Vital Signs", obj.category[0].text))
        assertTrue(stringMatch("http://loinc.org", obj.code.coding[0].system))
        assertTrue(stringMatch("8867-4", obj.code.coding[0].code))
        assertTrue(stringMatch("Heart rate", obj.code.coding[0].display))
        assertTrue(stringMatch("Heart rate", obj.code.text))
        assertTrue(stringMatch("Patient/example", obj.subject!!.reference))
        assertTrue(stringMatch("1999-07-02", obj.effectiveDateTime))
        assertTrue(stringMatch("%.2f".format(44f), "%.2f".format(obj.valueQuantity!!.value)))
        assertTrue(stringMatch("beats/minute", obj.valueQuantity!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.valueQuantity!!.system))
        assertTrue(stringMatch("/min", obj.valueQuantity!!.code))
    }

    fun `observation-example-heart-rate Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `observation-example-bloodpressure-dar 48 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-bloodpressure-dar.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("Observation", obj.resourceType))
        assertTrue(stringMatch("blood-pressure-dar", obj.id))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.meta!!.profile[0]))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("urn:ietf:rfc:3986", obj.identifier[0].system))
        assertTrue(stringMatch("urn:uuid:187e0c12-8dd2-67e2-9", obj.identifier[0].value))
        assertTrue(stringMatch("final", obj.status))
        assertTrue(stringMatch("http://hl7.org/fhir/observati", obj.category[0].coding[0].system))
        assertTrue(stringMatch("vital-signs", obj.category[0].coding[0].code))
        assertTrue(stringMatch("Vital Signs", obj.category[0].coding[0].display))
        assertTrue(stringMatch("http://loinc.org", obj.code.coding[0].system))
        assertTrue(stringMatch("85354-9", obj.code.coding[0].code))
        assertTrue(stringMatch("Bood pressure panel with all ", obj.code.coding[0].display))
        assertTrue(stringMatch("Blood pressure systolic & dia", obj.code.text))
        assertTrue(stringMatch("Patient/example", obj.subject!!.reference))
        assertTrue(stringMatch("2012-09-17", obj.effectiveDateTime))
        assertTrue(stringMatch("Practitioner/example", obj.performer[0].reference))
        assertTrue(stringMatch("http://hl7.org/fhir/v2/0078", obj.interpretation!!.coding[0].system))
        assertTrue(stringMatch("L", obj.interpretation!!.coding[0].code))
        assertTrue(stringMatch("low", obj.interpretation!!.coding[0].display))
        assertTrue(stringMatch("Below low normal", obj.interpretation!!.text))
        assertTrue(stringMatch("http://snomed.info/sct", obj.bodySite!!.coding[0].system))
        assertTrue(stringMatch("368209003", obj.bodySite!!.coding[0].code))
        assertTrue(stringMatch("Right arm", obj.bodySite!!.coding[0].display))
        assertTrue(stringMatch("http://loinc.org", obj.component[0].code.coding[0].system))
        assertTrue(stringMatch("8480-6", obj.component[0].code.coding[0].code))
        assertTrue(stringMatch("Systolic blood pressure", obj.component[0].code.coding[0].display))
        assertTrue(stringMatch("http://snomed.info/sct", obj.component[0].code.coding[1].system))
        assertTrue(stringMatch("271649006", obj.component[0].code.coding[1].code))
        assertTrue(stringMatch("Systolic blood pressure", obj.component[0].code.coding[1].display))
        assertTrue(stringMatch("http://acme.org/devices/clini", obj.component[0].code.coding[2].system))
        assertTrue(stringMatch("bp-s", obj.component[0].code.coding[2].code))
        assertTrue(stringMatch("Systolic Blood pressure", obj.component[0].code.coding[2].display))
        assertTrue(stringMatch("%.2f".format(107f), "%.2f".format(obj.component[0].valueQuantity!!.value)))
        assertTrue(stringMatch("mmHg", obj.component[0].valueQuantity!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.component[0].valueQuantity!!.system))
        assertTrue(stringMatch("mm[Hg]", obj.component[0].valueQuantity!!.code))
        assertTrue(stringMatch("http://loinc.org", obj.component[1].code.coding[0].system))
        assertTrue(stringMatch("8462-4", obj.component[1].code.coding[0].code))
        assertTrue(stringMatch("Diastolic blood pressure", obj.component[1].code.coding[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/data-abse", obj.component[1].dataAbsentReason!!.coding[0].system))
        assertTrue(stringMatch("not-performed", obj.component[1].dataAbsentReason!!.coding[0].code))
        assertTrue(stringMatch("Not Performed", obj.component[1].dataAbsentReason!!.coding[0].display))
    }

    fun `observation-example-bloodpressure-dar Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `observation-example-f202-temperature 49 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-f202-temperature.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("Observation", obj.resourceType))
        assertTrue(stringMatch("f202", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("entered-in-error", obj.status))
        assertTrue(stringMatch("http://hl7.org/fhir/observati", obj.category[0].coding[0].system))
        assertTrue(stringMatch("vital-signs", obj.category[0].coding[0].code))
        assertTrue(stringMatch("Vital Signs", obj.category[0].coding[0].display))
        assertTrue(stringMatch("http://acme.lab", obj.code.coding[0].system))
        assertTrue(stringMatch("BT", obj.code.coding[0].code))
        assertTrue(stringMatch("Body temperature", obj.code.coding[0].display))
        assertTrue(stringMatch("http://loinc.org", obj.code.coding[1].system))
        assertTrue(stringMatch("8310-5", obj.code.coding[1].code))
        assertTrue(stringMatch("Body temperature", obj.code.coding[1].display))
        assertTrue(stringMatch("http://loinc.org", obj.code.coding[2].system))
        assertTrue(stringMatch("8331-1", obj.code.coding[2].code))
        assertTrue(stringMatch("Oral temperature", obj.code.coding[2].display))
        assertTrue(stringMatch("http://snomed.info/sct", obj.code.coding[3].system))
        assertTrue(stringMatch("56342008", obj.code.coding[3].code))
        assertTrue(stringMatch("Temperature taking", obj.code.coding[3].display))
        assertTrue(stringMatch("Temperature", obj.code.text))
        assertTrue(stringMatch("Patient/f201", obj.subject!!.reference))
        assertTrue(stringMatch("Roel", obj.subject!!.display))
        assertTrue(stringMatch("2013-04-04T13:27:00+01:00", obj.issued))
        assertTrue(stringMatch("Practitioner/f201", obj.performer[0].reference))
        assertTrue(stringMatch("%.2f".format(39f), "%.2f".format(obj.valueQuantity!!.value)))
        assertTrue(stringMatch("degrees C", obj.valueQuantity!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.valueQuantity!!.system))
        assertTrue(stringMatch("Cel", obj.valueQuantity!!.code))
        assertTrue(stringMatch("http://hl7.org/fhir/v2/0078", obj.interpretation!!.coding[0].system))
        assertTrue(stringMatch("H", obj.interpretation!!.coding[0].code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.bodySite!!.coding[0].system))
        assertTrue(stringMatch("74262004", obj.bodySite!!.coding[0].code))
        assertTrue(stringMatch("Oral cavity", obj.bodySite!!.coding[0].display))
        assertTrue(stringMatch("http://snomed.info/sct", obj.method!!.coding[0].system))
        assertTrue(stringMatch("89003005", obj.method!!.coding[0].code))
        assertTrue(stringMatch("Oral temperature taking", obj.method!!.coding[0].display))
        assertTrue(stringMatch("%.2f".format(38.2f), "%.2f".format(obj.referenceRange[0].high!!.value)))
        assertTrue(stringMatch("degrees C", obj.referenceRange[0].high!!.unit))
    }

    fun `observation-example-f202-temperature Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `observation-example-20minute-apgar-score 50 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-20minute-apgar-score.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("Observation", obj.resourceType))
        assertTrue(stringMatch("20minute-apgar-score", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("Patient", (obj.contained[0] as Patient).resourceType))
        assertTrue(stringMatch("newborn", (obj.contained[0] as Patient).id))
        assertTrue(stringMatch("http://acmehealthcare/org/mrn", (obj.contained[0] as Patient).identifier[0].system))
        assertTrue(stringMatch("12345", (obj.contained[0] as Patient).identifier[0].value))
        assertEquals(true, if ((obj.contained[0] as Patient).active != null) (obj.contained[0] as Patient).active else false, "Field: (obj.contained[0] as Patient).active")
        assertTrue(stringMatch("Chalmers", (obj.contained[0] as Patient).name[0].family))
        assertTrue(stringMatch("Peter", (obj.contained[0] as Patient).name[0].given[0]))
        assertTrue(stringMatch("James", (obj.contained[0] as Patient).name[0].given[1]))
        assertTrue(stringMatch("male", (obj.contained[0] as Patient).gender))
        assertTrue(stringMatch("2016-05-18", (obj.contained[0] as Patient).birthDate))
        assertTrue(stringMatch("final", obj.status))
        assertTrue(stringMatch("http://hl7.org/fhir/observati", obj.category[0].coding[0].system))
        assertTrue(stringMatch("survey", obj.category[0].coding[0].code))
        assertTrue(stringMatch("Survey", obj.category[0].coding[0].display))
        assertTrue(stringMatch("Survey", obj.category[0].text))
        assertTrue(stringMatch("http://snomed.info/sct", obj.code.coding[0].system))
        assertTrue(stringMatch("443849008", obj.code.coding[0].code))
        assertTrue(stringMatch("Apgar score at 20 minutes", obj.code.coding[0].display))
        assertTrue(stringMatch("20 minute Apgar Score", obj.code.text))
        assertTrue(stringMatch("#newborn", obj.subject!!.reference))
        assertTrue(stringMatch("2016-05-18T22:33:22Z", obj.effectiveDateTime))
        assertTrue(stringMatch("Practitioner/example", obj.performer[0].reference))
        assertTrue(stringMatch("%.2f".format(10f), "%.2f".format(obj.valueQuantity!!.value)))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.valueQuantity!!.system))
        assertTrue(stringMatch("{score}", obj.valueQuantity!!.code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.component[0].code.coding[0].system))
        assertTrue(stringMatch("249227004", obj.component[0].code.coding[0].code))
        assertTrue(stringMatch("Apgar color score", obj.component[0].code.coding[0].display))
        assertTrue(stringMatch("Apgar color score", obj.component[0].code.text))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.component[0].valueCodeableConcept!!.coding[0].extension[0].url))
        assertTrue(stringMatch("%.2f".format(2f), "%.2f".format(obj.component[0].valueCodeableConcept!!.coding[0].extension[0].valueDecimal)))
        assertTrue(stringMatch("http://loinc.org/la", obj.component[0].valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("LA6724-4", obj.component[0].valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("Good color all over", obj.component[0].valueCodeableConcept!!.coding[0].display))
        assertTrue(stringMatch("http:/acme.ped/apgarcolor", obj.component[0].valueCodeableConcept!!.coding[1].system))
        assertTrue(stringMatch("2", obj.component[0].valueCodeableConcept!!.coding[1].code))
        assertTrue(stringMatch("2. Good color all over", obj.component[0].valueCodeableConcept!!.text))
        assertTrue(stringMatch("http://snomed.info/sct", obj.component[1].code.coding[0].system))
        assertTrue(stringMatch("249223000", obj.component[1].code.coding[0].code))
        assertTrue(stringMatch("Apgar heart rate score", obj.component[1].code.coding[0].display))
        assertTrue(stringMatch("Apgar respiratory effort scor", obj.component[1].code.text))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.component[1].valueCodeableConcept!!.coding[0].extension[0].url))
        assertTrue(stringMatch("%.2f".format(2f), "%.2f".format(obj.component[1].valueCodeableConcept!!.coding[0].extension[0].valueDecimal)))
        assertTrue(stringMatch("http://loinc.org/la", obj.component[1].valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("LA6718-6", obj.component[1].valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("At least 100 beats per minute", obj.component[1].valueCodeableConcept!!.coding[0].display))
        assertTrue(stringMatch("http:/acme.ped/apgarheartrate", obj.component[1].valueCodeableConcept!!.coding[1].system))
        assertTrue(stringMatch("2", obj.component[1].valueCodeableConcept!!.coding[1].code))
        assertTrue(stringMatch("2. At least 100 beats per min", obj.component[1].valueCodeableConcept!!.text))
        assertTrue(stringMatch("http://snomed.info/sct", obj.component[2].code.coding[0].system))
        assertTrue(stringMatch("249226008", obj.component[2].code.coding[0].code))
        assertTrue(stringMatch("Apgar response to stimulus sc", obj.component[2].code.coding[0].display))
        assertTrue(stringMatch("Apgar response to stimulus sc", obj.component[2].code.text))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.component[2].valueCodeableConcept!!.coding[0].extension[0].url))
        assertTrue(stringMatch("%.2f".format(2f), "%.2f".format(obj.component[2].valueCodeableConcept!!.coding[0].extension[0].valueDecimal)))
        assertTrue(stringMatch("http://loinc.org/la", obj.component[2].valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("LA6721-0", obj.component[2].valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("Grimace and pulling away, cou", obj.component[2].valueCodeableConcept!!.coding[0].display))
        assertTrue(stringMatch("http:/acme.ped/apgarreflexirr", obj.component[2].valueCodeableConcept!!.coding[1].system))
        assertTrue(stringMatch("2", obj.component[2].valueCodeableConcept!!.coding[1].code))
        assertTrue(stringMatch("2. Grimace and pulling away, ", obj.component[2].valueCodeableConcept!!.text))
        assertTrue(stringMatch("http://snomed.info/sct", obj.component[3].code.coding[0].system))
        assertTrue(stringMatch("249225007", obj.component[3].code.coding[0].code))
        assertTrue(stringMatch("Apgar muscle tone score", obj.component[3].code.coding[0].display))
        assertTrue(stringMatch("Apgar muscle tone score", obj.component[3].code.text))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.component[3].valueCodeableConcept!!.coding[0].extension[0].url))
        assertTrue(stringMatch("%.2f".format(2f), "%.2f".format(obj.component[3].valueCodeableConcept!!.coding[0].extension[0].valueDecimal)))
        assertTrue(stringMatch("http://loinc.org/la", obj.component[3].valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("LA6715-2", obj.component[3].valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("Active motion ", obj.component[3].valueCodeableConcept!!.coding[0].display))
        assertTrue(stringMatch("http:/acme.ped/apgarmuscleton", obj.component[3].valueCodeableConcept!!.coding[1].system))
        assertTrue(stringMatch("2", obj.component[3].valueCodeableConcept!!.coding[1].code))
        assertTrue(stringMatch("2. Active motion", obj.component[3].valueCodeableConcept!!.text))
        assertTrue(stringMatch("http://snomed.info/sct", obj.component[4].code.coding[0].system))
        assertTrue(stringMatch("249224006", obj.component[4].code.coding[0].code))
        assertTrue(stringMatch("Apgar respiratory effort scor", obj.component[4].code.coding[0].display))
        assertTrue(stringMatch("Apgar respiratory effort scor", obj.component[4].code.text))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.component[4].valueCodeableConcept!!.coding[0].extension[0].url))
        assertTrue(stringMatch("%.2f".format(2f), "%.2f".format(obj.component[4].valueCodeableConcept!!.coding[0].extension[0].valueDecimal)))
        assertTrue(stringMatch("http://loinc.org/la", obj.component[4].valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("LA6727-7", obj.component[4].valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("Good, strong cry; normal rate", obj.component[4].valueCodeableConcept!!.coding[0].display))
        assertTrue(stringMatch("http:/acme.ped/apgarrespirato", obj.component[4].valueCodeableConcept!!.coding[1].system))
        assertTrue(stringMatch("2", obj.component[4].valueCodeableConcept!!.coding[1].code))
        assertTrue(stringMatch("2. Good, strong cry; normal r", obj.component[4].valueCodeableConcept!!.text))
    }

    fun `observation-example-20minute-apgar-score Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `observation-example-f001-glucose 51 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-f001-glucose.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("Observation", obj.resourceType))
        assertTrue(stringMatch("f001", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("official", obj.identifier[0].use))
        assertTrue(stringMatch("http://www.bmc.nl/zorgportal/", obj.identifier[0].system))
        assertTrue(stringMatch("6323", obj.identifier[0].value))
        assertTrue(stringMatch("final", obj.status))
        assertTrue(stringMatch("http://loinc.org", obj.code.coding[0].system))
        assertTrue(stringMatch("15074-8", obj.code.coding[0].code))
        assertTrue(stringMatch("Glucose [Moles/volume] in Blo", obj.code.coding[0].display))
        assertTrue(stringMatch("Patient/f001", obj.subject!!.reference))
        assertTrue(stringMatch("P. van de Heuvel", obj.subject!!.display))
        assertTrue(stringMatch("2013-04-02T09:30:10+01:00", obj.effectivePeriod!!.start))
        assertTrue(stringMatch("2013-04-03T15:30:10+01:00", obj.issued))
        assertTrue(stringMatch("Practitioner/f005", obj.performer[0].reference))
        assertTrue(stringMatch("A. Langeveld", obj.performer[0].display))
        assertTrue(stringMatch("%.2f".format(6.3f), "%.2f".format(obj.valueQuantity!!.value)))
        assertTrue(stringMatch("mmol/l", obj.valueQuantity!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.valueQuantity!!.system))
        assertTrue(stringMatch("mmol/L", obj.valueQuantity!!.code))
        assertTrue(stringMatch("http://hl7.org/fhir/v2/0078", obj.interpretation!!.coding[0].system))
        assertTrue(stringMatch("H", obj.interpretation!!.coding[0].code))
        assertTrue(stringMatch("High", obj.interpretation!!.coding[0].display))
        assertTrue(stringMatch("%.2f".format(3.1f), "%.2f".format(obj.referenceRange[0].low!!.value)))
    }

    @Test
    fun `observation-example-f001-glucose 52 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-f001-glucose.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("mmol/l", obj.referenceRange[0].low!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.referenceRange[0].low!!.system))
        assertTrue(stringMatch("mmol/L", obj.referenceRange[0].low!!.code))
        assertTrue(stringMatch("%.2f".format(6.2f), "%.2f".format(obj.referenceRange[0].high!!.value)))
        assertTrue(stringMatch("mmol/l", obj.referenceRange[0].high!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.referenceRange[0].high!!.system))
        assertTrue(stringMatch("mmol/L", obj.referenceRange[0].high!!.code))
    }

    fun `observation-example-f001-glucose Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `observation-example-f203-bicarbonate 53 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-f203-bicarbonate.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("Observation", obj.resourceType))
        assertTrue(stringMatch("f203", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("https://intranet.aumc.nl/labv", obj.identifier[0].system))
        assertTrue(stringMatch("1304-03720-Bicarbonate", obj.identifier[0].value))
        assertTrue(stringMatch("final", obj.status))
        assertTrue(stringMatch("http://loinc.org", obj.code.coding[0].system))
        assertTrue(stringMatch("1963-8", obj.code.coding[0].code))
        assertTrue(stringMatch("Bicarbonate [Moles/?volume] i", obj.code.coding[0].display))
        assertTrue(stringMatch("http://snomed.info/sct", obj.code.coding[1].system))
        assertTrue(stringMatch("365722008", obj.code.coding[1].code))
        assertTrue(stringMatch("Bicarbonate level", obj.code.coding[1].display))
        assertTrue(stringMatch("Patient/f201", obj.subject!!.reference))
        assertTrue(stringMatch("Roel", obj.subject!!.display))
        assertTrue(stringMatch("2013-04-04T14:34:00+01:00", obj.issued))
        assertTrue(stringMatch("Practitioner/f202", obj.performer[0].reference))
        assertTrue(stringMatch("Luigi Maas", obj.performer[0].display))
        assertTrue(stringMatch("%.2f".format(28f), "%.2f".format(obj.valueQuantity!!.value)))
        assertTrue(stringMatch("mmol/L", obj.valueQuantity!!.unit))
        assertTrue(stringMatch("http://snomed.info/sct", obj.valueQuantity!!.system))
        assertTrue(stringMatch("258813002", obj.valueQuantity!!.code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.interpretation!!.coding[0].system))
        assertTrue(stringMatch("166698001", obj.interpretation!!.coding[0].code))
        assertTrue(stringMatch("Serum bicarbonate level norma", obj.interpretation!!.coding[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/v2/0078", obj.interpretation!!.coding[1].system))
        assertTrue(stringMatch("N", obj.interpretation!!.coding[1].code))
        assertTrue(stringMatch("enzymatic method", obj.method!!.text))
        assertTrue(stringMatch("%.2f".format(22f), "%.2f".format(obj.referenceRange[0].low!!.value)))
        assertTrue(stringMatch("%.2f".format(29f), "%.2f".format(obj.referenceRange[0].high!!.value)))
        assertTrue(stringMatch("http://hl7.org/fhir/reference", obj.referenceRange[0].type!!.coding[0].system))
        assertTrue(stringMatch("normal", obj.referenceRange[0].type!!.coding[0].code))
        assertTrue(stringMatch("Normal Range", obj.referenceRange[0].type!!.coding[0].display))
    }

    fun `observation-example-f203-bicarbonate Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `observation-example-unsat 54 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-unsat.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("Observation", obj.resourceType))
        assertTrue(stringMatch("unsat", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("official", obj.identifier[0].use))
        assertTrue(stringMatch("http://www.bmc.nl/zorgportal/", obj.identifier[0].system))
        assertTrue(stringMatch("6323", obj.identifier[0].value))
        assertTrue(stringMatch("cancelled", obj.status))
        assertTrue(stringMatch("http://loinc.org", obj.code.coding[0].system))
        assertTrue(stringMatch("15074-8", obj.code.coding[0].code))
        assertTrue(stringMatch("Glucose [Moles/volume] in Blo", obj.code.coding[0].display))
        assertTrue(stringMatch("Patient/f001", obj.subject!!.reference))
        assertTrue(stringMatch("P. van de Heuvel", obj.subject!!.display))
        assertTrue(stringMatch("2013-04-02T09:30:10+01:00", obj.effectivePeriod!!.start))
        assertTrue(stringMatch("2013-04-05T09:30:10+01:00", obj.effectivePeriod!!.end))
        assertTrue(stringMatch("2013-04-03T15:30:10+01:00", obj.issued))
        assertTrue(stringMatch("Practitioner/f005", obj.performer[0].reference))
        assertTrue(stringMatch("A. Langeveld", obj.performer[0].display))
        assertTrue(stringMatch("http://snomed.info/sct", obj.dataAbsentReason!!.coding[0].system))
        assertTrue(stringMatch("125154007", obj.dataAbsentReason!!.coding[0].code))
        assertTrue(stringMatch("Specimen unsatisfactory for e", obj.dataAbsentReason!!.coding[0].display))
        assertTrue(stringMatch("Tube broken in transit and sa", obj.comment))
        assertTrue(stringMatch("%.2f".format(3.1f), "%.2f".format(obj.referenceRange[0].low!!.value)))
        assertTrue(stringMatch("mmol/l", obj.referenceRange[0].low!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.referenceRange[0].low!!.system))
        assertTrue(stringMatch("mmol/L", obj.referenceRange[0].low!!.code))
        assertTrue(stringMatch("%.2f".format(6.2f), "%.2f".format(obj.referenceRange[0].high!!.value)))
        assertTrue(stringMatch("mmol/l", obj.referenceRange[0].high!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.referenceRange[0].high!!.system))
        assertTrue(stringMatch("mmol/L", obj.referenceRange[0].high!!.code))
    }

    fun `observation-example-unsat Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `observation-example-2minute-apgar-score 55 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-2minute-apgar-score.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("Observation", obj.resourceType))
        assertTrue(stringMatch("2minute-apgar-score", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("Patient", (obj.contained[0] as Patient).resourceType))
        assertTrue(stringMatch("newborn", (obj.contained[0] as Patient).id))
        assertTrue(stringMatch("http://acmehealthcare/org/mrn", (obj.contained[0] as Patient).identifier[0].system))
        assertTrue(stringMatch("12345", (obj.contained[0] as Patient).identifier[0].value))
        assertEquals(true, if ((obj.contained[0] as Patient).active != null) (obj.contained[0] as Patient).active else false, "Field: (obj.contained[0] as Patient).active")
        assertTrue(stringMatch("Chalmers", (obj.contained[0] as Patient).name[0].family))
        assertTrue(stringMatch("Peter", (obj.contained[0] as Patient).name[0].given[0]))
        assertTrue(stringMatch("James", (obj.contained[0] as Patient).name[0].given[1]))
        assertTrue(stringMatch("male", (obj.contained[0] as Patient).gender))
        assertTrue(stringMatch("2016-05-18", (obj.contained[0] as Patient).birthDate))
        assertTrue(stringMatch("final", obj.status))
        assertTrue(stringMatch("http://hl7.org/fhir/observati", obj.category[0].coding[0].system))
        assertTrue(stringMatch("survey", obj.category[0].coding[0].code))
        assertTrue(stringMatch("Survey", obj.category[0].coding[0].display))
        assertTrue(stringMatch("Survey", obj.category[0].text))
        assertTrue(stringMatch("http://loinc.org", obj.code.coding[0].system))
        assertTrue(stringMatch("9273-4", obj.code.coding[0].code))
        assertTrue(stringMatch("2 minute Apgar Score", obj.code.coding[0].display))
        assertTrue(stringMatch("2 minute Apgar Score", obj.code.text))
        assertTrue(stringMatch("#newborn", obj.subject!!.reference))
        assertTrue(stringMatch("2016-05-18T22:33:22Z", obj.effectiveDateTime))
        assertTrue(stringMatch("Practitioner/example", obj.performer[0].reference))
        assertTrue(stringMatch("%.2f".format(5f), "%.2f".format(obj.valueQuantity!!.value)))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.valueQuantity!!.system))
        assertTrue(stringMatch("{score}", obj.valueQuantity!!.code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.component[0].code.coding[0].system))
        assertTrue(stringMatch("249227004", obj.component[0].code.coding[0].code))
        assertTrue(stringMatch("Apgar color score", obj.component[0].code.coding[0].display))
        assertTrue(stringMatch("Apgar color score", obj.component[0].code.text))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.component[0].valueCodeableConcept!!.coding[0].extension[0].url))
        assertTrue(stringMatch("%.2f".format(1f), "%.2f".format(obj.component[0].valueCodeableConcept!!.coding[0].extension[0].valueDecimal)))
        assertTrue(stringMatch("http://loinc.org/la", obj.component[0].valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("LA6723-6", obj.component[0].valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("Good color in body with bluis", obj.component[0].valueCodeableConcept!!.coding[0].display))
        assertTrue(stringMatch("http:/acme.ped/apgarcolor", obj.component[0].valueCodeableConcept!!.coding[1].system))
        assertTrue(stringMatch("1", obj.component[0].valueCodeableConcept!!.coding[1].code))
        assertTrue(stringMatch("1. Good color in body with bl", obj.component[0].valueCodeableConcept!!.text))
        assertTrue(stringMatch("http://snomed.info/sct", obj.component[1].code.coding[0].system))
        assertTrue(stringMatch("249223000", obj.component[1].code.coding[0].code))
        assertTrue(stringMatch("Apgar heart rate score", obj.component[1].code.coding[0].display))
        assertTrue(stringMatch("Apgar respiratory effort scor", obj.component[1].code.text))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.component[1].valueCodeableConcept!!.coding[0].extension[0].url))
        assertTrue(stringMatch("%.2f".format(1f), "%.2f".format(obj.component[1].valueCodeableConcept!!.coding[0].extension[0].valueDecimal)))
        assertTrue(stringMatch("http://loinc.org/la", obj.component[1].valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("LA6720-2", obj.component[1].valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("Fewer than 100 beats per minu", obj.component[1].valueCodeableConcept!!.coding[0].display))
        assertTrue(stringMatch("http:/acme.ped/apgarheartrate", obj.component[1].valueCodeableConcept!!.coding[1].system))
        assertTrue(stringMatch("1", obj.component[1].valueCodeableConcept!!.coding[1].code))
        assertTrue(stringMatch("1. Fewer than 100 beats per m", obj.component[1].valueCodeableConcept!!.text))
        assertTrue(stringMatch("http://snomed.info/sct", obj.component[2].code.coding[0].system))
        assertTrue(stringMatch("249226008", obj.component[2].code.coding[0].code))
        assertTrue(stringMatch("Apgar response to stimulus sc", obj.component[2].code.coding[0].display))
        assertTrue(stringMatch("Apgar response to stimulus sc", obj.component[2].code.text))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.component[2].valueCodeableConcept!!.coding[0].extension[0].url))
        assertTrue(stringMatch("%.2f".format(1f), "%.2f".format(obj.component[2].valueCodeableConcept!!.coding[0].extension[0].valueDecimal)))
        assertTrue(stringMatch("http://loinc.org/la", obj.component[2].valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("LA6721-0", obj.component[2].valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("Grimace during suctioning", obj.component[2].valueCodeableConcept!!.coding[0].display))
        assertTrue(stringMatch("http:/acme.ped/apgarreflexirr", obj.component[2].valueCodeableConcept!!.coding[1].system))
        assertTrue(stringMatch("1", obj.component[2].valueCodeableConcept!!.coding[1].code))
        assertTrue(stringMatch("1. Grimace during suctioning", obj.component[2].valueCodeableConcept!!.text))
        assertTrue(stringMatch("http://snomed.info/sct", obj.component[3].code.coding[0].system))
        assertTrue(stringMatch("249225007", obj.component[3].code.coding[0].code))
        assertTrue(stringMatch("Apgar muscle tone score", obj.component[3].code.coding[0].display))
        assertTrue(stringMatch("Apgar muscle tone score", obj.component[3].code.text))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.component[3].valueCodeableConcept!!.coding[0].extension[0].url))
        assertTrue(stringMatch("%.2f".format(1f), "%.2f".format(obj.component[3].valueCodeableConcept!!.coding[0].extension[0].valueDecimal)))
        assertTrue(stringMatch("http://loinc.org/la", obj.component[3].valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("LA6714-5", obj.component[3].valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("Some flexion of arms and legs", obj.component[3].valueCodeableConcept!!.coding[0].display))
        assertTrue(stringMatch("http:/acme.ped/apgarmuscleton", obj.component[3].valueCodeableConcept!!.coding[1].system))
        assertTrue(stringMatch("1", obj.component[3].valueCodeableConcept!!.coding[1].code))
        assertTrue(stringMatch("1. Some flexion of arms and l", obj.component[3].valueCodeableConcept!!.text))
        assertTrue(stringMatch("http://snomed.info/sct", obj.component[4].code.coding[0].system))
        assertTrue(stringMatch("249224006", obj.component[4].code.coding[0].code))
        assertTrue(stringMatch("Apgar respiratory effort scor", obj.component[4].code.coding[0].display))
        assertTrue(stringMatch("Apgar respiratory effort scor", obj.component[4].code.text))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.component[4].valueCodeableConcept!!.coding[0].extension[0].url))
        assertTrue(stringMatch("%.2f".format(1f), "%.2f".format(obj.component[4].valueCodeableConcept!!.coding[0].extension[0].valueDecimal)))
        assertTrue(stringMatch("http://loinc.org/la", obj.component[4].valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("LA6726-9", obj.component[4].valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("Weak cry; may sound like whim", obj.component[4].valueCodeableConcept!!.coding[0].display))
        assertTrue(stringMatch("http:/acme.ped/apgarrespirato", obj.component[4].valueCodeableConcept!!.coding[1].system))
        assertTrue(stringMatch("1", obj.component[4].valueCodeableConcept!!.coding[1].code))
        assertTrue(stringMatch("1. Weak cry; may sound like w", obj.component[4].valueCodeableConcept!!.text))
    }

    fun `observation-example-2minute-apgar-score Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `observation-example-genetics-2 56 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-genetics-2.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("Observation", obj.resourceType))
        assertTrue(stringMatch("example-genetics-2", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("final", obj.status))
        assertTrue(stringMatch("http://loinc.org", obj.code.coding[0].system))
        assertTrue(stringMatch("55233-1", obj.code.coding[0].code))
        assertTrue(stringMatch("Genetic analysis master panel", obj.code.coding[0].display))
        assertTrue(stringMatch("Patient/example", obj.subject!!.reference))
        assertTrue(stringMatch("Molecular Lab Patient ID: HOS", obj.subject!!.display))
        assertTrue(stringMatch("2013-04-03T15:30:10+01:00", obj.issued))
        assertTrue(stringMatch("Practitioner/example", obj.performer[0].reference))
        assertTrue(stringMatch("Molecular Diagnostics Laborat", obj.performer[0].display))
        assertTrue(stringMatch("http://snomed.info/sct", obj.valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("10828004", obj.valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("Positive", obj.valueCodeableConcept!!.coding[0].display))
        assertTrue(stringMatch("derived-from", obj.related[0].type))
        assertTrue(stringMatch("Observation/example-genetics-", obj.related[0].target.reference))
        assertTrue(stringMatch("http://loinc.org", obj.component[0].code.coding[0].system))
        assertTrue(stringMatch("51967-8", obj.component[0].code.coding[0].code))
        assertTrue(stringMatch("Genetic disease assessed", obj.component[0].code.coding[0].display))
        assertTrue(stringMatch("http://snomed.info/sct", obj.component[0].valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("363358000", obj.component[0].valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("Malignant tumor of lung (diso", obj.component[0].valueCodeableConcept!!.coding[0].display))
        assertTrue(stringMatch("Lung cancer", obj.component[0].valueCodeableConcept!!.text))
        assertTrue(stringMatch("http://loinc.org", obj.component[1].code.coding[0].system))
        assertTrue(stringMatch("53037-8", obj.component[1].code.coding[0].code))
        assertTrue(stringMatch("Genetic disease sequence vari", obj.component[1].code.coding[0].display))
        assertTrue(stringMatch("LA6669-1", obj.component[1].valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("Pathogenic", obj.component[1].valueCodeableConcept!!.coding[0].display))
    }

    fun `observation-example-genetics-2 Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `observation-example-f205-egfr 57 Test`() {
        val json = File("./src/test/resources/model/sample_data/observation-example-f205-egfr.json").readTextAndClose()
        val obj = mapper.fromJson(json, Observation::class.java)
        assertTrue(stringMatch("Observation", obj.resourceType))
        assertTrue(stringMatch("f205", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("https://intranet.aumc.nl/labv", obj.identifier[0].system))
        assertTrue(stringMatch("1304-03720-eGFR", obj.identifier[0].value))
        assertTrue(stringMatch("final", obj.status))
        assertTrue(stringMatch("http://loinc.org", obj.code.coding[0].system))
        assertTrue(stringMatch("33914-3", obj.code.coding[0].code))
        assertTrue(stringMatch("Glomerular filtration rate/1.", obj.code.coding[0].display))
        assertTrue(stringMatch("Patient/f201", obj.subject!!.reference))
        assertTrue(stringMatch("Roel", obj.subject!!.display))
        assertTrue(stringMatch("2013-04-04T14:34:00+01:00", obj.issued))
        assertTrue(stringMatch("Practitioner/f202", obj.performer[0].reference))
        assertTrue(stringMatch("Luigi Maas", obj.performer[0].display))
        assertTrue(stringMatch("interpretation of results sho", obj.interpretation!!.text))
        assertTrue(stringMatch("GFR estimating equations deve", obj.comment))
        assertTrue(stringMatch("http://snomed.info/id", obj.method!!.coding[0].system))
        assertTrue(stringMatch("702668005", obj.method!!.coding[0].code))
        assertTrue(stringMatch("MDRD", obj.method!!.coding[0].display))
        assertTrue(stringMatch("http://loinc.org", obj.component[0].code.coding[0].system))
        assertTrue(stringMatch("48643-1", obj.component[0].code.coding[0].code))
        assertTrue(stringMatch("Glomerular filtration rate/1.", obj.component[0].code.coding[0].display))
        assertTrue(stringMatch("%.2f".format(60f), "%.2f".format(obj.component[0].valueQuantity!!.value)))
        assertTrue(stringMatch(">", obj.component[0].valueQuantity!!.comparator))
        assertTrue(stringMatch("mL/min/1.73m2", obj.component[0].valueQuantity!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.component[0].valueQuantity!!.system))
        assertTrue(stringMatch("mL/min/{1.73_m2}", obj.component[0].valueQuantity!!.code))
        assertTrue(stringMatch("%.2f".format(60f), "%.2f".format(obj.component[0].referenceRange[0].low!!.value)))
        assertTrue(stringMatch("mL/min/1.73m2", obj.component[0].referenceRange[0].low!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.component[0].referenceRange[0].low!!.system))
        assertTrue(stringMatch("mL/min/{1.73_m2}", obj.component[0].referenceRange[0].low!!.code))
        assertTrue(stringMatch("non-black/african-american", obj.component[0].referenceRange[0].appliesTo[0].text))
        assertTrue(stringMatch("%.2f".format(18f), "%.2f".format(obj.component[0].referenceRange[0].age!!.low!!.value)))
        assertTrue(stringMatch("yrs", obj.component[0].referenceRange[0].age!!.low!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.component[0].referenceRange[0].age!!.low!!.system))
        assertTrue(stringMatch("a", obj.component[0].referenceRange[0].age!!.low!!.code))
        assertTrue(stringMatch("http://loinc.org", obj.component[1].code.coding[0].system))
        assertTrue(stringMatch("48642-3", obj.component[1].code.coding[0].code))
        assertTrue(stringMatch("Glomerular filtration rate/1.", obj.component[1].code.coding[0].display))
        assertTrue(stringMatch("%.2f".format(60f), "%.2f".format(obj.component[1].valueQuantity!!.value)))
        assertTrue(stringMatch("mL/min/1.73m2", obj.component[1].valueQuantity!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.component[1].valueQuantity!!.system))
        assertTrue(stringMatch("mL/min/{1.73_m2}", obj.component[1].valueQuantity!!.code))
        assertTrue(stringMatch("%.2f".format(60f), "%.2f".format(obj.component[1].referenceRange[0].low!!.value)))
        assertTrue(stringMatch("mL/min/1.73m2", obj.component[1].referenceRange[0].low!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.component[1].referenceRange[0].low!!.system))
        assertTrue(stringMatch("mL/min/{1.73_m2}", obj.component[1].referenceRange[0].low!!.code))
        assertTrue(stringMatch("%.2f".format(18f), "%.2f".format(obj.component[1].referenceRange[0].age!!.low!!.value)))
        assertTrue(stringMatch("yrs", obj.component[1].referenceRange[0].age!!.low!!.unit))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.component[1].referenceRange[0].age!!.low!!.system))
        assertTrue(stringMatch("a", obj.component[1].referenceRange[0].age!!.low!!.code))
    }

    fun `observation-example-f205-egfr Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }
}
