package com.juicelabs.fhir.model

import java.io.File
import java.lang.SuppressWarnings
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.junit.jupiter.api.Test

class TestScriptDataTest : DataTests() {
    @Test
    fun `testscript-example-multisystem 192 Test`() {
        val json = File("./src/test/resources/model/sample_data/testscript-example-multisystem.json").readTextAndClose()
        val obj = mapper.fromJson(json, TestScript::class.java)
        assertTrue(stringMatch("TestScript", obj.resourceType))
        assertTrue(stringMatch("testscript-example-multisyste", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://hl7.org/fhir/TestScrip", obj.url))
        assertTrue(stringMatch("urn:ietf:rfc:3986", obj.identifier!!.system))
        assertTrue(stringMatch("urn:oid:1.3.6.1.4.1.21367.200", obj.identifier!!.value))
        assertTrue(stringMatch("1.0", obj.version))
        assertTrue(stringMatch("testscript-example-multisyste", obj.name))
        assertTrue(stringMatch("Multisystem Test Script", obj.title))
        assertTrue(stringMatch("draft", obj.status))
        assertEquals(true, if (obj.experimental != null) obj.experimental else false, "Field: obj.experimental")
        assertTrue(stringMatch("2017-01-18", obj.date))
        assertTrue(stringMatch("HL7", obj.publisher))
        assertTrue(stringMatch("Support", obj.contact[0].name))
        assertTrue(stringMatch("email", obj.contact[0].telecom[0].system))
        assertTrue(stringMatch("support@HL7.org", obj.contact[0].telecom[0].value))
        assertTrue(stringMatch("work", obj.contact[0].telecom[0].use))
        assertTrue(stringMatch("TestScript example resource s", obj.description))
        assertTrue(stringMatch("urn:iso:std:iso:3166", obj.jurisdiction[0].coding[0].system))
        assertTrue(stringMatch("US", obj.jurisdiction[0].coding[0].code))
        assertTrue(stringMatch("United States of America (the", obj.jurisdiction[0].coding[0].display))
        assertTrue(stringMatch("Patient Read Operation", obj.purpose))
        assertTrue(stringMatch("Â© HL7.org 2011+", obj.copyright))
        assertEquals(1, obj.origin[0].index)
        assertTrue(stringMatch("FHIR-Client", obj.origin[0].profile.code))
        assertEquals(1, obj.destination[0].index)
        assertTrue(stringMatch("FHIR-Server", obj.destination[0].profile.code))
        assertEquals(2, obj.destination[1].index)
        assertTrue(stringMatch("FHIR-Server", obj.destination[1].profile.code))
        assertTrue(stringMatch("http://hl7.org/fhir/patient.h", obj.metadata!!.link[0].url))
        assertTrue(stringMatch("Demographics and other admini", obj.metadata!!.link[0].description))
        assertEquals(true, if (obj.metadata!!.capability[0].required != null) obj.metadata!!.capability[0].required else false, "Field: obj.metadata!!.capability[0].required")
        assertEquals(false, if (obj.metadata!!.capability[0].validated != null) obj.metadata!!.capability[0].validated else false, "Field: obj.metadata!!.capability[0].validated")
        assertTrue(stringMatch("Patient Read Operation", obj.metadata!!.capability[0].description))
        assertEquals(1, obj.metadata!!.capability[0].origin[0])
        assertEquals(1, obj.metadata!!.capability[0].destination)
        assertTrue(stringMatch("http://hl7.org/fhir/http.html", obj.metadata!!.capability[0].link[0]))
        assertTrue(stringMatch("CapabilityStatement/example", obj.metadata!!.capability[0].capabilities.reference))
        assertEquals(true, if (obj.metadata!!.capability[1].required != null) obj.metadata!!.capability[1].required else false, "Field: obj.metadata!!.capability[1].required")
        assertEquals(false, if (obj.metadata!!.capability[1].validated != null) obj.metadata!!.capability[1].validated else false, "Field: obj.metadata!!.capability[1].validated")
        assertTrue(stringMatch("Patient Read Operation", obj.metadata!!.capability[1].description))
        assertEquals(1, obj.metadata!!.capability[1].origin[0])
        assertEquals(2, obj.metadata!!.capability[1].destination)
        assertTrue(stringMatch("http://hl7.org/fhir/http.html", obj.metadata!!.capability[1].link[0]))
        assertTrue(stringMatch("CapabilityStatement/example", obj.metadata!!.capability[1].capabilities.reference))
        assertTrue(stringMatch("Dest1PatientResourceId", obj.variable[0].name))
        assertTrue(stringMatch("example", obj.variable[0].defaultValue))
        assertTrue(stringMatch("Dest2PatientResourceId", obj.variable[1].name))
        assertTrue(stringMatch("example", obj.variable[1].defaultValue))
        assertTrue(stringMatch("01-ReadPatient-Destination1", obj.test[0].id))
        assertTrue(stringMatch("ReadPatient-Destination1", obj.test[0].name))
        assertTrue(stringMatch("Read a Patient from the first", obj.test[0].description))
        assertTrue(stringMatch("http://hl7.org/fhir/testscrip", obj.test[0].action[0].operation!!.type!!.system))
        assertTrue(stringMatch("read", obj.test[0].action[0].operation!!.type!!.code))
        assertTrue(stringMatch("Patient", obj.test[0].action[0].operation!!.resource))
        assertTrue(stringMatch("Read a Patient from the first", obj.test[0].action[0].operation!!.description))
        assertTrue(stringMatch("xml", obj.test[0].action[0].operation!!.accept))
        assertTrue(stringMatch("xml", obj.test[0].action[0].operation!!.contentType))
        assertEquals(1, obj.test[0].action[0].operation!!.destination)
        assertEquals(1, obj.test[0].action[0].operation!!.origin)
        assertTrue(stringMatch("/${'$'}{Dest1PatientResourceId}", obj.test[0].action[0].operation!!.params))
        assertTrue(stringMatch("request-read-patient-01", obj.test[0].action[0].operation!!.requestId))
        assertTrue(stringMatch("Confirm that the request meth", obj.test[0].action[1].assert_fhir!!.description))
        assertTrue(stringMatch("get", obj.test[0].action[1].assert_fhir!!.requestMethod))
        assertTrue(stringMatch("Confirm that the client reque", obj.test[0].action[2].assert_fhir!!.description))
        assertTrue(stringMatch("request", obj.test[0].action[2].assert_fhir!!.direction))
        assertTrue(stringMatch("Accept", obj.test[0].action[2].assert_fhir!!.headerField))
        assertTrue(stringMatch("contains", obj.test[0].action[2].assert_fhir!!.operator))
        assertTrue(stringMatch("xml", obj.test[0].action[2].assert_fhir!!.value))
        assertTrue(stringMatch("Confirm that the returned HTT", obj.test[0].action[3].assert_fhir!!.description))
        assertTrue(stringMatch("response", obj.test[0].action[3].assert_fhir!!.direction))
        assertTrue(stringMatch("okay", obj.test[0].action[3].assert_fhir!!.response))
        assertTrue(stringMatch("Confirm that the returned for", obj.test[0].action[4].assert_fhir!!.description))
        assertTrue(stringMatch("response", obj.test[0].action[4].assert_fhir!!.direction))
        assertTrue(stringMatch("xml", obj.test[0].action[4].assert_fhir!!.contentType))
        assertTrue(stringMatch("Confirm that the returned res", obj.test[0].action[5].assert_fhir!!.description))
        assertTrue(stringMatch("response", obj.test[0].action[5].assert_fhir!!.direction))
        assertTrue(stringMatch("Patient", obj.test[0].action[5].assert_fhir!!.resource))
        assertTrue(stringMatch("02-ReadPatient-Destination2", obj.test[1].id))
        assertTrue(stringMatch("ReadPatient-Destination2", obj.test[1].name))
        assertTrue(stringMatch("Read a Patient from the secon", obj.test[1].description))
        assertTrue(stringMatch("http://hl7.org/fhir/testscrip", obj.test[1].action[0].operation!!.type!!.system))
        assertTrue(stringMatch("read", obj.test[1].action[0].operation!!.type!!.code))
        assertTrue(stringMatch("Patient", obj.test[1].action[0].operation!!.resource))
        assertTrue(stringMatch("Read a Patient from the secon", obj.test[1].action[0].operation!!.description))
        assertTrue(stringMatch("xml", obj.test[1].action[0].operation!!.accept))
        assertTrue(stringMatch("xml", obj.test[1].action[0].operation!!.contentType))
        assertEquals(2, obj.test[1].action[0].operation!!.destination)
        assertEquals(1, obj.test[1].action[0].operation!!.origin)
        assertTrue(stringMatch("/${'$'}{Dest2PatientResourceId}", obj.test[1].action[0].operation!!.params))
        assertTrue(stringMatch("Accept-Charset", obj.test[1].action[0].operation!!.requestHeader[0].field))
        assertTrue(stringMatch("utf-8", obj.test[1].action[0].operation!!.requestHeader[0].value))
        assertTrue(stringMatch("Confirm that the client reque", obj.test[1].action[1].assert_fhir!!.description))
        assertTrue(stringMatch("request", obj.test[1].action[1].assert_fhir!!.direction))
        assertTrue(stringMatch("Accept", obj.test[1].action[1].assert_fhir!!.headerField))
        assertTrue(stringMatch("contains", obj.test[1].action[1].assert_fhir!!.operator))
        assertTrue(stringMatch("xml", obj.test[1].action[1].assert_fhir!!.value))
        assertTrue(stringMatch("Confirm that the returned HTT", obj.test[1].action[2].assert_fhir!!.description))
        assertTrue(stringMatch("response", obj.test[1].action[2].assert_fhir!!.direction))
        assertTrue(stringMatch("okay", obj.test[1].action[2].assert_fhir!!.response))
        assertTrue(stringMatch("Confirm that the returned for", obj.test[1].action[3].assert_fhir!!.description))
        assertTrue(stringMatch("response", obj.test[1].action[3].assert_fhir!!.direction))
        assertTrue(stringMatch("xml", obj.test[1].action[3].assert_fhir!!.contentType))
        assertTrue(stringMatch("Confirm that the returned res", obj.test[1].action[4].assert_fhir!!.description))
        assertTrue(stringMatch("response", obj.test[1].action[4].assert_fhir!!.direction))
        assertTrue(stringMatch("Patient", obj.test[1].action[4].assert_fhir!!.resource))
    }

    fun `testscript-example-multisystem Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `testscript-example-history 193 Test`() {
        val json = File("./src/test/resources/model/sample_data/testscript-example-history.json").readTextAndClose()
        val obj = mapper.fromJson(json, TestScript::class.java)
        assertTrue(stringMatch("TestScript", obj.resourceType))
        assertTrue(stringMatch("testscript-example-history", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://hl7.org/fhir/TestScrip", obj.url))
        assertTrue(stringMatch("urn:ietf:rfc:3986", obj.identifier!!.system))
        assertTrue(stringMatch("urn:oid:1.3.6.1.4.1.21367.200", obj.identifier!!.value))
        assertTrue(stringMatch("1.0", obj.version))
        assertTrue(stringMatch("TestScript Example History", obj.name))
        assertTrue(stringMatch("draft", obj.status))
        assertEquals(true, if (obj.experimental != null) obj.experimental else false, "Field: obj.experimental")
        assertTrue(stringMatch("2017-01-18", obj.date))
        assertTrue(stringMatch("HL7", obj.publisher))
        assertTrue(stringMatch("Support", obj.contact[0].name))
        assertTrue(stringMatch("email", obj.contact[0].telecom[0].system))
        assertTrue(stringMatch("support@HL7.org", obj.contact[0].telecom[0].value))
        assertTrue(stringMatch("work", obj.contact[0].telecom[0].use))
        assertTrue(stringMatch("TestScript example resource w", obj.description))
        assertTrue(stringMatch("urn:iso:std:iso:3166", obj.jurisdiction[0].coding[0].system))
        assertTrue(stringMatch("US", obj.jurisdiction[0].coding[0].code))
        assertTrue(stringMatch("United States of America (the", obj.jurisdiction[0].coding[0].display))
        assertTrue(stringMatch("Patient (Conditional) Create,", obj.purpose))
        assertTrue(stringMatch("Â© HL7.org 2011+", obj.copyright))
        assertTrue(stringMatch("http://hl7.org/fhir/patient.h", obj.metadata!!.link[0].url))
        assertTrue(stringMatch("Demographics and other admini", obj.metadata!!.link[0].description))
        assertEquals(true, if (obj.metadata!!.capability[0].required != null) obj.metadata!!.capability[0].required else false, "Field: obj.metadata!!.capability[0].required")
        assertTrue(stringMatch("Patient Update, Delete and Hi", obj.metadata!!.capability[0].description))
        assertTrue(stringMatch("http://hl7.org/fhir/http.html", obj.metadata!!.capability[0].link[0]))
        assertTrue(stringMatch("http://hl7.org/fhir/http.html", obj.metadata!!.capability[0].link[1]))
        assertTrue(stringMatch("http://hl7.org/fhir/http.html", obj.metadata!!.capability[0].link[2]))
        assertTrue(stringMatch("CapabilityStatement/example", obj.metadata!!.capability[0].capabilities.reference))
        assertTrue(stringMatch("fixture-patient-create", obj.fixture[0].id))
        assertEquals(false, if (obj.fixture[0].autocreate != null) obj.fixture[0].autocreate else false, "Field: obj.fixture[0].autocreate")
        assertEquals(false, if (obj.fixture[0].autodelete != null) obj.fixture[0].autodelete else false, "Field: obj.fixture[0].autodelete")
        assertTrue(stringMatch("Patient/example", obj.fixture[0].resource!!.reference))
        assertTrue(stringMatch("Peter Chalmers", obj.fixture[0].resource!!.display))
        assertTrue(stringMatch("fixture-patient-update", obj.fixture[1].id))
        assertEquals(false, if (obj.fixture[1].autocreate != null) obj.fixture[1].autocreate else false, "Field: obj.fixture[1].autocreate")
        assertEquals(false, if (obj.fixture[1].autodelete != null) obj.fixture[1].autodelete else false, "Field: obj.fixture[1].autodelete")
        assertTrue(stringMatch("Patient/pat1", obj.fixture[1].resource!!.reference))
        assertTrue(stringMatch("Donald Duck", obj.fixture[1].resource!!.display))
        assertTrue(stringMatch("bundle-profile", obj.profile[0].id))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.profile[0].reference))
        assertTrue(stringMatch("createResourceId", obj.variable[0].name))
        assertTrue(stringMatch("Patient/id", obj.variable[0].path))
        assertTrue(stringMatch("fixture-patient-create", obj.variable[0].sourceId))
        assertTrue(stringMatch("http://hl7.org/fhir/testscrip", obj.setup!!.action[0].operation!!.type!!.system))
        assertTrue(stringMatch("delete", obj.setup!!.action[0].operation!!.type!!.code))
        assertTrue(stringMatch("Patient", obj.setup!!.action[0].operation!!.resource))
        assertTrue(stringMatch("SetupDeletePatient", obj.setup!!.action[0].operation!!.label))
        assertTrue(stringMatch("Execute a delete operation to", obj.setup!!.action[0].operation!!.description))
        assertTrue(stringMatch("json", obj.setup!!.action[0].operation!!.accept))
        assertTrue(stringMatch("/${'$'}{createResourceId}", obj.setup!!.action[0].operation!!.params))
        assertTrue(stringMatch("Confirm that the returned HTT", obj.setup!!.action[1].assert_fhir!!.description))
        assertTrue(stringMatch("response", obj.setup!!.action[1].assert_fhir!!.direction))
        assertTrue(stringMatch("in", obj.setup!!.action[1].assert_fhir!!.operator))
        assertTrue(stringMatch("200,204", obj.setup!!.action[1].assert_fhir!!.responseCode))
        assertTrue(stringMatch("http://hl7.org/fhir/testscrip", obj.setup!!.action[2].operation!!.type!!.system))
        assertTrue(stringMatch("update", obj.setup!!.action[2].operation!!.type!!.code))
        assertTrue(stringMatch("Patient", obj.setup!!.action[2].operation!!.resource))
        assertTrue(stringMatch("SetupCreatePatient", obj.setup!!.action[2].operation!!.label))
        assertTrue(stringMatch("Create patient resource on te", obj.setup!!.action[2].operation!!.description))
        assertTrue(stringMatch("json", obj.setup!!.action[2].operation!!.accept))
        assertTrue(stringMatch("json", obj.setup!!.action[2].operation!!.contentType))
        assertTrue(stringMatch("/${'$'}{createResourceId}", obj.setup!!.action[2].operation!!.params))
        assertTrue(stringMatch("fixture-patient-create", obj.setup!!.action[2].operation!!.sourceId))
        assertTrue(stringMatch("Confirm that the returned HTT", obj.setup!!.action[3].assert_fhir!!.description))
        assertTrue(stringMatch("response", obj.setup!!.action[3].assert_fhir!!.direction))
        assertTrue(stringMatch("201", obj.setup!!.action[3].assert_fhir!!.responseCode))
        assertTrue(stringMatch("http://hl7.org/fhir/testscrip", obj.setup!!.action[4].operation!!.type!!.system))
        assertTrue(stringMatch("update", obj.setup!!.action[4].operation!!.type!!.code))
        assertTrue(stringMatch("Patient", obj.setup!!.action[4].operation!!.resource))
        assertTrue(stringMatch("SetupUpdatePatient", obj.setup!!.action[4].operation!!.label))
        assertTrue(stringMatch("Update patient resource on te", obj.setup!!.action[4].operation!!.description))
        assertTrue(stringMatch("json", obj.setup!!.action[4].operation!!.accept))
        assertTrue(stringMatch("json", obj.setup!!.action[4].operation!!.contentType))
        assertTrue(stringMatch("/${'$'}{createResourceId}", obj.setup!!.action[4].operation!!.params))
        assertTrue(stringMatch("fixture-patient-update", obj.setup!!.action[4].operation!!.sourceId))
        assertTrue(stringMatch("Confirm that the returned HTT", obj.setup!!.action[5].assert_fhir!!.description))
        assertTrue(stringMatch("response", obj.setup!!.action[5].assert_fhir!!.direction))
        assertTrue(stringMatch("200", obj.setup!!.action[5].assert_fhir!!.responseCode))
        assertTrue(stringMatch("01-HistoryPatient", obj.test[0].id))
        assertTrue(stringMatch("History Patient", obj.test[0].name))
        assertTrue(stringMatch("Get the history for a known P", obj.test[0].description))
        assertTrue(stringMatch("http://hl7.org/fhir/testscrip", obj.test[0].action[0].operation!!.type!!.system))
        assertTrue(stringMatch("history", obj.test[0].action[0].operation!!.type!!.code))
        assertTrue(stringMatch("Patient", obj.test[0].action[0].operation!!.resource))
        assertTrue(stringMatch("Get the Patient history on th", obj.test[0].action[0].operation!!.description))
        assertTrue(stringMatch("json", obj.test[0].action[0].operation!!.accept))
        assertTrue(stringMatch("json", obj.test[0].action[0].operation!!.contentType))
        assertTrue(stringMatch("fixture-patient-create", obj.test[0].action[0].operation!!.targetId))
        assertTrue(stringMatch("Confirm that the returned HTT", obj.test[0].action[1].assert_fhir!!.description))
        assertTrue(stringMatch("response", obj.test[0].action[1].assert_fhir!!.direction))
        assertTrue(stringMatch("okay", obj.test[0].action[1].assert_fhir!!.response))
        assertTrue(stringMatch("Confirm that the returned res", obj.test[0].action[2].assert_fhir!!.description))
        assertTrue(stringMatch("Bundle", obj.test[0].action[2].assert_fhir!!.resource))
        assertTrue(stringMatch("Confirm that the returned Bun", obj.test[0].action[3].assert_fhir!!.description))
        assertTrue(stringMatch("bundle-profile", obj.test[0].action[3].assert_fhir!!.validateProfileId))
        assertTrue(stringMatch("Confirm that the returned Bun", obj.test[0].action[4].assert_fhir!!.description))
        assertTrue(stringMatch("equals", obj.test[0].action[4].assert_fhir!!.operator))
        assertTrue(stringMatch("fhir:Bundle/fhir:type/@value", obj.test[0].action[4].assert_fhir!!.path))
        assertTrue(stringMatch("history", obj.test[0].action[4].assert_fhir!!.value))
    }

    fun `testscript-example-history Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `testscript-example-update 194 Test`() {
        val json = File("./src/test/resources/model/sample_data/testscript-example-update.json").readTextAndClose()
        val obj = mapper.fromJson(json, TestScript::class.java)
        assertTrue(stringMatch("TestScript", obj.resourceType))
        assertTrue(stringMatch("testscript-example-update", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://hl7.org/fhir/TestScrip", obj.url))
        assertTrue(stringMatch("urn:ietf:rfc:3986", obj.identifier!!.system))
        assertTrue(stringMatch("urn:oid:1.3.6.1.4.1.21367.200", obj.identifier!!.value))
        assertTrue(stringMatch("1.0", obj.version))
        assertTrue(stringMatch("TestScript Example Update", obj.name))
        assertTrue(stringMatch("draft", obj.status))
        assertEquals(true, if (obj.experimental != null) obj.experimental else false, "Field: obj.experimental")
        assertTrue(stringMatch("2017-01-18", obj.date))
        assertTrue(stringMatch("HL7", obj.publisher))
        assertTrue(stringMatch("Support", obj.contact[0].name))
        assertTrue(stringMatch("email", obj.contact[0].telecom[0].system))
        assertTrue(stringMatch("support@HL7.org", obj.contact[0].telecom[0].value))
        assertTrue(stringMatch("work", obj.contact[0].telecom[0].use))
        assertTrue(stringMatch("TestScript example resource w", obj.description))
        assertTrue(stringMatch("urn:iso:std:iso:3166", obj.jurisdiction[0].coding[0].system))
        assertTrue(stringMatch("US", obj.jurisdiction[0].coding[0].code))
        assertTrue(stringMatch("United States of America (the", obj.jurisdiction[0].coding[0].display))
        assertTrue(stringMatch("Patient (Conditional) Create,", obj.purpose))
        assertTrue(stringMatch("Â© HL7.org 2011+", obj.copyright))
        assertTrue(stringMatch("http://hl7.org/fhir/patient.h", obj.metadata!!.link[0].url))
        assertTrue(stringMatch("Demographics and other admini", obj.metadata!!.link[0].description))
        assertEquals(true, if (obj.metadata!!.capability[0].required != null) obj.metadata!!.capability[0].required else false, "Field: obj.metadata!!.capability[0].required")
        assertTrue(stringMatch("Patient Update and Delete Ope", obj.metadata!!.capability[0].description))
        assertTrue(stringMatch("http://hl7.org/fhir/http.html", obj.metadata!!.capability[0].link[0]))
        assertTrue(stringMatch("http://hl7.org/fhir/http.html", obj.metadata!!.capability[0].link[1]))
        assertTrue(stringMatch("CapabilityStatement/example", obj.metadata!!.capability[0].capabilities.reference))
        assertTrue(stringMatch("fixture-patient-create", obj.fixture[0].id))
        assertEquals(false, if (obj.fixture[0].autocreate != null) obj.fixture[0].autocreate else false, "Field: obj.fixture[0].autocreate")
        assertEquals(false, if (obj.fixture[0].autodelete != null) obj.fixture[0].autodelete else false, "Field: obj.fixture[0].autodelete")
        assertTrue(stringMatch("Patient/example", obj.fixture[0].resource!!.reference))
        assertTrue(stringMatch("Peter Chalmers", obj.fixture[0].resource!!.display))
        assertTrue(stringMatch("fixture-patient-update", obj.fixture[1].id))
        assertEquals(false, if (obj.fixture[1].autocreate != null) obj.fixture[1].autocreate else false, "Field: obj.fixture[1].autocreate")
        assertEquals(false, if (obj.fixture[1].autodelete != null) obj.fixture[1].autodelete else false, "Field: obj.fixture[1].autodelete")
        assertTrue(stringMatch("Patient/pat1", obj.fixture[1].resource!!.reference))
        assertTrue(stringMatch("Donald Duck", obj.fixture[1].resource!!.display))
        assertTrue(stringMatch("patient-profile", obj.profile[0].id))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.profile[0].reference))
        assertTrue(stringMatch("createResourceId", obj.variable[0].name))
        assertTrue(stringMatch("Patient/id", obj.variable[0].path))
        assertTrue(stringMatch("fixture-patient-create", obj.variable[0].sourceId))
        assertTrue(stringMatch("http://hl7.org/fhir/testscrip", obj.setup!!.action[0].operation!!.type!!.system))
        assertTrue(stringMatch("delete", obj.setup!!.action[0].operation!!.type!!.code))
        assertTrue(stringMatch("Patient", obj.setup!!.action[0].operation!!.resource))
        assertTrue(stringMatch("SetupDeletePatient", obj.setup!!.action[0].operation!!.label))
        assertTrue(stringMatch("Execute a delete operation to", obj.setup!!.action[0].operation!!.description))
        assertTrue(stringMatch("xml", obj.setup!!.action[0].operation!!.accept))
        assertTrue(stringMatch("/${'$'}{createResourceId}", obj.setup!!.action[0].operation!!.params))
        assertTrue(stringMatch("Confirm that the returned HTT", obj.setup!!.action[1].assert_fhir!!.description))
        assertTrue(stringMatch("response", obj.setup!!.action[1].assert_fhir!!.direction))
        assertTrue(stringMatch("in", obj.setup!!.action[1].assert_fhir!!.operator))
        assertTrue(stringMatch("200,204", obj.setup!!.action[1].assert_fhir!!.responseCode))
        assertTrue(stringMatch("http://hl7.org/fhir/testscrip", obj.setup!!.action[2].operation!!.type!!.system))
        assertTrue(stringMatch("update", obj.setup!!.action[2].operation!!.type!!.code))
        assertTrue(stringMatch("Patient", obj.setup!!.action[2].operation!!.resource))
        assertTrue(stringMatch("SetupCreatePatient", obj.setup!!.action[2].operation!!.label))
        assertTrue(stringMatch("Create patient resource on te", obj.setup!!.action[2].operation!!.description))
        assertTrue(stringMatch("xml", obj.setup!!.action[2].operation!!.accept))
        assertTrue(stringMatch("xml", obj.setup!!.action[2].operation!!.contentType))
        assertTrue(stringMatch("/${'$'}{createResourceId}", obj.setup!!.action[2].operation!!.params))
        assertTrue(stringMatch("fixture-patient-create", obj.setup!!.action[2].operation!!.sourceId))
        assertTrue(stringMatch("Confirm that the returned HTT", obj.setup!!.action[3].assert_fhir!!.description))
        assertTrue(stringMatch("response", obj.setup!!.action[3].assert_fhir!!.direction))
        assertTrue(stringMatch("201", obj.setup!!.action[3].assert_fhir!!.responseCode))
        assertTrue(stringMatch("01-UpdatePatient", obj.test[0].id))
        assertTrue(stringMatch("Update Patient", obj.test[0].name))
        assertTrue(stringMatch("Update a Patient and validate", obj.test[0].description))
        assertTrue(stringMatch("http://hl7.org/fhir/testscrip", obj.test[0].action[0].operation!!.type!!.system))
        assertTrue(stringMatch("update", obj.test[0].action[0].operation!!.type!!.code))
        assertTrue(stringMatch("Patient", obj.test[0].action[0].operation!!.resource))
        assertTrue(stringMatch("SetupUpdatePatient", obj.test[0].action[0].operation!!.label))
        assertTrue(stringMatch("Update patient resource on te", obj.test[0].action[0].operation!!.description))
        assertTrue(stringMatch("xml", obj.test[0].action[0].operation!!.accept))
        assertTrue(stringMatch("xml", obj.test[0].action[0].operation!!.contentType))
        assertTrue(stringMatch("/${'$'}{createResourceId}", obj.test[0].action[0].operation!!.params))
        assertTrue(stringMatch("fixture-patient-update", obj.test[0].action[0].operation!!.sourceId))
        assertTrue(stringMatch("Confirm that the returned HTT", obj.test[0].action[1].assert_fhir!!.description))
        assertTrue(stringMatch("okay", obj.test[0].action[1].assert_fhir!!.response))
        assertTrue(stringMatch("Confirm that the returned for", obj.test[0].action[2].assert_fhir!!.description))
        assertTrue(stringMatch("xml", obj.test[0].action[2].assert_fhir!!.contentType))
        assertTrue(stringMatch("Confirm that the returned HTT", obj.test[0].action[3].assert_fhir!!.description))
        assertTrue(stringMatch("Last-Modified", obj.test[0].action[3].assert_fhir!!.headerField))
        assertTrue(stringMatch("notEmpty", obj.test[0].action[3].assert_fhir!!.operator))
        assertEquals(true, if (obj.test[0].action[3].assert_fhir!!.warningOnly != null) obj.test[0].action[3].assert_fhir!!.warningOnly else false, "Field: obj.test[0].action[3].assert_fhir!!.warningOnly")
    }

    fun `testscript-example-update Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `testscript-example-rule 195 Test`() {
        val json = File("./src/test/resources/model/sample_data/testscript-example-rule.json").readTextAndClose()
        val obj = mapper.fromJson(json, TestScript::class.java)
        assertTrue(stringMatch("TestScript", obj.resourceType))
        assertTrue(stringMatch("testscript-example-rule", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://hl7.org/fhir/TestScrip", obj.url))
        assertTrue(stringMatch("urn:ietf:rfc:3986", obj.identifier!!.system))
        assertTrue(stringMatch("urn:oid:1.3.6.1.4.1.21367.200", obj.identifier!!.value))
        assertTrue(stringMatch("1.0", obj.version))
        assertTrue(stringMatch("TestScript Example", obj.name))
        assertTrue(stringMatch("draft", obj.status))
        assertEquals(true, if (obj.experimental != null) obj.experimental else false, "Field: obj.experimental")
        assertTrue(stringMatch("2017-01-18", obj.date))
        assertTrue(stringMatch("HL7", obj.publisher))
        assertTrue(stringMatch("Support", obj.contact[0].name))
        assertTrue(stringMatch("email", obj.contact[0].telecom[0].system))
        assertTrue(stringMatch("support@HL7.org", obj.contact[0].telecom[0].value))
        assertTrue(stringMatch("work", obj.contact[0].telecom[0].use))
        assertTrue(stringMatch("TestScript example resource w", obj.description))
        assertTrue(stringMatch("urn:iso:std:iso:3166", obj.jurisdiction[0].coding[0].system))
        assertTrue(stringMatch("US", obj.jurisdiction[0].coding[0].code))
        assertTrue(stringMatch("United States of America (the", obj.jurisdiction[0].coding[0].display))
        assertTrue(stringMatch("Patient Conditional Create (U", obj.purpose))
        assertTrue(stringMatch("Â© HL7.org 2011+", obj.copyright))
        assertTrue(stringMatch("http://hl7.org/fhir/patient.h", obj.metadata!!.link[0].url))
        assertTrue(stringMatch("Demographics and other admini", obj.metadata!!.link[0].description))
        assertEquals(true, if (obj.metadata!!.capability[0].required != null) obj.metadata!!.capability[0].required else false, "Field: obj.metadata!!.capability[0].required")
        assertTrue(stringMatch("Patient Update, Read and Dele", obj.metadata!!.capability[0].description))
        assertTrue(stringMatch("http://hl7.org/fhir/http.html", obj.metadata!!.capability[0].link[0]))
        assertTrue(stringMatch("http://hl7.org/fhir/http.html", obj.metadata!!.capability[0].link[1]))
        assertTrue(stringMatch("http://hl7.org/fhir/http.html", obj.metadata!!.capability[0].link[2]))
        assertTrue(stringMatch("CapabilityStatement/example", obj.metadata!!.capability[0].capabilities.reference))
        assertTrue(stringMatch("fixture-patient-create", obj.fixture[0].id))
        assertEquals(false, if (obj.fixture[0].autocreate != null) obj.fixture[0].autocreate else false, "Field: obj.fixture[0].autocreate")
        assertEquals(false, if (obj.fixture[0].autodelete != null) obj.fixture[0].autodelete else false, "Field: obj.fixture[0].autodelete")
        assertTrue(stringMatch("Patient/example", obj.fixture[0].resource!!.reference))
        assertTrue(stringMatch("Peter Chalmers", obj.fixture[0].resource!!.display))
        assertTrue(stringMatch("fixture-patient-minimum", obj.fixture[1].id))
        assertEquals(false, if (obj.fixture[1].autocreate != null) obj.fixture[1].autocreate else false, "Field: obj.fixture[1].autocreate")
        assertEquals(false, if (obj.fixture[1].autodelete != null) obj.fixture[1].autodelete else false, "Field: obj.fixture[1].autodelete")
        assertTrue(stringMatch("Patient/example", obj.fixture[1].resource!!.reference))
        assertTrue(stringMatch("Peter Chalmers (minimum)", obj.fixture[1].resource!!.display))
        assertTrue(stringMatch("patient-profile", obj.profile[0].id))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.profile[0].reference))
        assertTrue(stringMatch("createResourceId", obj.variable[0].name))
        assertTrue(stringMatch("Patient/id", obj.variable[0].path))
        assertTrue(stringMatch("fixture-patient-create", obj.variable[0].sourceId))
        assertTrue(stringMatch("rule-responseStatusCode", obj.rule[0].id))
        assertTrue(stringMatch("TestScript/testscript-example", obj.rule[0].resource.reference))
        assertTrue(stringMatch("expectedStatusCode", obj.rule[0].param[0].name))
        assertTrue(stringMatch("200", obj.rule[0].param[0].value))
        assertTrue(stringMatch("ruleset-responseContentTypeSt", obj.ruleset[0].id))
        assertTrue(stringMatch("TestScript/testscript-example", obj.ruleset[0].resource.reference))
        assertTrue(stringMatch("RuleResponseContentType", obj.ruleset[0].rule[0].ruleId))
        assertTrue(stringMatch("expectedContentType", obj.ruleset[0].rule[0].param[0].name))
        assertTrue(stringMatch("json", obj.ruleset[0].rule[0].param[0].value))
        assertTrue(stringMatch("RuleResponseStatusCode", obj.ruleset[0].rule[1].ruleId))
        assertTrue(stringMatch("expectedStatusCode", obj.ruleset[0].rule[1].param[0].name))
        assertTrue(stringMatch("200", obj.ruleset[0].rule[1].param[0].value))
        assertTrue(stringMatch("http://hl7.org/fhir/testscrip", obj.setup!!.action[0].operation!!.type!!.system))
        assertTrue(stringMatch("delete", obj.setup!!.action[0].operation!!.type!!.code))
        assertTrue(stringMatch("Patient", obj.setup!!.action[0].operation!!.resource))
        assertTrue(stringMatch("SetupDeletePatient", obj.setup!!.action[0].operation!!.label))
        assertTrue(stringMatch("Execute a delete operation to", obj.setup!!.action[0].operation!!.description))
        assertTrue(stringMatch("json", obj.setup!!.action[0].operation!!.accept))
        assertTrue(stringMatch("/${'$'}{createResourceId}", obj.setup!!.action[0].operation!!.params))
        assertTrue(stringMatch("Confirm that the returned HTT", obj.setup!!.action[1].assert_fhir!!.description))
        assertTrue(stringMatch("response", obj.setup!!.action[1].assert_fhir!!.direction))
        assertTrue(stringMatch("in", obj.setup!!.action[1].assert_fhir!!.operator))
        assertTrue(stringMatch("200,204", obj.setup!!.action[1].assert_fhir!!.responseCode))
        assertTrue(stringMatch("http://hl7.org/fhir/testscrip", obj.setup!!.action[2].operation!!.type!!.system))
        assertTrue(stringMatch("update", obj.setup!!.action[2].operation!!.type!!.code))
        assertTrue(stringMatch("Patient", obj.setup!!.action[2].operation!!.resource))
        assertTrue(stringMatch("SetupCreatePatient", obj.setup!!.action[2].operation!!.label))
        assertTrue(stringMatch("Create patient resource on te", obj.setup!!.action[2].operation!!.description))
        assertTrue(stringMatch("json", obj.setup!!.action[2].operation!!.accept))
        assertTrue(stringMatch("json", obj.setup!!.action[2].operation!!.contentType))
        assertTrue(stringMatch("/${'$'}{createResourceId}", obj.setup!!.action[2].operation!!.params))
        assertTrue(stringMatch("fixture-patient-create", obj.setup!!.action[2].operation!!.sourceId))
        assertTrue(stringMatch("Setup-RuleCreateOK", obj.setup!!.action[3].assert_fhir!!.label))
        assertTrue(stringMatch("Confirm that the returned HTT", obj.setup!!.action[3].assert_fhir!!.description))
        assertTrue(stringMatch("response", obj.setup!!.action[3].assert_fhir!!.direction))
        assertTrue(stringMatch("rule-responseStatusCode", obj.setup!!.action[3].assert_fhir!!.rule!!.ruleId))
        assertTrue(stringMatch("expectedStatusCode", obj.setup!!.action[3].assert_fhir!!.rule!!.param[0].name))
        assertTrue(stringMatch("201", obj.setup!!.action[3].assert_fhir!!.rule!!.param[0].value))
        assertTrue(stringMatch("01-ReadPatient", obj.test[0].id))
        assertTrue(stringMatch("Read Patient", obj.test[0].name))
        assertTrue(stringMatch("Read a patient and validate r", obj.test[0].description))
        assertTrue(stringMatch("http://hl7.org/fhir/testscrip", obj.test[0].action[0].operation!!.type!!.system))
        assertTrue(stringMatch("read", obj.test[0].action[0].operation!!.type!!.code))
        assertTrue(stringMatch("Patient", obj.test[0].action[0].operation!!.resource))
        assertTrue(stringMatch("Read the patient resource on ", obj.test[0].action[0].operation!!.description))
        assertEquals(false, if (obj.test[0].action[0].operation!!.encodeRequestUrl != null) obj.test[0].action[0].operation!!.encodeRequestUrl else false, "Field: obj.test[0].action[0].operation!!.encodeRequestUrl")
        assertTrue(stringMatch("fixture-patient-read", obj.test[0].action[0].operation!!.responseId))
        assertTrue(stringMatch("fixture-patient-create", obj.test[0].action[0].operation!!.targetId))
        assertTrue(stringMatch("01-RuleReadPatientOK", obj.test[0].action[1].assert_fhir!!.label))
        assertTrue(stringMatch("Confirm that the returned HTT", obj.test[0].action[1].assert_fhir!!.description))
        assertTrue(stringMatch("rule-responseStatusCode", obj.test[0].action[1].assert_fhir!!.rule!!.ruleId))
        assertTrue(stringMatch("01-RuleReadPatientContentType", obj.test[0].action[2].assert_fhir!!.label))
        assertTrue(stringMatch("ruleset-responseResourcePatie", obj.test[0].action[2].assert_fhir!!.ruleset!!.rulesetId))
        assertTrue(stringMatch("RuleResponseContentType", obj.test[0].action[2].assert_fhir!!.ruleset!!.rule[0].ruleId))
        assertTrue(stringMatch("expectedContentType", obj.test[0].action[2].assert_fhir!!.ruleset!!.rule[0].param[0].name))
        assertTrue(stringMatch("XML", obj.test[0].action[2].assert_fhir!!.ruleset!!.rule[0].param[0].value))
        assertTrue(stringMatch("Confirm that the returned HTT", obj.test[0].action[3].assert_fhir!!.description))
        assertTrue(stringMatch("response", obj.test[0].action[3].assert_fhir!!.direction))
        assertTrue(stringMatch("Last-Modified", obj.test[0].action[3].assert_fhir!!.headerField))
        assertTrue(stringMatch("notEmpty", obj.test[0].action[3].assert_fhir!!.operator))
        assertEquals(true, if (obj.test[0].action[3].assert_fhir!!.warningOnly != null) obj.test[0].action[3].assert_fhir!!.warningOnly else false, "Field: obj.test[0].action[3].assert_fhir!!.warningOnly")
    }

    @Test
    fun `testscript-example-rule 196 Test`() {
        val json = File("./src/test/resources/model/sample_data/testscript-example-rule.json").readTextAndClose()
        val obj = mapper.fromJson(json, TestScript::class.java)
        assertTrue(stringMatch("Confirm that the returned res", obj.test[0].action[4].assert_fhir!!.description))
        assertTrue(stringMatch("Patient", obj.test[0].action[4].assert_fhir!!.resource))
        assertTrue(stringMatch("Confirm that the returned Pat", obj.test[0].action[5].assert_fhir!!.description))
        assertTrue(stringMatch("patient-profile", obj.test[0].action[5].assert_fhir!!.validateProfileId))
        assertTrue(stringMatch("Confirm that the returned Pat", obj.test[0].action[6].assert_fhir!!.description))
        assertTrue(stringMatch("equals", obj.test[0].action[6].assert_fhir!!.operator))
        assertTrue(stringMatch("fhir:Patient/fhir:name/fhir:f", obj.test[0].action[6].assert_fhir!!.path))
        assertTrue(stringMatch("fixture-patient-read", obj.test[0].action[6].assert_fhir!!.sourceId))
        assertTrue(stringMatch("Chalmers", obj.test[0].action[6].assert_fhir!!.value))
        assertTrue(stringMatch("Confirm that the returned Pat", obj.test[0].action[7].assert_fhir!!.description))
        assertTrue(stringMatch("equals", obj.test[0].action[7].assert_fhir!!.operator))
        assertTrue(stringMatch("fhir:Patient/fhir:name/fhir:g", obj.test[0].action[7].assert_fhir!!.path))
        assertTrue(stringMatch("fixture-patient-read", obj.test[0].action[7].assert_fhir!!.sourceId))
        assertTrue(stringMatch("Peter", obj.test[0].action[7].assert_fhir!!.value))
        assertTrue(stringMatch("Confirm that the returned Pat", obj.test[0].action[8].assert_fhir!!.description))
        assertTrue(stringMatch("fixture-patient-create", obj.test[0].action[8].assert_fhir!!.compareToSourceId))
        assertTrue(stringMatch("fhir:Patient/fhir:name/fhir:f", obj.test[0].action[8].assert_fhir!!.compareToSourcePath))
        assertTrue(stringMatch("equals", obj.test[0].action[8].assert_fhir!!.operator))
        assertTrue(stringMatch("fhir:Patient/fhir:name/fhir:f", obj.test[0].action[8].assert_fhir!!.path))
        assertTrue(stringMatch("Confirm that the returned Pat", obj.test[0].action[9].assert_fhir!!.description))
        assertTrue(stringMatch("fixture-patient-create", obj.test[0].action[9].assert_fhir!!.compareToSourceId))
        assertTrue(stringMatch("fhir:Patient/fhir:name/fhir:g", obj.test[0].action[9].assert_fhir!!.compareToSourcePath))
        assertTrue(stringMatch("fhir:Patient/fhir:name/fhir:g", obj.test[0].action[9].assert_fhir!!.path))
        assertTrue(stringMatch("fixture-patient-read", obj.test[0].action[9].assert_fhir!!.sourceId))
        assertTrue(stringMatch("Confirm that the returned res", obj.test[0].action[10].assert_fhir!!.description))
        assertTrue(stringMatch("fixture-patient-minimum", obj.test[0].action[10].assert_fhir!!.minimumId))
        assertEquals(true, if (obj.test[0].action[10].assert_fhir!!.warningOnly != null) obj.test[0].action[10].assert_fhir!!.warningOnly else false, "Field: obj.test[0].action[10].assert_fhir!!.warningOnly")
    }

    fun `testscript-example-rule Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `testscript-example-search 197 Test`() {
        val json = File("./src/test/resources/model/sample_data/testscript-example-search.json").readTextAndClose()
        val obj = mapper.fromJson(json, TestScript::class.java)
        assertTrue(stringMatch("TestScript", obj.resourceType))
        assertTrue(stringMatch("testscript-example-search", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://hl7.org/fhir/TestScrip", obj.url))
        assertTrue(stringMatch("urn:ietf:rfc:3986", obj.identifier!!.system))
        assertTrue(stringMatch("urn:oid:1.3.6.1.4.1.21367.200", obj.identifier!!.value))
        assertTrue(stringMatch("1.0", obj.version))
        assertTrue(stringMatch("TestScript Example Search", obj.name))
        assertTrue(stringMatch("draft", obj.status))
        assertEquals(true, if (obj.experimental != null) obj.experimental else false, "Field: obj.experimental")
        assertTrue(stringMatch("2017-01-18", obj.date))
        assertTrue(stringMatch("HL7", obj.publisher))
        assertTrue(stringMatch("Support", obj.contact[0].name))
        assertTrue(stringMatch("email", obj.contact[0].telecom[0].system))
        assertTrue(stringMatch("support@HL7.org", obj.contact[0].telecom[0].value))
        assertTrue(stringMatch("work", obj.contact[0].telecom[0].use))
        assertTrue(stringMatch("TestScript example resource w", obj.description))
        assertTrue(stringMatch("urn:iso:std:iso:3166", obj.jurisdiction[0].coding[0].system))
        assertTrue(stringMatch("US", obj.jurisdiction[0].coding[0].code))
        assertTrue(stringMatch("United States of America (the", obj.jurisdiction[0].coding[0].display))
        assertTrue(stringMatch("Patient Search Operation", obj.purpose))
        assertTrue(stringMatch("Â© HL7.org 2011+", obj.copyright))
        assertTrue(stringMatch("http://hl7.org/fhir/patient.h", obj.metadata!!.link[0].url))
        assertTrue(stringMatch("Demographics and other admini", obj.metadata!!.link[0].description))
        assertEquals(true, if (obj.metadata!!.capability[0].required != null) obj.metadata!!.capability[0].required else false, "Field: obj.metadata!!.capability[0].required")
        assertTrue(stringMatch("Patient Search Operation", obj.metadata!!.capability[0].description))
        assertTrue(stringMatch("http://hl7.org/fhir/http.html", obj.metadata!!.capability[0].link[0]))
        assertTrue(stringMatch("CapabilityStatement/example", obj.metadata!!.capability[0].capabilities.reference))
        assertTrue(stringMatch("fixture-patient-create", obj.fixture[0].id))
        assertTrue(stringMatch("Patient/example", obj.fixture[0].resource!!.reference))
        assertTrue(stringMatch("Peter Chalmers", obj.fixture[0].resource!!.display))
        assertTrue(stringMatch("bundle-profile", obj.profile[0].id))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.profile[0].reference))
        assertTrue(stringMatch("PatientCreateLocation", obj.variable[0].name))
        assertTrue(stringMatch("Location", obj.variable[0].headerField))
        assertTrue(stringMatch("PatientCreateResponse", obj.variable[0].sourceId))
        assertTrue(stringMatch("PatientSearchFamilyName", obj.variable[1].name))
        assertTrue(stringMatch("Enter patient search criteria", obj.variable[1].description))
        assertTrue(stringMatch("[Family name]", obj.variable[1].hint))
        assertTrue(stringMatch("PatientSearchGivenName", obj.variable[2].name))
        assertTrue(stringMatch("Enter patient search criteria", obj.variable[2].description))
        assertTrue(stringMatch("[Given name]", obj.variable[2].hint))
        assertTrue(stringMatch("PatientSearchBundleTotal", obj.variable[3].name))
        assertTrue(stringMatch("Evaluate the returned Patient", obj.variable[3].description))
        assertTrue(stringMatch("Bundle.total.toInteger()", obj.variable[3].expression))
        assertTrue(stringMatch("http://hl7.org/fhir/testscrip", obj.setup!!.action[0].operation!!.type!!.system))
        assertTrue(stringMatch("search", obj.setup!!.action[0].operation!!.type!!.code))
        assertTrue(stringMatch("Patient", obj.setup!!.action[0].operation!!.resource))
        assertTrue(stringMatch("Test simple search to verify ", obj.setup!!.action[0].operation!!.description))
        assertTrue(stringMatch("xml", obj.setup!!.action[0].operation!!.accept))
        assertTrue(stringMatch("?family=DONTEXPECTAMATCH&give", obj.setup!!.action[0].operation!!.params))
        assertTrue(stringMatch("Confirm that the request url ", obj.setup!!.action[1].assert_fhir!!.description))
        assertTrue(stringMatch("request", obj.setup!!.action[1].assert_fhir!!.direction))
        assertTrue(stringMatch("contains", obj.setup!!.action[1].assert_fhir!!.operator))
        assertTrue(stringMatch("family", obj.setup!!.action[1].assert_fhir!!.requestURL))
        assertTrue(stringMatch("Confirm that the returned HTT", obj.setup!!.action[2].assert_fhir!!.description))
        assertTrue(stringMatch("response", obj.setup!!.action[2].assert_fhir!!.direction))
        assertTrue(stringMatch("200", obj.setup!!.action[2].assert_fhir!!.responseCode))
        assertTrue(stringMatch("Confirm that the returned res", obj.setup!!.action[3].assert_fhir!!.description))
        assertTrue(stringMatch("Bundle", obj.setup!!.action[3].assert_fhir!!.resource))
        assertTrue(stringMatch("Confirm that the returned Bun", obj.setup!!.action[4].assert_fhir!!.description))
        assertEquals(true, if (obj.setup!!.action[4].assert_fhir!!.navigationLinks != null) obj.setup!!.action[4].assert_fhir!!.navigationLinks else false, "Field: obj.setup!!.action[4].assert_fhir!!.navigationLinks")
        assertTrue(stringMatch("01-PatientCreateSearch", obj.test[0].id))
        assertTrue(stringMatch("Patient Create Search", obj.test[0].name))
        assertTrue(stringMatch("Create a Patient resource and", obj.test[0].description))
        assertTrue(stringMatch("http://hl7.org/fhir/testscrip", obj.test[0].action[0].operation!!.type!!.system))
        assertTrue(stringMatch("create", obj.test[0].action[0].operation!!.type!!.code))
        assertTrue(stringMatch("Patient", obj.test[0].action[0].operation!!.resource))
        assertTrue(stringMatch("Create a Patient resource and", obj.test[0].action[0].operation!!.description))
        assertTrue(stringMatch("xml", obj.test[0].action[0].operation!!.accept))
        assertTrue(stringMatch("xml", obj.test[0].action[0].operation!!.contentType))
        assertTrue(stringMatch("PatientCreateResponse", obj.test[0].action[0].operation!!.responseId))
        assertTrue(stringMatch("fixture-patient-create", obj.test[0].action[0].operation!!.sourceId))
        assertTrue(stringMatch("Confirm that the returned HTT", obj.test[0].action[1].assert_fhir!!.description))
        assertTrue(stringMatch("created", obj.test[0].action[1].assert_fhir!!.response))
        assertTrue(stringMatch("Confirm that the returned HTT", obj.test[0].action[2].assert_fhir!!.description))
        assertTrue(stringMatch("response", obj.test[0].action[2].assert_fhir!!.direction))
        assertTrue(stringMatch("Location", obj.test[0].action[2].assert_fhir!!.headerField))
        assertTrue(stringMatch("notEmpty", obj.test[0].action[2].assert_fhir!!.operator))
        assertTrue(stringMatch("http://hl7.org/fhir/testscrip", obj.test[0].action[3].operation!!.type!!.system))
        assertTrue(stringMatch("read", obj.test[0].action[3].operation!!.type!!.code))
        assertTrue(stringMatch("Read the created Patient usin", obj.test[0].action[3].operation!!.description))
        assertTrue(stringMatch("xml", obj.test[0].action[3].operation!!.accept))
        assertTrue(stringMatch("${'$'}{PatientCreateLocation}", obj.test[0].action[3].operation!!.url))
        assertTrue(stringMatch("Confirm that the returned HTT", obj.test[0].action[4].assert_fhir!!.description))
        assertTrue(stringMatch("okay", obj.test[0].action[4].assert_fhir!!.response))
        assertTrue(stringMatch("Confirm that the returned res", obj.test[0].action[5].assert_fhir!!.description))
        assertTrue(stringMatch("Patient", obj.test[0].action[5].assert_fhir!!.resource))
        assertTrue(stringMatch("02-PatientSearchDynamic", obj.test[1].id))
        assertTrue(stringMatch("Patient Search Dynamic", obj.test[1].name))
        assertTrue(stringMatch("Search for Patient resources ", obj.test[1].description))
        assertTrue(stringMatch("http://hl7.org/fhir/testscrip", obj.test[1].action[0].operation!!.type!!.system))
        assertTrue(stringMatch("search", obj.test[1].action[0].operation!!.type!!.code))
        assertTrue(stringMatch("Patient", obj.test[1].action[0].operation!!.resource))
        assertTrue(stringMatch("Search for Patient resources ", obj.test[1].action[0].operation!!.description))
        assertTrue(stringMatch("xml", obj.test[1].action[0].operation!!.accept))
        assertTrue(stringMatch("?family=${'$'}{PatientSearchFamily", obj.test[1].action[0].operation!!.params))
        assertTrue(stringMatch("Confirm that the returned HTT", obj.test[1].action[1].assert_fhir!!.description))
        assertTrue(stringMatch("okay", obj.test[1].action[1].assert_fhir!!.response))
        assertTrue(stringMatch("Confirm that the returned for", obj.test[1].action[2].assert_fhir!!.description))
        assertTrue(stringMatch("xml", obj.test[1].action[2].assert_fhir!!.contentType))
        assertTrue(stringMatch("Confirm that the returned res", obj.test[1].action[3].assert_fhir!!.description))
        assertTrue(stringMatch("Bundle", obj.test[1].action[3].assert_fhir!!.resource))
        assertTrue(stringMatch("Confirm that the returned Bun", obj.test[1].action[4].assert_fhir!!.description))
        assertTrue(stringMatch("bundle-profile", obj.test[1].action[4].assert_fhir!!.validateProfileId))
        assertTrue(stringMatch("Confirm that the returned Bun", obj.test[1].action[5].assert_fhir!!.description))
        assertTrue(stringMatch("equals", obj.test[1].action[5].assert_fhir!!.operator))
        assertTrue(stringMatch("fhir:Bundle/fhir:type/@value", obj.test[1].action[5].assert_fhir!!.path))
        assertTrue(stringMatch("searchset", obj.test[1].action[5].assert_fhir!!.value))
        assertTrue(stringMatch("Confirm that the returned Bun", obj.test[1].action[6].assert_fhir!!.description))
        assertTrue(stringMatch("Bundle.total.toInteger() >= e", obj.test[1].action[6].assert_fhir!!.expression))
    }

    fun `testscript-example-search Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `testscript-example 198 Test`() {
        val json = File("./src/test/resources/model/sample_data/testscript-example.json").readTextAndClose()
        val obj = mapper.fromJson(json, TestScript::class.java)
        assertTrue(stringMatch("TestScript", obj.resourceType))
        assertTrue(stringMatch("testscript-example", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://hl7.org/fhir/TestScrip", obj.url))
        assertTrue(stringMatch("urn:ietf:rfc:3986", obj.identifier!!.system))
        assertTrue(stringMatch("urn:oid:1.3.6.1.4.1.21367.200", obj.identifier!!.value))
        assertTrue(stringMatch("1.0", obj.version))
        assertTrue(stringMatch("TestScript Example", obj.name))
        assertTrue(stringMatch("draft", obj.status))
        assertEquals(true, if (obj.experimental != null) obj.experimental else false, "Field: obj.experimental")
        assertTrue(stringMatch("2017-01-18", obj.date))
        assertTrue(stringMatch("HL7", obj.publisher))
        assertTrue(stringMatch("Support", obj.contact[0].name))
        assertTrue(stringMatch("email", obj.contact[0].telecom[0].system))
        assertTrue(stringMatch("support@HL7.org", obj.contact[0].telecom[0].value))
        assertTrue(stringMatch("work", obj.contact[0].telecom[0].use))
        assertTrue(stringMatch("TestScript example resource w", obj.description))
        assertTrue(stringMatch("http://hl7.org/fhir/usage-con", obj.useContext[0].code.system))
        assertTrue(stringMatch("focus", obj.useContext[0].code.code))
        assertTrue(stringMatch("http://hl7.org/fhir/variant-s", obj.useContext[0].valueCodeableConcept.coding[0].system))
        assertTrue(stringMatch("positive", obj.useContext[0].valueCodeableConcept.coding[0].code))
        assertTrue(stringMatch("urn:iso:std:iso:3166", obj.jurisdiction[0].coding[0].system))
        assertTrue(stringMatch("US", obj.jurisdiction[0].coding[0].code))
        assertTrue(stringMatch("United States of America (the", obj.jurisdiction[0].coding[0].display))
        assertTrue(stringMatch("Patient Conditional Create (U", obj.purpose))
        assertTrue(stringMatch("Â© HL7.org 2011+", obj.copyright))
        assertTrue(stringMatch("http://hl7.org/fhir/patient.h", obj.metadata!!.link[0].url))
        assertTrue(stringMatch("Demographics and other admini", obj.metadata!!.link[0].description))
        assertEquals(true, if (obj.metadata!!.capability[0].required != null) obj.metadata!!.capability[0].required else false, "Field: obj.metadata!!.capability[0].required")
        assertTrue(stringMatch("Patient Update, Read and Dele", obj.metadata!!.capability[0].description))
        assertTrue(stringMatch("http://hl7.org/fhir/http.html", obj.metadata!!.capability[0].link[0]))
        assertTrue(stringMatch("http://hl7.org/fhir/http.html", obj.metadata!!.capability[0].link[1]))
        assertTrue(stringMatch("http://hl7.org/fhir/http.html", obj.metadata!!.capability[0].link[2]))
        assertTrue(stringMatch("CapabilityStatement/example", obj.metadata!!.capability[0].capabilities.reference))
        assertTrue(stringMatch("fixture-patient-create", obj.fixture[0].id))
        assertEquals(false, if (obj.fixture[0].autocreate != null) obj.fixture[0].autocreate else false, "Field: obj.fixture[0].autocreate")
        assertEquals(false, if (obj.fixture[0].autodelete != null) obj.fixture[0].autodelete else false, "Field: obj.fixture[0].autodelete")
        assertTrue(stringMatch("Patient/example", obj.fixture[0].resource!!.reference))
        assertTrue(stringMatch("Peter Chalmers", obj.fixture[0].resource!!.display))
        assertTrue(stringMatch("fixture-patient-minimum", obj.fixture[1].id))
        assertEquals(false, if (obj.fixture[1].autocreate != null) obj.fixture[1].autocreate else false, "Field: obj.fixture[1].autocreate")
        assertEquals(false, if (obj.fixture[1].autodelete != null) obj.fixture[1].autodelete else false, "Field: obj.fixture[1].autodelete")
        assertTrue(stringMatch("Patient/example", obj.fixture[1].resource!!.reference))
        assertTrue(stringMatch("Peter Chalmers (minimum)", obj.fixture[1].resource!!.display))
        assertTrue(stringMatch("patient-profile", obj.profile[0].id))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.profile[0].reference))
        assertTrue(stringMatch("createResourceId", obj.variable[0].name))
        assertTrue(stringMatch("Patient/id", obj.variable[0].path))
        assertTrue(stringMatch("fixture-patient-create", obj.variable[0].sourceId))
        assertTrue(stringMatch("http://hl7.org/fhir/testscrip", obj.setup!!.action[0].operation!!.type!!.system))
        assertTrue(stringMatch("delete", obj.setup!!.action[0].operation!!.type!!.code))
        assertTrue(stringMatch("Patient", obj.setup!!.action[0].operation!!.resource))
        assertTrue(stringMatch("SetupDeletePatient", obj.setup!!.action[0].operation!!.label))
        assertTrue(stringMatch("Execute a delete operation to", obj.setup!!.action[0].operation!!.description))
        assertTrue(stringMatch("json", obj.setup!!.action[0].operation!!.accept))
        assertTrue(stringMatch("/${'$'}{createResourceId}", obj.setup!!.action[0].operation!!.params))
        assertTrue(stringMatch("Confirm that the returned HTT", obj.setup!!.action[1].assert_fhir!!.description))
        assertTrue(stringMatch("response", obj.setup!!.action[1].assert_fhir!!.direction))
        assertTrue(stringMatch("in", obj.setup!!.action[1].assert_fhir!!.operator))
        assertTrue(stringMatch("200,204", obj.setup!!.action[1].assert_fhir!!.responseCode))
        assertTrue(stringMatch("http://hl7.org/fhir/testscrip", obj.setup!!.action[2].operation!!.type!!.system))
        assertTrue(stringMatch("update", obj.setup!!.action[2].operation!!.type!!.code))
        assertTrue(stringMatch("Patient", obj.setup!!.action[2].operation!!.resource))
        assertTrue(stringMatch("SetupCreatePatient", obj.setup!!.action[2].operation!!.label))
        assertTrue(stringMatch("Create patient resource on te", obj.setup!!.action[2].operation!!.description))
        assertTrue(stringMatch("json", obj.setup!!.action[2].operation!!.accept))
        assertTrue(stringMatch("json", obj.setup!!.action[2].operation!!.contentType))
        assertTrue(stringMatch("/${'$'}{createResourceId}", obj.setup!!.action[2].operation!!.params))
        assertTrue(stringMatch("fixture-patient-create", obj.setup!!.action[2].operation!!.sourceId))
        assertTrue(stringMatch("Confirm that the returned HTT", obj.setup!!.action[3].assert_fhir!!.description))
        assertTrue(stringMatch("response", obj.setup!!.action[3].assert_fhir!!.direction))
        assertTrue(stringMatch("201", obj.setup!!.action[3].assert_fhir!!.responseCode))
        assertTrue(stringMatch("http://hl7.org/fhir/testscrip", obj.setup!!.action[4].operation!!.type!!.system))
        assertTrue(stringMatch("read", obj.setup!!.action[4].operation!!.type!!.code))
        assertTrue(stringMatch("Patient", obj.setup!!.action[4].operation!!.resource))
        assertTrue(stringMatch("Read the created patient reso", obj.setup!!.action[4].operation!!.description))
        assertTrue(stringMatch("fixture-patient-create", obj.setup!!.action[4].operation!!.targetId))
        assertTrue(stringMatch("Confirm that the returned HTT", obj.setup!!.action[5].assert_fhir!!.description))
        assertTrue(stringMatch("response", obj.setup!!.action[5].assert_fhir!!.direction))
        assertTrue(stringMatch("okay", obj.setup!!.action[5].assert_fhir!!.response))
        assertTrue(stringMatch("Confirm that the returned Pat", obj.setup!!.action[6].assert_fhir!!.description))
        assertTrue(stringMatch("fixture-patient-create", obj.setup!!.action[6].assert_fhir!!.compareToSourceId))
        assertTrue(stringMatch("Patient.name.first().family", obj.setup!!.action[6].assert_fhir!!.compareToSourceExpression))
        assertTrue(stringMatch("equals", obj.setup!!.action[6].assert_fhir!!.operator))
        assertTrue(stringMatch("01-ReadPatient", obj.test[0].id))
        assertTrue(stringMatch("Read Patient", obj.test[0].name))
        assertTrue(stringMatch("Read a Patient and validate r", obj.test[0].description))
        assertTrue(stringMatch("http://hl7.org/fhir/testscrip", obj.test[0].action[0].operation!!.type!!.system))
        assertTrue(stringMatch("read", obj.test[0].action[0].operation!!.type!!.code))
        assertTrue(stringMatch("Patient", obj.test[0].action[0].operation!!.resource))
        assertTrue(stringMatch("Read the patient resource on ", obj.test[0].action[0].operation!!.description))
        assertEquals(false, if (obj.test[0].action[0].operation!!.encodeRequestUrl != null) obj.test[0].action[0].operation!!.encodeRequestUrl else false, "Field: obj.test[0].action[0].operation!!.encodeRequestUrl")
        assertTrue(stringMatch("fixture-patient-read", obj.test[0].action[0].operation!!.responseId))
        assertTrue(stringMatch("fixture-patient-create", obj.test[0].action[0].operation!!.targetId))
        assertTrue(stringMatch("01-ReadPatientOK", obj.test[0].action[1].assert_fhir!!.label))
        assertTrue(stringMatch("Confirm that the returned HTT", obj.test[0].action[1].assert_fhir!!.description))
        assertTrue(stringMatch("response", obj.test[0].action[1].assert_fhir!!.direction))
        assertTrue(stringMatch("okay", obj.test[0].action[1].assert_fhir!!.response))
        assertTrue(stringMatch("Confirm that the returned HTT", obj.test[0].action[2].assert_fhir!!.description))
        assertTrue(stringMatch("response", obj.test[0].action[2].assert_fhir!!.direction))
        assertTrue(stringMatch("Last-Modified", obj.test[0].action[2].assert_fhir!!.headerField))
        assertTrue(stringMatch("notEmpty", obj.test[0].action[2].assert_fhir!!.operator))
        assertEquals(true, if (obj.test[0].action[2].assert_fhir!!.warningOnly != null) obj.test[0].action[2].assert_fhir!!.warningOnly else false, "Field: obj.test[0].action[2].assert_fhir!!.warningOnly")
        assertTrue(stringMatch("Confirm that the returned res", obj.test[0].action[3].assert_fhir!!.description))
        assertTrue(stringMatch("Patient", obj.test[0].action[3].assert_fhir!!.resource))
        assertTrue(stringMatch("Confirm that the returned Pat", obj.test[0].action[4].assert_fhir!!.description))
        assertTrue(stringMatch("patient-profile", obj.test[0].action[4].assert_fhir!!.validateProfileId))
        assertTrue(stringMatch("Confirm that the returned Pat", obj.test[0].action[5].assert_fhir!!.description))
        assertTrue(stringMatch("equals", obj.test[0].action[5].assert_fhir!!.operator))
        assertTrue(stringMatch("fhir:Patient/fhir:name/fhir:f", obj.test[0].action[5].assert_fhir!!.path))
        assertTrue(stringMatch("fixture-patient-read", obj.test[0].action[5].assert_fhir!!.sourceId))
        assertTrue(stringMatch("Chalmers", obj.test[0].action[5].assert_fhir!!.value))
        assertTrue(stringMatch("Confirm that the returned Pat", obj.test[0].action[6].assert_fhir!!.description))
        assertTrue(stringMatch("equals", obj.test[0].action[6].assert_fhir!!.operator))
        assertTrue(stringMatch("fhir:Patient/fhir:name/fhir:g", obj.test[0].action[6].assert_fhir!!.path))
        assertTrue(stringMatch("fixture-patient-read", obj.test[0].action[6].assert_fhir!!.sourceId))
        assertTrue(stringMatch("Peter", obj.test[0].action[6].assert_fhir!!.value))
        assertTrue(stringMatch("Confirm that the returned Pat", obj.test[0].action[7].assert_fhir!!.description))
        assertTrue(stringMatch("fixture-patient-create", obj.test[0].action[7].assert_fhir!!.compareToSourceId))
        assertTrue(stringMatch("fhir:Patient/fhir:name/fhir:f", obj.test[0].action[7].assert_fhir!!.compareToSourcePath))
        assertTrue(stringMatch("equals", obj.test[0].action[7].assert_fhir!!.operator))
        assertTrue(stringMatch("fhir:Patient/fhir:name/fhir:f", obj.test[0].action[7].assert_fhir!!.path))
        assertTrue(stringMatch("Confirm that the returned Pat", obj.test[0].action[8].assert_fhir!!.description))
        assertTrue(stringMatch("fixture-patient-create", obj.test[0].action[8].assert_fhir!!.compareToSourceId))
        assertTrue(stringMatch("fhir:Patient/fhir:name/fhir:g", obj.test[0].action[8].assert_fhir!!.compareToSourcePath))
        assertTrue(stringMatch("fhir:Patient/fhir:name/fhir:g", obj.test[0].action[8].assert_fhir!!.path))
        assertTrue(stringMatch("fixture-patient-read", obj.test[0].action[8].assert_fhir!!.sourceId))
        assertTrue(stringMatch("Confirm that the returned res", obj.test[0].action[9].assert_fhir!!.description))
        assertTrue(stringMatch("fixture-patient-minimum", obj.test[0].action[9].assert_fhir!!.minimumId))
        assertEquals(true, if (obj.test[0].action[9].assert_fhir!!.warningOnly != null) obj.test[0].action[9].assert_fhir!!.warningOnly else false, "Field: obj.test[0].action[9].assert_fhir!!.warningOnly")
        assertTrue(stringMatch("http://hl7.org/fhir/testscrip", obj.teardown!!.action[0].operation.type!!.system))
        assertTrue(stringMatch("delete", obj.teardown!!.action[0].operation.type!!.code))
        assertTrue(stringMatch("Patient", obj.teardown!!.action[0].operation.resource))
        assertTrue(stringMatch("Delete the patient resource o", obj.teardown!!.action[0].operation.description))
        assertTrue(stringMatch("fixture-patient-create", obj.teardown!!.action[0].operation.targetId))
    }

    fun `testscript-example Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }

    @Test
    fun `testscript-example-readtest 199 Test`() {
        val json = File("./src/test/resources/model/sample_data/testscript-example-readtest.json").readTextAndClose()
        val obj = mapper.fromJson(json, TestScript::class.java)
        assertTrue(stringMatch("TestScript", obj.resourceType))
        assertTrue(stringMatch("testscript-example-readtest", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://hl7.org/fhir/TestScrip", obj.url))
        assertTrue(stringMatch("urn:ietf:rfc:3986", obj.identifier!!.system))
        assertTrue(stringMatch("urn:oid:1.3.6.1.4.1.21367.200", obj.identifier!!.value))
        assertTrue(stringMatch("1.0", obj.version))
        assertTrue(stringMatch("TestScript Example Read Test", obj.name))
        assertTrue(stringMatch("draft", obj.status))
        assertEquals(true, if (obj.experimental != null) obj.experimental else false, "Field: obj.experimental")
        assertTrue(stringMatch("2017-01-18", obj.date))
        assertTrue(stringMatch("HL7", obj.publisher))
        assertTrue(stringMatch("Support", obj.contact[0].name))
        assertTrue(stringMatch("email", obj.contact[0].telecom[0].system))
        assertTrue(stringMatch("support@HL7.org", obj.contact[0].telecom[0].value))
        assertTrue(stringMatch("work", obj.contact[0].telecom[0].use))
        assertTrue(stringMatch("TestScript example resource w", obj.description))
        assertTrue(stringMatch("urn:iso:std:iso:3166", obj.jurisdiction[0].coding[0].system))
        assertTrue(stringMatch("US", obj.jurisdiction[0].coding[0].code))
        assertTrue(stringMatch("United States of America (the", obj.jurisdiction[0].coding[0].display))
        assertTrue(stringMatch("Patient Read Operation", obj.purpose))
        assertTrue(stringMatch("Â© HL7.org 2011+", obj.copyright))
        assertTrue(stringMatch("http://hl7.org/fhir/patient.h", obj.metadata!!.link[0].url))
        assertTrue(stringMatch("Demographics and other admini", obj.metadata!!.link[0].description))
        assertEquals(true, if (obj.metadata!!.capability[0].required != null) obj.metadata!!.capability[0].required else false, "Field: obj.metadata!!.capability[0].required")
        assertTrue(stringMatch("Patient Read Operation", obj.metadata!!.capability[0].description))
        assertTrue(stringMatch("http://hl7.org/fhir/http.html", obj.metadata!!.capability[0].link[0]))
        assertTrue(stringMatch("CapabilityStatement/example", obj.metadata!!.capability[0].capabilities.reference))
        assertTrue(stringMatch("patient-profile", obj.profile[0].id))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.profile[0].reference))
        assertTrue(stringMatch("KnownPatientResourceId", obj.variable[0].name))
        assertTrue(stringMatch("example", obj.variable[0].defaultValue))
        assertTrue(stringMatch("NonExistsPatientResourceId", obj.variable[1].name))
        assertTrue(stringMatch("does-not-exist", obj.variable[1].defaultValue))
        assertTrue(stringMatch("R001", obj.test[0].id))
        assertTrue(stringMatch("Sprinkler Read Test R001", obj.test[0].name))
        assertTrue(stringMatch("Read a known Patient and vali", obj.test[0].description))
        assertTrue(stringMatch("http://hl7.org/fhir/testscrip", obj.test[0].action[0].operation!!.type!!.system))
        assertTrue(stringMatch("read", obj.test[0].action[0].operation!!.type!!.code))
        assertTrue(stringMatch("Patient", obj.test[0].action[0].operation!!.resource))
        assertTrue(stringMatch("Read the known Patient resour", obj.test[0].action[0].operation!!.description))
        assertTrue(stringMatch("xml", obj.test[0].action[0].operation!!.accept))
        assertTrue(stringMatch("/${'$'}{KnownPatientResourceId}", obj.test[0].action[0].operation!!.params))
        assertTrue(stringMatch("Confirm that the returned HTT", obj.test[0].action[1].assert_fhir!!.description))
        assertTrue(stringMatch("okay", obj.test[0].action[1].assert_fhir!!.response))
        assertTrue(stringMatch("Confirm that the returned for", obj.test[0].action[2].assert_fhir!!.description))
        assertTrue(stringMatch("xml", obj.test[0].action[2].assert_fhir!!.contentType))
        assertTrue(stringMatch("Confirm that the returned HTT", obj.test[0].action[3].assert_fhir!!.description))
        assertTrue(stringMatch("Last-Modified", obj.test[0].action[3].assert_fhir!!.headerField))
        assertTrue(stringMatch("notEmpty", obj.test[0].action[3].assert_fhir!!.operator))
        assertEquals(true, if (obj.test[0].action[3].assert_fhir!!.warningOnly != null) obj.test[0].action[3].assert_fhir!!.warningOnly else false, "Field: obj.test[0].action[3].assert_fhir!!.warningOnly")
        assertTrue(stringMatch("Confirm that the returned res", obj.test[0].action[4].assert_fhir!!.description))
        assertTrue(stringMatch("Patient", obj.test[0].action[4].assert_fhir!!.resource))
        assertTrue(stringMatch("Confirm that the returned Pat", obj.test[0].action[5].assert_fhir!!.description))
        assertTrue(stringMatch("patient-profile", obj.test[0].action[5].assert_fhir!!.validateProfileId))
        assertTrue(stringMatch("R002", obj.test[1].id))
        assertTrue(stringMatch("Sprinkler Read Test R002", obj.test[1].name))
        assertTrue(stringMatch("Read an unknown Resource Type", obj.test[1].description))
        assertTrue(stringMatch("http://hl7.org/fhir/testscrip", obj.test[1].action[0].operation!!.type!!.system))
        assertTrue(stringMatch("read", obj.test[1].action[0].operation!!.type!!.code))
        assertTrue(stringMatch("Patient", obj.test[1].action[0].operation!!.resource))
        assertTrue(stringMatch("Attempt to read the Parameter", obj.test[1].action[0].operation!!.description))
        assertTrue(stringMatch("xml", obj.test[1].action[0].operation!!.accept))
        assertTrue(stringMatch("/1", obj.test[1].action[0].operation!!.params))
        assertTrue(stringMatch("Confirm that the returned HTT", obj.test[1].action[1].assert_fhir!!.description))
        assertTrue(stringMatch("notFound", obj.test[1].action[1].assert_fhir!!.response))
        assertTrue(stringMatch("R003", obj.test[2].id))
        assertTrue(stringMatch("Sprinkler Read Test R003", obj.test[2].name))
        assertTrue(stringMatch("Read a known, non-existing Pa", obj.test[2].description))
        assertTrue(stringMatch("http://hl7.org/fhir/testscrip", obj.test[2].action[0].operation!!.type!!.system))
        assertTrue(stringMatch("read", obj.test[2].action[0].operation!!.type!!.code))
        assertTrue(stringMatch("Patient", obj.test[2].action[0].operation!!.resource))
        assertTrue(stringMatch("Attempt to read the non-exist", obj.test[2].action[0].operation!!.description))
        assertTrue(stringMatch("xml", obj.test[2].action[0].operation!!.accept))
        assertTrue(stringMatch("/${'$'}{NonExistsPatientResourceId", obj.test[2].action[0].operation!!.params))
        assertTrue(stringMatch("Confirm that the returned HTT", obj.test[2].action[1].assert_fhir!!.description))
        assertTrue(stringMatch("notFound", obj.test[2].action[1].assert_fhir!!.response))
        assertTrue(stringMatch("R004", obj.test[3].id))
        assertTrue(stringMatch("Sprinkler Read Test R004", obj.test[3].name))
        assertTrue(stringMatch("Read a Patient using a known ", obj.test[3].description))
        assertTrue(stringMatch("http://hl7.org/fhir/testscrip", obj.test[3].action[0].operation!!.type!!.system))
        assertTrue(stringMatch("read", obj.test[3].action[0].operation!!.type!!.code))
        assertTrue(stringMatch("Patient", obj.test[3].action[0].operation!!.resource))
        assertTrue(stringMatch("Attempt to read a Patient res", obj.test[3].action[0].operation!!.description))
        assertTrue(stringMatch("xml", obj.test[3].action[0].operation!!.accept))
        assertTrue(stringMatch("/ID-may-not-contain-CAPITALS", obj.test[3].action[0].operation!!.params))
        assertTrue(stringMatch("Confirm that the returned HTT", obj.test[3].action[1].assert_fhir!!.description))
        assertTrue(stringMatch("bad", obj.test[3].action[1].assert_fhir!!.response))
    }

    fun `testscript-example-readtest Init`(@SuppressWarnings("unused") obj: Bundle) {
        obj.identifier  // No-Op to suprress unused warnings
    }
}
