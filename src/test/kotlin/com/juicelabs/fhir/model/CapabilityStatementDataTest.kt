package com.juicelabs.fhir.model

import java.io.File
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.junit.jupiter.api.Test

class CapabilityStatementDataTest : DataTests() {
    @Test
    fun `capabilitystatement-example 902 Test`() {
        val json = File("./src/test/resources/model/sample_data/capabilitystatement-example.json").readTextAndClose()
        val obj = mapper.fromJson(json, CapabilityStatement::class.java)
        assertTrue(stringMatch("CapabilityStatement", obj.resourceType))
        assertTrue(stringMatch("example", obj.id))
    }

    @Test
    fun `capabilitystatement-example 903 Test`() {
        val json = File("./src/test/resources/model/sample_data/capabilitystatement-example.json").readTextAndClose()
        val obj = mapper.fromJson(json, CapabilityStatement::class.java)
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("urn:uuid:68D043B5-9ECF-4559-A", obj.url))
        assertTrue(stringMatch("20130510", obj.version))
        assertTrue(stringMatch("ACME-EHR", obj.name))
        assertTrue(stringMatch("ACME EHR capability statement", obj.title))
        assertTrue(stringMatch("draft", obj.status))
        assertEquals(true, if (obj.experimental != null) obj.experimental else false, "Field: obj.experimental")
        assertEquals("2012-01-04", obj.date.toString())
        assertTrue(stringMatch("ACME Corporation", obj.publisher))
        assertTrue(stringMatch("System Administrator", obj.contact[0].name))
        assertTrue(stringMatch("email", obj.contact[0].telecom[0].system))
        assertTrue(stringMatch("wile@acme.org", obj.contact[0].telecom[0].value))
        assertTrue(stringMatch("This is the FHIR capability s", obj.description))
        assertTrue(stringMatch("http://hl7.org/fhir/usage-con", obj.useContext[0].code.system))
        assertTrue(stringMatch("focus", obj.useContext[0].code.code))
        assertTrue(stringMatch("http://hl7.org/fhir/variant-s", obj.useContext[0].valueCodeableConcept.coding[0].system))
        assertTrue(stringMatch("positive", obj.useContext[0].valueCodeableConcept.coding[0].code))
        assertTrue(stringMatch("urn:iso:std:iso:3166", obj.jurisdiction[0].coding[0].system))
        assertTrue(stringMatch("US", obj.jurisdiction[0].coding[0].code))
        assertTrue(stringMatch("United States of America (the", obj.jurisdiction[0].coding[0].display))
        assertTrue(stringMatch("Main EHR capability statement", obj.purpose))
        assertTrue(stringMatch("Copyright Â© Acme Healthcare a", obj.copyright))
        assertTrue(stringMatch("instance", obj.kind))
        assertTrue(stringMatch("http://ihe.org/fhir/Capabilit", obj.instantiates[0]))
        assertTrue(stringMatch("EHR", obj.software!!.name))
        assertTrue(stringMatch("0.00.020.2134", obj.software!!.version))
        assertEquals("2012-01-04", obj.software!!.releaseDate.toString())
        assertTrue(stringMatch("main EHR at ACME", obj.implementation!!.description))
        assertTrue(stringMatch("http://10.2.3.4/fhir", obj.implementation!!.url))
        assertTrue(stringMatch("1.0.0", obj.fhirVersion))
        assertTrue(stringMatch("both", obj.acceptUnknown))
        assertTrue(stringMatch("xml", obj.format[0]))
        assertTrue(stringMatch("json", obj.format[1]))
        assertTrue(stringMatch("application/xml-patch+xml", obj.patchFormat[0]))
        assertTrue(stringMatch("application/json-patch+json", obj.patchFormat[1]))
        assertTrue(stringMatch("http://hl7.org/fhir/us/lab", obj.implementationGuide[0]))
        assertTrue(stringMatch("http://hl7.org/fhir/us/core/S", obj.profile[0].reference))
        assertTrue(stringMatch("server", obj.rest[0].mode))
        assertTrue(stringMatch("Main FHIR endpoint for acem h", obj.rest[0].documentation))
        assertEquals(true, if (obj.rest[0].security!!.cors != null) obj.rest[0].security!!.cors else false, "Field: obj.rest[0].security!!.cors")
        assertTrue(stringMatch("http://hl7.org/fhir/restful-s", obj.rest[0].security!!.service[0].coding[0].system))
        assertTrue(stringMatch("SMART-on-FHIR", obj.rest[0].security!!.service[0].coding[0].code))
        assertTrue(stringMatch("See Smart on FHIR documentati", obj.rest[0].security!!.description))
        assertTrue(stringMatch("application/jwt", obj.rest[0].security!!.certificate[0].type))
        assertTrue(stringMatch("IHRoaXMgYmxvYiBpcyBub3QgdmFsa", obj.rest[0].security!!.certificate[0].blob))
        assertTrue(stringMatch("Patient", obj.rest[0].resource[0].type))
        assertTrue(stringMatch("http://fhir.hl7.org/base/Stru", obj.rest[0].resource[0].profile!!.reference))
        assertTrue(stringMatch("This server does not let the ", obj.rest[0].resource[0].documentation))
        assertTrue(stringMatch("read", obj.rest[0].resource[0].interaction[0].code))
        assertTrue(stringMatch("vread", obj.rest[0].resource[0].interaction[1].code))
        assertTrue(stringMatch("Only supported for patient re", obj.rest[0].resource[0].interaction[1].documentation))
        assertTrue(stringMatch("update", obj.rest[0].resource[0].interaction[2].code))
        assertTrue(stringMatch("history-instance", obj.rest[0].resource[0].interaction[3].code))
        assertTrue(stringMatch("create", obj.rest[0].resource[0].interaction[4].code))
        assertTrue(stringMatch("history-type", obj.rest[0].resource[0].interaction[5].code))
        assertTrue(stringMatch("versioned-update", obj.rest[0].resource[0].versioning))
        assertEquals(true, if (obj.rest[0].resource[0].readHistory != null) obj.rest[0].resource[0].readHistory else false, "Field: obj.rest[0].resource[0].readHistory")
        assertEquals(false, if (obj.rest[0].resource[0].updateCreate != null) obj.rest[0].resource[0].updateCreate else false, "Field: obj.rest[0].resource[0].updateCreate")
        assertEquals(true, if (obj.rest[0].resource[0].conditionalCreate != null) obj.rest[0].resource[0].conditionalCreate else false, "Field: obj.rest[0].resource[0].conditionalCreate")
        assertTrue(stringMatch("full-support", obj.rest[0].resource[0].conditionalRead))
        assertEquals(false, if (obj.rest[0].resource[0].conditionalUpdate != null) obj.rest[0].resource[0].conditionalUpdate else false, "Field: obj.rest[0].resource[0].conditionalUpdate")
        assertTrue(stringMatch("not-supported", obj.rest[0].resource[0].conditionalDelete))
        assertTrue(stringMatch("Organization", obj.rest[0].resource[0].searchInclude[0]))
        assertTrue(stringMatch("Person", obj.rest[0].resource[0].searchRevInclude[0]))
        assertTrue(stringMatch("identifier", obj.rest[0].resource[0].searchParam[0].name))
        assertTrue(stringMatch("http://hl7.org/fhir/SearchPar", obj.rest[0].resource[0].searchParam[0].definition))
        assertTrue(stringMatch("token", obj.rest[0].resource[0].searchParam[0].type))
        assertTrue(stringMatch("Only supports search by insti", obj.rest[0].resource[0].searchParam[0].documentation))
        assertTrue(stringMatch("general-practitioner", obj.rest[0].resource[0].searchParam[1].name))
        assertTrue(stringMatch("http://hl7.org/fhir/SearchPar", obj.rest[0].resource[0].searchParam[1].definition))
    }

    @Test
    fun `capabilitystatement-example 904 Test`() {
        val json = File("./src/test/resources/model/sample_data/capabilitystatement-example.json").readTextAndClose()
        val obj = mapper.fromJson(json, CapabilityStatement::class.java)
        assertTrue(stringMatch("reference", obj.rest[0].resource[0].searchParam[1].type))
        assertTrue(stringMatch("transaction", obj.rest[0].interaction[0].code))
        assertTrue(stringMatch("history-system", obj.rest[0].interaction[1].code))
        assertTrue(stringMatch("http://hl7.org/fhir/Compartme", obj.rest[0].compartment[0]))
        assertTrue(stringMatch("http://hl7.org/fhir/message-t", obj.messaging[0].endpoint[0].protocol.system))
        assertTrue(stringMatch("mllp", obj.messaging[0].endpoint[0].protocol.code))
        assertTrue(stringMatch("mllp:10.1.1.10:9234", obj.messaging[0].endpoint[0].address))
        assertEquals(30, obj.messaging[0].reliableCache)
        assertTrue(stringMatch("ADT A08 equivalent for extern", obj.messaging[0].documentation))
        assertTrue(stringMatch("http://hl7.org/fhir/message-e", obj.messaging[0].event[0].code.system))
        assertTrue(stringMatch("admin-notify", obj.messaging[0].event[0].code.code))
        assertTrue(stringMatch("Consequence", obj.messaging[0].event[0].category))
        assertTrue(stringMatch("receiver", obj.messaging[0].event[0].mode))
        assertTrue(stringMatch("Patient", obj.messaging[0].event[0].focus))
        assertTrue(stringMatch("StructureDefinition/Patient", obj.messaging[0].event[0].request.reference))
        assertTrue(stringMatch("StructureDefinition/MessageHe", obj.messaging[0].event[0].response.reference))
        assertTrue(stringMatch("Notification of an update to ", obj.messaging[0].event[0].documentation))
        assertTrue(stringMatch("consumer", obj.document[0].mode))
        assertTrue(stringMatch("Basic rules for all documents", obj.document[0].documentation))
        assertTrue(stringMatch("http://fhir.hl7.org/base/Prof", obj.document[0].profile.reference))
    }

    @Test
    fun `capabilitystatement-phr-example 905 Test`() {
        val json = File("./src/test/resources/model/sample_data/capabilitystatement-phr-example.json").readTextAndClose()
        val obj = mapper.fromJson(json, CapabilityStatement::class.java)
        assertTrue(stringMatch("CapabilityStatement", obj.resourceType))
        assertTrue(stringMatch("phr", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("PHR Template", obj.name))
        assertTrue(stringMatch("draft", obj.status))
        assertEquals("2013-06-18", obj.date.toString())
        assertTrue(stringMatch("FHIR Project", obj.publisher))
        assertTrue(stringMatch("url", obj.contact[0].telecom[0].system))
        assertTrue(stringMatch("http://hl7.org/fhir", obj.contact[0].telecom[0].value))
        assertTrue(stringMatch("Prototype Capability Statemen", obj.description))
        assertTrue(stringMatch("capability", obj.kind))
        assertTrue(stringMatch("ACME PHR Server", obj.software!!.name))
        assertTrue(stringMatch("1.0.0", obj.fhirVersion))
        assertTrue(stringMatch("no", obj.acceptUnknown))
        assertTrue(stringMatch("json", obj.format[0]))
        assertTrue(stringMatch("xml", obj.format[1]))
        assertTrue(stringMatch("server", obj.rest[0].mode))
        assertTrue(stringMatch("Protoype server Capability St", obj.rest[0].documentation))
        assertTrue(stringMatch("OAuth", obj.rest[0].security!!.service[0].text))
        assertTrue(stringMatch("We recommend that PHR servers", obj.rest[0].security!!.description))
        assertTrue(stringMatch("Patient", obj.rest[0].resource[0].type))
        assertTrue(stringMatch("read", obj.rest[0].resource[0].interaction[0].code))
        assertTrue(stringMatch("search-type", obj.rest[0].resource[0].interaction[1].code))
        assertTrue(stringMatch("When a client searches patien", obj.rest[0].resource[0].interaction[1].documentation))
        assertTrue(stringMatch("DocumentReference", obj.rest[0].resource[1].type))
        assertTrue(stringMatch("read", obj.rest[0].resource[1].interaction[0].code))
        assertTrue(stringMatch("search-type", obj.rest[0].resource[1].interaction[1].code))
        assertTrue(stringMatch("_id", obj.rest[0].resource[1].searchParam[0].name))
        assertTrue(stringMatch("token", obj.rest[0].resource[1].searchParam[0].type))
        assertTrue(stringMatch("_id parameter always supporte", obj.rest[0].resource[1].searchParam[0].documentation))
        assertTrue(stringMatch("Condition", obj.rest[0].resource[2].type))
        assertTrue(stringMatch("read", obj.rest[0].resource[2].interaction[0].code))
        assertTrue(stringMatch("search-type", obj.rest[0].resource[2].interaction[1].code))
        assertTrue(stringMatch("_id", obj.rest[0].resource[2].searchParam[0].name))
        assertTrue(stringMatch("token", obj.rest[0].resource[2].searchParam[0].type))
        assertTrue(stringMatch("Standard _id parameter", obj.rest[0].resource[2].searchParam[0].documentation))
        assertTrue(stringMatch("DiagnosticReport", obj.rest[0].resource[3].type))
        assertTrue(stringMatch("read", obj.rest[0].resource[3].interaction[0].code))
        assertTrue(stringMatch("search-type", obj.rest[0].resource[3].interaction[1].code))
        assertTrue(stringMatch("_id", obj.rest[0].resource[3].searchParam[0].name))
        assertTrue(stringMatch("token", obj.rest[0].resource[3].searchParam[0].type))
        assertTrue(stringMatch("Standard _id parameter", obj.rest[0].resource[3].searchParam[0].documentation))
        assertTrue(stringMatch("service", obj.rest[0].resource[3].searchParam[1].name))
        assertTrue(stringMatch("token", obj.rest[0].resource[3].searchParam[1].type))
        assertTrue(stringMatch("which diagnostic discipline/d", obj.rest[0].resource[3].searchParam[1].documentation))
    }
}
