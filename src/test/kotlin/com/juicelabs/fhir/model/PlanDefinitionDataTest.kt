package com.juicelabs.fhir.model

import java.io.File
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.junit.jupiter.api.Test

class PlanDefinitionDataTest : DataTests() {
    @Test
    fun `plandefinition-example-kdn5-simplified 0 Test`() {
        val json = File("./src/test/resources/model/sample_data/plandefinition-example-kdn5-simplified.json").readTextAndClose()
        val obj = mapper.fromJson(json, PlanDefinition::class.java)
        assertTrue(stringMatch("PlanDefinition", obj.resourceType))
        assertTrue(stringMatch("KDN5", obj.id))
        assertTrue(stringMatch("additional", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("ActivityDefinition", (obj.contained[0] as ActivityDefinition).resourceType))
        assertTrue(stringMatch("1111", (obj.contained[0] as ActivityDefinition).id))
        assertTrue(stringMatch("draft", (obj.contained[0] as ActivityDefinition).status))
        assertTrue(stringMatch("http://www.nlm.nih.gov/resear", (obj.contained[0] as ActivityDefinition).productCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("12574", (obj.contained[0] as ActivityDefinition).productCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("gemcitabine", (obj.contained[0] as ActivityDefinition).productCodeableConcept!!.coding[0].display))
        assertTrue(stringMatch("gemcitabine", (obj.contained[0] as ActivityDefinition).productCodeableConcept!!.text))
        assertTrue(stringMatch("1250 mg/m² IV over 30 minutes", (obj.contained[0] as ActivityDefinition).dosage[0].text))
        assertTrue(stringMatch("%.2f".format(30f), "%.2f".format((obj.contained[0] as ActivityDefinition).dosage[0].timing!!.repeat!!.duration)))
        assertTrue(stringMatch("min", (obj.contained[0] as ActivityDefinition).dosage[0].timing!!.repeat!!.durationUnit))
        assertTrue(stringMatch("IV", (obj.contained[0] as ActivityDefinition).dosage[0].route!!.text))
        assertTrue(stringMatch("%.2f".format(1250f), "%.2f".format((obj.contained[0] as ActivityDefinition).dosage[0].doseQuantity!!.value)))
        assertTrue(stringMatch("mg/m²", (obj.contained[0] as ActivityDefinition).dosage[0].doseQuantity!!.unit))
        assertTrue(stringMatch("ActivityDefinition", (obj.contained[1] as ActivityDefinition).resourceType))
        assertTrue(stringMatch("2222", (obj.contained[1] as ActivityDefinition).id))
        assertTrue(stringMatch("draft", (obj.contained[1] as ActivityDefinition).status))
        assertTrue(stringMatch("http://www.nlm.nih.gov/resear", (obj.contained[1] as ActivityDefinition).productCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("40048", (obj.contained[1] as ActivityDefinition).productCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("Carboplatin", (obj.contained[1] as ActivityDefinition).productCodeableConcept!!.coding[0].display))
        assertTrue(stringMatch("CARBOplatin", (obj.contained[1] as ActivityDefinition).productCodeableConcept!!.text))
        assertTrue(stringMatch("AUC 5 IV over 30 minutes", (obj.contained[1] as ActivityDefinition).dosage[0].text))
        assertTrue(stringMatch("%.2f".format(30f), "%.2f".format((obj.contained[1] as ActivityDefinition).dosage[0].timing!!.repeat!!.duration)))
        assertTrue(stringMatch("min", (obj.contained[1] as ActivityDefinition).dosage[0].timing!!.repeat!!.durationUnit))
        assertTrue(stringMatch("IV", (obj.contained[1] as ActivityDefinition).dosage[0].route!!.text))
        assertTrue(stringMatch("http://example.org/fhir/AUC-d", (obj.contained[1] as ActivityDefinition).dosage[0].doseQuantity!!.extension[0].url))
        assertEquals(5, (obj.contained[1] as ActivityDefinition).dosage[0].doseQuantity!!.extension[0].valueInteger)
        assertTrue(stringMatch("http://example.org/ordertempl", obj.identifier[0].system))
        assertTrue(stringMatch("KDN5", obj.identifier[0].value))
        assertTrue(stringMatch("1", obj.version))
        assertTrue(stringMatch("Gemcitabine/CARBOplatin", obj.title))
        assertTrue(stringMatch("Chemotherapy Order Template", obj.type!!.text))
        assertTrue(stringMatch("draft", obj.status))
        assertEquals(true, if (obj.experimental != null) obj.experimental else false, "Field: obj.experimental")
        assertTrue(stringMatch("National Comprehensive Cancer", obj.publisher))
        assertEquals("2016-07-27", obj.approvalDate.toString())
        assertEquals("2016-07-27", obj.lastReviewDate.toString())
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.useContext[0].extension[0].url))
        assertTrue(stringMatch("A", obj.useContext[0].extension[0].valueString))
        assertTrue(stringMatch("http://example.org/fhir/CodeS", obj.useContext[0].code.system))
        assertTrue(stringMatch("treamentSetting-or-diseaseSta", obj.useContext[0].code.code))
        assertTrue(stringMatch("Metastatic", obj.useContext[0].valueCodeableConcept.text))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.useContext[1].extension[0].url))
        assertTrue(stringMatch("A", obj.useContext[1].extension[0].valueString))
        assertTrue(stringMatch("http://example.org/fhir/CodeS", obj.useContext[1].code.system))
        assertTrue(stringMatch("disease-or-histology", obj.useContext[1].code.code))
        assertTrue(stringMatch("Collecting Duct/Medullary Sub", obj.useContext[1].valueCodeableConcept.text))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.useContext[2].extension[0].url))
        assertTrue(stringMatch("A", obj.useContext[2].extension[0].valueString))
        assertTrue(stringMatch("http://hl7.org/fhir/usage-con", obj.useContext[2].code.system))
        assertTrue(stringMatch("focus", obj.useContext[2].code.code))
        assertTrue(stringMatch("Kidney Cancer", obj.useContext[2].valueCodeableConcept.text))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.useContext[3].extension[0].url))
        assertTrue(stringMatch("B", obj.useContext[3].extension[0].valueString))
        assertTrue(stringMatch("http://example.org/fhir/CodeS", obj.useContext[3].code.system))
        assertTrue(stringMatch("treatmentSetting-or-diseaseSt", obj.useContext[3].code.code))
        assertTrue(stringMatch("Relapsed", obj.useContext[3].valueCodeableConcept.text))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.useContext[4].extension[0].url))
        assertTrue(stringMatch("B", obj.useContext[4].extension[0].valueString))
        assertTrue(stringMatch("http://example.org/fhir/CodeS", obj.useContext[4].code.system))
        assertTrue(stringMatch("disease-or-histology", obj.useContext[4].code.code))
        assertTrue(stringMatch("Collecting Duct/Medullary Sub", obj.useContext[4].valueCodeableConcept.text))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.useContext[5].extension[0].url))
        assertTrue(stringMatch("B", obj.useContext[5].extension[0].valueString))
        assertTrue(stringMatch("http://hl7.org/fhir/usage-con", obj.useContext[5].code.system))
        assertTrue(stringMatch("focus", obj.useContext[5].code.code))
        assertTrue(stringMatch("Kidney Cancer – Collecting Du", obj.useContext[5].valueCodeableConcept.text))
    }

    @Test
    fun `plandefinition-example-kdn5-simplified 1 Test`() {
        val json = File("./src/test/resources/model/sample_data/plandefinition-example-kdn5-simplified.json").readTextAndClose()
        val obj = mapper.fromJson(json, PlanDefinition::class.java)
        assertTrue(stringMatch("author", obj.contributor[0].type))
        assertTrue(stringMatch("Lee Surprenant", obj.contributor[0].name))
        assertTrue(stringMatch("All rights reserved.", obj.copyright))
        assertTrue(stringMatch("derived-from", obj.relatedArtifact[0].type))
        assertTrue(stringMatch("NCCN Guidelines for Kidney Ca", obj.relatedArtifact[0].display))
        assertTrue(stringMatch("http://www.example.org/profes", obj.relatedArtifact[0].url))
        assertTrue(stringMatch("citation", obj.relatedArtifact[1].type))
        assertTrue(stringMatch("Oudard S, et al. J Urol. 2007", obj.relatedArtifact[1].citation))
        assertTrue(stringMatch("http://www.ncbi.nlm.nih.gov/p", obj.relatedArtifact[1].url))
        assertTrue(stringMatch("exactly-one", obj.action[0].selectionBehavior))
        assertTrue(stringMatch("all", obj.action[0].action[0].selectionBehavior))
        assertTrue(stringMatch("sentence-group", obj.action[0].action[0].action[0].groupingBehavior))
        assertTrue(stringMatch("exactly-one", obj.action[0].action[0].action[0].selectionBehavior))
        assertTrue(stringMatch("cycle-definition-1", obj.action[0].action[0].action[0].action[0].id))
        assertTrue(stringMatch("21-day cycle for 6 cycles", obj.action[0].action[0].action[0].action[0].textEquivalent))
        assertEquals(6, obj.action[0].action[0].action[0].action[0].timingTiming!!.repeat!!.count)
        assertTrue(stringMatch("%.2f".format(21f), "%.2f".format(obj.action[0].action[0].action[0].action[0].timingTiming!!.repeat!!.duration)))
        assertTrue(stringMatch("d", obj.action[0].action[0].action[0].action[0].timingTiming!!.repeat!!.durationUnit))
        assertTrue(stringMatch("action-1", obj.action[0].action[0].action[0].action[0].action[0].id))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.action[0].action[0].action[0].action[0].action[0].extension[0].url))
        assertTrue(stringMatch("day", obj.action[0].action[0].action[0].action[0].action[0].extension[0].extension[0].url))
        assertEquals(1, obj.action[0].action[0].action[0].action[0].action[0].extension[0].extension[0].valueInteger)
        assertTrue(stringMatch("day", obj.action[0].action[0].action[0].action[0].action[0].extension[0].extension[1].url))
        assertEquals(8, obj.action[0].action[0].action[0].action[0].action[0].extension[0].extension[1].valueInteger)
        assertTrue(stringMatch("Gemcitabine 1250 mg/m² IV ove", obj.action[0].action[0].action[0].action[0].action[0].textEquivalent))
        assertTrue(stringMatch("#1111", obj.action[0].action[0].action[0].action[0].action[0].definition!!.reference))
        assertTrue(stringMatch("action-2", obj.action[0].action[0].action[0].action[0].action[1].id))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.action[0].action[0].action[0].action[0].action[1].extension[0].url))
        assertTrue(stringMatch("day", obj.action[0].action[0].action[0].action[0].action[1].extension[0].extension[0].url))
        assertEquals(1, obj.action[0].action[0].action[0].action[0].action[1].extension[0].extension[0].valueInteger)
        assertTrue(stringMatch("CARBOplatin AUC 5 IV over 30 ", obj.action[0].action[0].action[0].action[0].action[1].textEquivalent))
        assertTrue(stringMatch("action-1", obj.action[0].action[0].action[0].action[0].action[1].relatedAction[0].actionId))
        assertTrue(stringMatch("concurrent-with-start", obj.action[0].action[0].action[0].action[0].action[1].relatedAction[0].relationship))
        assertTrue(stringMatch("#2222", obj.action[0].action[0].action[0].action[0].action[1].definition!!.reference))
    }

    @Test
    fun `plandefinition-options-example 2 Test`() {
        val json = File("./src/test/resources/model/sample_data/plandefinition-options-example.json").readTextAndClose()
        val obj = mapper.fromJson(json, PlanDefinition::class.java)
        assertTrue(stringMatch("PlanDefinition", obj.resourceType))
        assertTrue(stringMatch("options-example", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("ActivityDefinition", (obj.contained[0] as ActivityDefinition).resourceType))
        assertTrue(stringMatch("activitydefinition-medication", (obj.contained[0] as ActivityDefinition).id))
        assertTrue(stringMatch("draft", (obj.contained[0] as ActivityDefinition).status))
        assertTrue(stringMatch("MedicationRequest", (obj.contained[0] as ActivityDefinition).kind))
        assertTrue(stringMatch("Medication 1", (obj.contained[0] as ActivityDefinition).productCodeableConcept!!.text))
        assertTrue(stringMatch("ActivityDefinition", (obj.contained[1] as ActivityDefinition).resourceType))
        assertTrue(stringMatch("activitydefinition-medication", (obj.contained[1] as ActivityDefinition).id))
        assertTrue(stringMatch("draft", (obj.contained[1] as ActivityDefinition).status))
        assertTrue(stringMatch("MedicationRequest", (obj.contained[1] as ActivityDefinition).kind))
        assertTrue(stringMatch("Medication 2", (obj.contained[1] as ActivityDefinition).productCodeableConcept!!.text))
        assertTrue(stringMatch("This example illustrates rela", obj.title))
        assertTrue(stringMatch("draft", obj.status))
        assertTrue(stringMatch("logical-group", obj.action[0].groupingBehavior))
        assertTrue(stringMatch("all", obj.action[0].selectionBehavior))
        assertTrue(stringMatch("medication-action-1", obj.action[0].action[0].id))
        assertTrue(stringMatch("Administer Medication 1", obj.action[0].action[0].title))
        assertTrue(stringMatch("#activitydefinition-medicatio", obj.action[0].action[0].definition!!.reference))
        assertTrue(stringMatch("medication-action-2", obj.action[0].action[1].id))
        assertTrue(stringMatch("Administer Medication 2", obj.action[0].action[1].title))
        assertTrue(stringMatch("medication-action-1", obj.action[0].action[1].relatedAction[0].actionId))
        assertTrue(stringMatch("after-end", obj.action[0].action[1].relatedAction[0].relationship))
        assertTrue(stringMatch("%.2f".format(1f), "%.2f".format(obj.action[0].action[1].relatedAction[0].offsetDuration!!.value)))
        assertTrue(stringMatch("h", obj.action[0].action[1].relatedAction[0].offsetDuration!!.unit))
        assertTrue(stringMatch("#activitydefinition-medicatio", obj.action[0].action[1].definition!!.reference))
    }

    @Test
    fun `plandefinition-protocol-example 3 Test`() {
        val json = File("./src/test/resources/model/sample_data/plandefinition-protocol-example.json").readTextAndClose()
        val obj = mapper.fromJson(json, PlanDefinition::class.java)
        assertTrue(stringMatch("PlanDefinition", obj.resourceType))
        assertTrue(stringMatch("protocol-example", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("ActivityDefinition", (obj.contained[0] as ActivityDefinition).resourceType))
        assertTrue(stringMatch("procedure", (obj.contained[0] as ActivityDefinition).id))
        assertTrue(stringMatch("draft", (obj.contained[0] as ActivityDefinition).status))
        assertTrue(stringMatch("Extra information on activity", (obj.contained[0] as ActivityDefinition).description))
        assertTrue(stringMatch("ProcedureRequest", (obj.contained[0] as ActivityDefinition).kind))
    }

    @Test
    fun `plandefinition-protocol-example 4 Test`() {
        val json = File("./src/test/resources/model/sample_data/plandefinition-protocol-example.json").readTextAndClose()
        val obj = mapper.fromJson(json, PlanDefinition::class.java)
        assertTrue(stringMatch("http://loinc.org", (obj.contained[0] as ActivityDefinition).code!!.coding[0].system))
        assertTrue(stringMatch("39156-5", (obj.contained[0] as ActivityDefinition).code!!.coding[0].code))
        assertTrue(stringMatch("Body mass index (BMI) [Ratio]", (obj.contained[0] as ActivityDefinition).code!!.coding[0].display))
        assertTrue(stringMatch("practitioner", (obj.contained[0] as ActivityDefinition).participant[0].type))
        assertTrue(stringMatch("http://hl7.org/fhir/practitio", (obj.contained[0] as ActivityDefinition).participant[0].role!!.coding[0].system))
        assertTrue(stringMatch("doctor", (obj.contained[0] as ActivityDefinition).participant[0].role!!.coding[0].code))
        assertTrue(stringMatch("Doctor", (obj.contained[0] as ActivityDefinition).participant[0].role!!.coding[0].display))
        assertTrue(stringMatch("http://acme.org", obj.identifier[0].system))
        assertTrue(stringMatch("example-1", obj.identifier[0].value))
        assertTrue(stringMatch("Obesity Assessment Protocol", obj.title))
        assertTrue(stringMatch("protocol", obj.type!!.coding[0].code))
        assertTrue(stringMatch("draft", obj.status))
        assertTrue(stringMatch("Example of A medical algorith", obj.purpose))
        assertTrue(stringMatch("focus", obj.useContext[0].code.code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.useContext[0].valueCodeableConcept.coding[0].system))
        assertTrue(stringMatch("414916001", obj.useContext[0].valueCodeableConcept.coding[0].code))
        assertTrue(stringMatch("Obesity (disorder)", obj.useContext[0].valueCodeableConcept.coding[0].display))
        assertTrue(stringMatch("author", obj.contributor[0].type))
        assertTrue(stringMatch("National Heart, Lung, and Blo", obj.contributor[0].name))
        assertTrue(stringMatch("url", obj.contributor[0].contact[0].telecom[0].system))
        assertTrue(stringMatch("https://www.nhlbi.nih.gov/hea", obj.contributor[0].contact[0].telecom[0].value))
        assertTrue(stringMatch("derived-from", obj.relatedArtifact[0].type))
        assertTrue(stringMatch("Overweight and Obesity Treatm", obj.relatedArtifact[0].display))
        assertTrue(stringMatch("http://www.nhlbi.nih.gov/heal", obj.relatedArtifact[0].url))
        assertTrue(stringMatch("reduce-bmi-ratio", obj.goal[0].id))
        assertTrue(stringMatch("Treatment", obj.goal[0].category!!.text))
        assertTrue(stringMatch("Reduce BMI to below 25", obj.goal[0].description.text))
        assertTrue(stringMatch("medium-priority", obj.goal[0].priority!!.text))
        assertTrue(stringMatch("When the patient's BMI Ratio ", obj.goal[0].start!!.text))
        assertTrue(stringMatch("http://snomed.info/sct", obj.goal[0].addresses[0].coding[0].system))
        assertTrue(stringMatch("414916001", obj.goal[0].addresses[0].coding[0].code))
        assertTrue(stringMatch("Obesity (disorder)", obj.goal[0].addresses[0].coding[0].display))
        assertTrue(stringMatch("justification", obj.goal[0].documentation[0].type))
        assertTrue(stringMatch("Evaluation and Treatment Stra", obj.goal[0].documentation[0].display))
        assertTrue(stringMatch("https://www.nhlbi.nih.gov/hea", obj.goal[0].documentation[0].url))
        assertTrue(stringMatch("http://loinc.org", obj.goal[0].target[0].measure!!.coding[0].system))
        assertTrue(stringMatch("39156-5", obj.goal[0].target[0].measure!!.coding[0].code))
        assertTrue(stringMatch("Body mass index (BMI) [Ratio]", obj.goal[0].target[0].measure!!.coding[0].display))
        assertTrue(stringMatch("%.2f".format(24.9f), "%.2f".format(obj.goal[0].target[0].detailRange!!.high!!.value)))
        assertTrue(stringMatch("kg/m2", obj.goal[0].target[0].detailRange!!.high!!.unit))
        assertTrue(stringMatch("%.2f".format(1f), "%.2f".format(obj.goal[0].target[0].due!!.value)))
        assertTrue(stringMatch("a", obj.goal[0].target[0].due!!.unit))
        assertTrue(stringMatch("Measure BMI", obj.action[0].label))
        assertTrue(stringMatch("Measure, Weight, Height, Wais", obj.action[0].title))
        assertTrue(stringMatch("Weight must be measured so th", obj.action[0].description))
        assertTrue(stringMatch("reduce-bmi-ratio", obj.action[0].goalId[0]))
        assertTrue(stringMatch("applicability", obj.action[0].condition[0].kind))
        assertTrue(stringMatch("The practitioner must seek to", obj.action[0].condition[0].description))
        assertTrue(stringMatch("text/cql", obj.action[0].condition[0].language))
        assertTrue(stringMatch("exists ([Condition: Obesity])", obj.action[0].condition[0].expression))
        assertTrue(stringMatch("must-unless-documented", obj.action[0].requiredBehavior))
        assertTrue(stringMatch("single", obj.action[0].cardinalityBehavior))
        assertTrue(stringMatch("#procedure", obj.action[0].definition!!.reference))
    }

    @Test
    fun `plandefinition-example 5 Test`() {
        val json = File("./src/test/resources/model/sample_data/plandefinition-example.json").readTextAndClose()
        val obj = mapper.fromJson(json, PlanDefinition::class.java)
        assertTrue(stringMatch("PlanDefinition", obj.resourceType))
        assertTrue(stringMatch("low-suicide-risk-order-set", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("ActivityDefinition", (obj.contained[0] as ActivityDefinition).resourceType))
        assertTrue(stringMatch("referralToMentalHealthCare", (obj.contained[0] as ActivityDefinition).id))
        assertTrue(stringMatch("draft", (obj.contained[0] as ActivityDefinition).status))
        assertTrue(stringMatch("refer to primary care mental-", (obj.contained[0] as ActivityDefinition).description))
        assertTrue(stringMatch("ReferralRequest", (obj.contained[0] as ActivityDefinition).kind))
        assertTrue(stringMatch("http://snomed.info/sct", (obj.contained[0] as ActivityDefinition).code!!.coding[0].system))
        assertTrue(stringMatch("306206005", (obj.contained[0] as ActivityDefinition).code!!.coding[0].code))
        assertTrue(stringMatch("Referral to service (procedur", (obj.contained[0] as ActivityDefinition).code!!.text))
        assertTrue(stringMatch("practitioner", (obj.contained[0] as ActivityDefinition).participant[0].type))
        assertTrue(stringMatch("ActivityDefinition", (obj.contained[1] as ActivityDefinition).resourceType))
        assertTrue(stringMatch("citalopramPrescription", (obj.contained[1] as ActivityDefinition).id))
        assertTrue(stringMatch("draft", (obj.contained[1] as ActivityDefinition).status))
        assertTrue(stringMatch("MedicationRequest", (obj.contained[1] as ActivityDefinition).kind))
        assertTrue(stringMatch("#citalopramMedication", (obj.contained[1] as ActivityDefinition).productReference!!.reference))
    }

    @Test
    fun `plandefinition-example 6 Test`() {
        val json = File("./src/test/resources/model/sample_data/plandefinition-example.json").readTextAndClose()
        val obj = mapper.fromJson(json, PlanDefinition::class.java)
        assertTrue(stringMatch("1 tablet oral 1 time daily", (obj.contained[1] as ActivityDefinition).dosage[0].text))
        assertEquals(1, (obj.contained[1] as ActivityDefinition).dosage[0].timing!!.repeat!!.frequency)
        assertTrue(stringMatch("%.2f".format(1f), "%.2f".format((obj.contained[1] as ActivityDefinition).dosage[0].timing!!.repeat!!.period)))
        assertTrue(stringMatch("d", (obj.contained[1] as ActivityDefinition).dosage[0].timing!!.repeat!!.periodUnit))
        assertTrue(stringMatch("26643006", (obj.contained[1] as ActivityDefinition).dosage[0].route!!.coding[0].code))
        assertTrue(stringMatch("Oral route (qualifier value)", (obj.contained[1] as ActivityDefinition).dosage[0].route!!.coding[0].display))
        assertTrue(stringMatch("Oral route (qualifier value)", (obj.contained[1] as ActivityDefinition).dosage[0].route!!.text))
        assertTrue(stringMatch("%.2f".format(1f), "%.2f".format((obj.contained[1] as ActivityDefinition).dosage[0].doseQuantity!!.value)))
        assertTrue(stringMatch("{tbl}", (obj.contained[1] as ActivityDefinition).dosage[0].doseQuantity!!.unit))
        assertTrue(stringMatch("dispenseRequest.numberOfRepea", (obj.contained[1] as ActivityDefinition).dynamicValue[0].path))
        assertTrue(stringMatch("3", (obj.contained[1] as ActivityDefinition).dynamicValue[0].expression))
        assertTrue(stringMatch("dispenseRequest.quantity", (obj.contained[1] as ActivityDefinition).dynamicValue[1].path))
        assertTrue(stringMatch("30 '{tbl}'", (obj.contained[1] as ActivityDefinition).dynamicValue[1].expression))
        assertTrue(stringMatch("Medication", (obj.contained[2] as Medication).resourceType))
        assertTrue(stringMatch("citalopramMedication", (obj.contained[2] as Medication).id))
        assertTrue(stringMatch("http://www.nlm.nih.gov/resear", (obj.contained[2] as Medication).code!!.coding[0].system))
        assertTrue(stringMatch("200371", (obj.contained[2] as Medication).code!!.coding[0].code))
        assertTrue(stringMatch("citalopram", (obj.contained[2] as Medication).code!!.text))
        assertTrue(stringMatch("http://snomed.info/sct", (obj.contained[2] as Medication).form!!.coding[0].system))
        assertTrue(stringMatch("385055001", (obj.contained[2] as Medication).form!!.coding[0].code))
        assertTrue(stringMatch("Tablet dose form", (obj.contained[2] as Medication).form!!.coding[0].display))
        assertTrue(stringMatch("Tablet dose form", (obj.contained[2] as Medication).form!!.text))
        assertTrue(stringMatch("#citalopramSubstance", (obj.contained[2] as Medication).ingredient[0].itemReference.reference))
        assertTrue(stringMatch("%.2f".format(20f), "%.2f".format((obj.contained[2] as Medication).ingredient[0].amount!!.numerator!!.value)))
        assertTrue(stringMatch("mg", (obj.contained[2] as Medication).ingredient[0].amount!!.numerator!!.unit))
        assertTrue(stringMatch("%.2f".format(1f), "%.2f".format((obj.contained[2] as Medication).ingredient[0].amount!!.denominator!!.value)))
        assertTrue(stringMatch("{tbl}", (obj.contained[2] as Medication).ingredient[0].amount!!.denominator!!.unit))
        assertTrue(stringMatch("Substance", (obj.contained[3] as Substance).resourceType))
        assertTrue(stringMatch("citalopramSubstance", (obj.contained[3] as Substance).id))
        assertTrue(stringMatch("http://www.nlm.nih.gov/resear", (obj.contained[3] as Substance).code.coding[0].system))
        assertTrue(stringMatch("2556", (obj.contained[3] as Substance).code.coding[0].code))
        assertTrue(stringMatch("citalopram", (obj.contained[3] as Substance).code.text))
        assertTrue(stringMatch("http://motivemi.com/artifacts", obj.url))
        assertTrue(stringMatch("official", obj.identifier[0].use))
        assertTrue(stringMatch("http://motivemi.com/artifacts", obj.identifier[0].system))
        assertTrue(stringMatch("mmi:low-suicide-risk-order-se", obj.identifier[0].value))
        assertTrue(stringMatch("1.0.0", obj.version))
        assertTrue(stringMatch("LowSuicideRiskOrderSet", obj.name))
        assertTrue(stringMatch("Low Suicide Risk Order Set", obj.title))
        assertTrue(stringMatch("active", obj.status))
        assertEquals(true, if (obj.experimental != null) obj.experimental else false, "Field: obj.experimental")
        assertEquals("2015-08-15", obj.date.toString())
        assertTrue(stringMatch("Motive Medical Intelligence", obj.publisher))
        assertTrue(stringMatch("Orders to be applied to a pat", obj.description))
        assertTrue(stringMatch("This order set helps ensure c", obj.purpose))
        assertTrue(stringMatch("This order set should be appl", obj.usage))
        assertEquals("2016-03-12", obj.approvalDate.toString())
        assertEquals("2016-08-15", obj.lastReviewDate.toString())
        assertEquals("2016-01-01", obj.effectivePeriod!!.start.toString())
        assertEquals("2017-12-31", obj.effectivePeriod!!.end.toString())
        assertTrue(stringMatch("http://hl7.org/fhir/usage-con", obj.useContext[0].code.system))
        assertTrue(stringMatch("age", obj.useContext[0].code.code))
        assertTrue(stringMatch("https://meshb.nlm.nih.gov", obj.useContext[0].valueCodeableConcept.coding[0].system))
        assertTrue(stringMatch("D000328", obj.useContext[0].valueCodeableConcept.coding[0].code))
        assertTrue(stringMatch("Adult", obj.useContext[0].valueCodeableConcept.coding[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/usage-con", obj.useContext[1].code.system))
        assertTrue(stringMatch("focus", obj.useContext[1].code.code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.useContext[1].valueCodeableConcept.coding[0].system))
        assertTrue(stringMatch("87512008", obj.useContext[1].valueCodeableConcept.coding[0].code))
        assertTrue(stringMatch("Mild major depression", obj.useContext[1].valueCodeableConcept.coding[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/usage-con", obj.useContext[2].code.system))
        assertTrue(stringMatch("focus", obj.useContext[2].code.code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.useContext[2].valueCodeableConcept.coding[0].system))
        assertTrue(stringMatch("40379007", obj.useContext[2].valueCodeableConcept.coding[0].code))
        assertTrue(stringMatch("Major depression, recurrent, ", obj.useContext[2].valueCodeableConcept.coding[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/usage-con", obj.useContext[3].code.system))
        assertTrue(stringMatch("focus", obj.useContext[3].code.code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.useContext[3].valueCodeableConcept.coding[0].system))
        assertTrue(stringMatch("394687007", obj.useContext[3].valueCodeableConcept.coding[0].code))
        assertTrue(stringMatch("Low suicide risk", obj.useContext[3].valueCodeableConcept.coding[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/usage-con", obj.useContext[4].code.system))
    }

    @Test
    fun `plandefinition-example 7 Test`() {
        val json = File("./src/test/resources/model/sample_data/plandefinition-example.json").readTextAndClose()
        val obj = mapper.fromJson(json, PlanDefinition::class.java)
        assertTrue(stringMatch("focus", obj.useContext[4].code.code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.useContext[4].valueCodeableConcept.coding[0].system))
        assertTrue(stringMatch("225337009", obj.useContext[4].valueCodeableConcept.coding[0].code))
        assertTrue(stringMatch("Suicide risk assessment", obj.useContext[4].valueCodeableConcept.coding[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/usage-con", obj.useContext[5].code.system))
        assertTrue(stringMatch("user", obj.useContext[5].code.code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.useContext[5].valueCodeableConcept.coding[0].system))
        assertTrue(stringMatch("309343006", obj.useContext[5].valueCodeableConcept.coding[0].code))
        assertTrue(stringMatch("Physician", obj.useContext[5].valueCodeableConcept.coding[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/usage-con", obj.useContext[6].code.system))
        assertTrue(stringMatch("venue", obj.useContext[6].code.code))
        assertTrue(stringMatch("http://snomed.info/sct", obj.useContext[6].valueCodeableConcept.coding[0].system))
        assertTrue(stringMatch("440655000", obj.useContext[6].valueCodeableConcept.coding[0].code))
        assertTrue(stringMatch("Outpatient environment", obj.useContext[6].valueCodeableConcept.coding[0].display))
        assertTrue(stringMatch("urn:iso:std:iso:3166", obj.jurisdiction[0].coding[0].system))
        assertTrue(stringMatch("US", obj.jurisdiction[0].coding[0].code))
        assertTrue(stringMatch("Suicide risk assessment", obj.topic[0].text))
        assertTrue(stringMatch("author", obj.contributor[0].type))
        assertTrue(stringMatch("Motive Medical Intelligence", obj.contributor[0].name))
        assertTrue(stringMatch("phone", obj.contributor[0].contact[0].telecom[0].system))
        assertTrue(stringMatch("415-362-4007", obj.contributor[0].contact[0].telecom[0].value))
        assertTrue(stringMatch("work", obj.contributor[0].contact[0].telecom[0].use))
        assertTrue(stringMatch("email", obj.contributor[0].contact[0].telecom[1].system))
        assertTrue(stringMatch("info@motivemi.com", obj.contributor[0].contact[0].telecom[1].value))
        assertTrue(stringMatch("work", obj.contributor[0].contact[0].telecom[1].use))
        assertTrue(stringMatch("phone", obj.contact[0].telecom[0].system))
        assertTrue(stringMatch("415-362-4007", obj.contact[0].telecom[0].value))
        assertTrue(stringMatch("work", obj.contact[0].telecom[0].use))
        assertTrue(stringMatch("email", obj.contact[0].telecom[1].system))
        assertTrue(stringMatch("info@motivemi.com", obj.contact[0].telecom[1].value))
        assertTrue(stringMatch("work", obj.contact[0].telecom[1].use))
        assertTrue(stringMatch("© Copyright 2016 Motive Medic", obj.copyright))
        assertTrue(stringMatch("derived-from", obj.relatedArtifact[0].type))
        assertTrue(stringMatch("Practice Guideline for the Tr", obj.relatedArtifact[0].display))
        assertTrue(stringMatch("http://psychiatryonline.org/p", obj.relatedArtifact[0].url))
        assertTrue(stringMatch("composed-of", obj.relatedArtifact[1].type))
        assertTrue(stringMatch("ActivityDefinition/referralPr", obj.relatedArtifact[1].resource!!.reference))
        assertTrue(stringMatch("composed-of", obj.relatedArtifact[2].type))
        assertTrue(stringMatch("ActivityDefinition/citalopram", obj.relatedArtifact[2].resource!!.reference))
        assertTrue(stringMatch("Library/suiciderisk-orderset-", obj.library[0].reference))
        assertTrue(stringMatch("SuicideRiskLogic", obj.library[0].display))
        assertTrue(stringMatch("Suicide Risk Assessment and O", obj.action[0].title))
        assertTrue(stringMatch("Consults and Referrals", obj.action[0].action[0].title))
        assertTrue(stringMatch("logical-group", obj.action[0].action[0].groupingBehavior))
        assertTrue(stringMatch("any", obj.action[0].action[0].selectionBehavior))
        assertTrue(stringMatch("Refer to outpatient mental he", obj.action[0].action[0].action[0].textEquivalent))
        assertTrue(stringMatch("#referralToMentalHealthCare", obj.action[0].action[0].action[0].definition!!.reference))
        assertTrue(stringMatch("timing.event", obj.action[0].action[0].action[0].dynamicValue[0].path))
        assertTrue(stringMatch("Now()", obj.action[0].action[0].action[0].dynamicValue[0].expression))
        assertTrue(stringMatch("specialty", obj.action[0].action[0].action[0].dynamicValue[1].path))
        assertTrue(stringMatch("Code '261QM0850X' from Suicid", obj.action[0].action[0].action[0].dynamicValue[1].expression))
        assertTrue(stringMatch("occurrenceDateTime", obj.action[0].action[0].action[0].dynamicValue[2].path))
        assertTrue(stringMatch("SuicideRiskLogic.ReferralRequ", obj.action[0].action[0].action[0].dynamicValue[2].expression))
        assertTrue(stringMatch("subject", obj.action[0].action[0].action[0].dynamicValue[3].path))
        assertTrue(stringMatch("SuicideRiskLogic.Patient", obj.action[0].action[0].action[0].dynamicValue[3].expression))
        assertTrue(stringMatch("requester.agent", obj.action[0].action[0].action[0].dynamicValue[4].path))
        assertTrue(stringMatch("SuicideRiskLogic.Practitioner", obj.action[0].action[0].action[0].dynamicValue[4].expression))
        assertTrue(stringMatch("reasonCode", obj.action[0].action[0].action[0].dynamicValue[5].path))
        assertTrue(stringMatch("SuicideRiskLogic.RiskAssessme", obj.action[0].action[0].action[0].dynamicValue[5].expression))
        assertTrue(stringMatch("reasonReference", obj.action[0].action[0].action[0].dynamicValue[6].path))
        assertTrue(stringMatch("SuicideRiskLogic.RiskAssessme", obj.action[0].action[0].action[0].dynamicValue[6].expression))
        assertTrue(stringMatch("Medications", obj.action[0].action[1].title))
        assertTrue(stringMatch("logical-group", obj.action[0].action[1].groupingBehavior))
        assertTrue(stringMatch("at-most-one", obj.action[0].action[1].selectionBehavior))
        assertTrue(stringMatch("First-Line Antidepressants", obj.action[0].action[1].action[0].title))
        assertTrue(stringMatch("citation", obj.action[0].action[1].action[0].documentation[0].type))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.action[0].action[1].action[0].documentation[0].document!!.extension[0].url))
        assertTrue(stringMatch("http://hl7.org/fhir/evidence-", obj.action[0].action[1].action[0].documentation[0].document!!.extension[0].valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("high", obj.action[0].action[1].action[0].documentation[0].document!!.extension[0].valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("High Quality", obj.action[0].action[1].action[0].documentation[0].document!!.extension[0].valueCodeableConcept!!.text))
        assertTrue(stringMatch("text/html", obj.action[0].action[1].action[0].documentation[0].document!!.contentType))
    }

    @Test
    fun `plandefinition-example 8 Test`() {
        val json = File("./src/test/resources/model/sample_data/plandefinition-example.json").readTextAndClose()
        val obj = mapper.fromJson(json, PlanDefinition::class.java)
        assertTrue(stringMatch("http://psychiatryonline.org/p", obj.action[0].action[1].action[0].documentation[0].document!!.url))
        assertTrue(stringMatch("Practice Guideline for the Tr", obj.action[0].action[1].action[0].documentation[0].document!!.title))
        assertTrue(stringMatch("logical-group", obj.action[0].action[1].action[0].groupingBehavior))
        assertTrue(stringMatch("at-most-one", obj.action[0].action[1].action[0].selectionBehavior))
        assertTrue(stringMatch("Selective Serotonin Reuptake ", obj.action[0].action[1].action[0].action[0].title))
        assertTrue(stringMatch("citation", obj.action[0].action[1].action[0].action[0].documentation[0].type))
        assertTrue(stringMatch("text/html", obj.action[0].action[1].action[0].action[0].documentation[0].document!!.contentType))
        assertTrue(stringMatch("http://dailymed.nlm.nih.gov/d", obj.action[0].action[1].action[0].action[0].documentation[0].document!!.url))
        assertTrue(stringMatch("National Library of Medicine.", obj.action[0].action[1].action[0].action[0].documentation[0].document!!.title))
        assertTrue(stringMatch("logical-group", obj.action[0].action[1].action[0].action[0].groupingBehavior))
        assertTrue(stringMatch("at-most-one", obj.action[0].action[1].action[0].action[0].selectionBehavior))
        assertTrue(stringMatch("citalopram 20 mg tablet 1 tab", obj.action[0].action[1].action[0].action[0].action[0].textEquivalent))
        assertTrue(stringMatch("#citalopramPrescription", obj.action[0].action[1].action[0].action[0].action[0].definition!!.reference))
        assertTrue(stringMatch("status", obj.action[0].action[1].action[0].action[0].action[0].dynamicValue[0].path))
        assertTrue(stringMatch("'draft'", obj.action[0].action[1].action[0].action[0].action[0].dynamicValue[0].expression))
        assertTrue(stringMatch("patient", obj.action[0].action[1].action[0].action[0].action[0].dynamicValue[1].path))
        assertTrue(stringMatch("SuicideRiskLogic.Patient", obj.action[0].action[1].action[0].action[0].action[0].dynamicValue[1].expression))
        assertTrue(stringMatch("prescriber", obj.action[0].action[1].action[0].action[0].action[0].dynamicValue[2].path))
        assertTrue(stringMatch("SuicideRiskLogic.Practitioner", obj.action[0].action[1].action[0].action[0].action[0].dynamicValue[2].expression))
        assertTrue(stringMatch("reasonCode", obj.action[0].action[1].action[0].action[0].action[0].dynamicValue[3].path))
        assertTrue(stringMatch("SuicideRiskLogic.RiskAssessme", obj.action[0].action[1].action[0].action[0].action[0].dynamicValue[3].expression))
        assertTrue(stringMatch("reasonReference", obj.action[0].action[1].action[0].action[0].action[0].dynamicValue[4].path))
        assertTrue(stringMatch("SuicideRiskLogic.RiskAssessme", obj.action[0].action[1].action[0].action[0].action[0].dynamicValue[4].expression))
        assertTrue(stringMatch("escitalopram 10 mg tablet 1 t", obj.action[0].action[1].action[0].action[0].action[1].textEquivalent))
        assertTrue(stringMatch("fluoxetine 20 mg capsule 1 ca", obj.action[0].action[1].action[0].action[0].action[2].textEquivalent))
        assertTrue(stringMatch("paroxetine 20 mg tablet 1 tab", obj.action[0].action[1].action[0].action[0].action[3].textEquivalent))
        assertTrue(stringMatch("sertraline 50 mg tablet 1 tab", obj.action[0].action[1].action[0].action[0].action[4].textEquivalent))
        assertTrue(stringMatch("Dopamine Norepinephrine Reupt", obj.action[0].action[1].action[0].action[1].textEquivalent))
        assertTrue(stringMatch("Serotonin Norepinephrine Reup", obj.action[0].action[1].action[0].action[2].textEquivalent))
        assertTrue(stringMatch("Norepinephrine-Serotonin Modu", obj.action[0].action[1].action[0].action[3].textEquivalent))
    }

    @Test
    fun `plandefinition-predecessor-example 9 Test`() {
        val json = File("./src/test/resources/model/sample_data/plandefinition-predecessor-example.json").readTextAndClose()
        val obj = mapper.fromJson(json, PlanDefinition::class.java)
        assertTrue(stringMatch("PlanDefinition", obj.resourceType))
        assertTrue(stringMatch("zika-virus-intervention-initi", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("http://example.org/PlanDefini", obj.url))
        assertTrue(stringMatch("official", obj.identifier[0].use))
        assertTrue(stringMatch("zika-virus-intervention", obj.identifier[0].value))
        assertTrue(stringMatch("1.0.0", obj.version))
        assertTrue(stringMatch("Example Zika Virus Interventi", obj.title))
        assertTrue(stringMatch("active", obj.status))
        assertEquals("2016-11-14", obj.date.toString())
        assertTrue(stringMatch("Zika Virus Management interve", obj.description))
        assertTrue(stringMatch("Zika Virus Management", obj.topic[0].text))
        assertTrue(stringMatch("derived-from", obj.relatedArtifact[0].type))
        assertTrue(stringMatch("https://www.cdc.gov/mmwr/volu", obj.relatedArtifact[0].url))
        assertTrue(stringMatch("successor", obj.relatedArtifact[1].type))
        assertTrue(stringMatch("PlanDefinition/zika-virus-int", obj.relatedArtifact[1].resource!!.reference))
        assertTrue(stringMatch("Library/zika-virus-interventi", obj.library[0].reference))
        assertTrue(stringMatch("Zika Virus Assessment", obj.action[0].title))
        assertTrue(stringMatch("named-event", obj.action[0].triggerDefinition[0].type))
        assertTrue(stringMatch("patient-view", obj.action[0].triggerDefinition[0].eventName))
        assertTrue(stringMatch("applicability", obj.action[0].condition[0].kind))
        assertTrue(stringMatch("Is Patient Pregnant", obj.action[0].condition[0].expression))
        assertTrue(stringMatch("applicability", obj.action[0].action[0].condition[0].kind))
        assertTrue(stringMatch("Should Administer Zika Virus ", obj.action[0].action[0].condition[0].expression))
        assertTrue(stringMatch("ActivityDefinition/administer", obj.action[0].action[0].definition!!.reference))
        assertTrue(stringMatch("applicability", obj.action[0].action[1].condition[0].kind))
        assertTrue(stringMatch("Should Order Serum + Urine rR", obj.action[0].action[1].condition[0].expression))
        assertTrue(stringMatch("ActivityDefinition/order-seru", obj.action[0].action[1].definition!!.reference))
        assertTrue(stringMatch("applicability", obj.action[0].action[2].condition[0].kind))
        assertTrue(stringMatch("Should Order Serum Zika Virus", obj.action[0].action[2].condition[0].expression))
        assertTrue(stringMatch("ActivityDefinition/order-seru", obj.action[0].action[2].definition!!.reference))
        assertTrue(stringMatch("applicability", obj.action[0].action[3].condition[0].kind))
        assertTrue(stringMatch("Should Consider IgM Antibody ", obj.action[0].action[3].condition[0].expression))
        assertTrue(stringMatch("ActivityDefinition/consider-i", obj.action[0].action[3].definition!!.reference))
        assertTrue(stringMatch("applicability", obj.action[0].action[4].condition[0].kind))
        assertTrue(stringMatch("Should Provide Mosquito Preve", obj.action[0].action[4].condition[0].expression))
        assertTrue(stringMatch("ActivityDefinition/provide-mo", obj.action[0].action[4].action[0].definition!!.reference))
        assertTrue(stringMatch("ActivityDefinition/provide-co", obj.action[0].action[4].action[1].definition!!.reference))
    }
}
