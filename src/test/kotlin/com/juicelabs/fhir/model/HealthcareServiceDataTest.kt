package com.juicelabs.fhir.model

import java.io.File
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.junit.jupiter.api.Test

class HealthcareServiceDataTest : DataTests() {
    @Test
    fun `healthcareservice-example 1003 Test`() {
        val json = File("./src/test/resources/model/sample_data/healthcareservice-example.json").readTextAndClose()
        val obj = mapper.fromJson(json, HealthcareService::class.java)
        assertTrue(stringMatch("HealthcareService", obj.resourceType))
        assertTrue(stringMatch("example", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("Location", (obj.contained[0] as Location).resourceType))
        assertTrue(stringMatch("DenBurg", (obj.contained[0] as Location).id))
        assertTrue(stringMatch("Greater Denburg area", (obj.contained[0] as Location).description))
        assertTrue(stringMatch("instance", (obj.contained[0] as Location).mode))
        assertTrue(stringMatch("area", (obj.contained[0] as Location).physicalType!!.coding[0].code))
        assertTrue(stringMatch("Area", (obj.contained[0] as Location).physicalType!!.coding[0].display))
        assertTrue(stringMatch("http://example.org/shared-ids", obj.identifier[0].system))
        assertTrue(stringMatch("HS-12", obj.identifier[0].value))
        assertEquals(true, if (obj.active != null) obj.active else false, "Field: obj.active")
        assertTrue(stringMatch("Organization/f001", obj.providedBy!!.reference))
        assertTrue(stringMatch("Burgers University Medical Ce", obj.providedBy!!.display))
        assertTrue(stringMatch("http://hl7.org/fhir/service-c", obj.category!!.coding[0].system))
        assertTrue(stringMatch("8", obj.category!!.coding[0].code))
        assertTrue(stringMatch("Counselling", obj.category!!.coding[0].display))
        assertTrue(stringMatch("Counselling", obj.category!!.text))
        assertTrue(stringMatch("http://snomed.info/sct", obj.type[0].coding[0].system))
        assertTrue(stringMatch("394913002", obj.type[0].coding[0].code))
        assertTrue(stringMatch("Psychotherapy", obj.type[0].coding[0].display))
        assertTrue(stringMatch("http://snomed.info/sct", obj.type[1].coding[0].system))
        assertTrue(stringMatch("394587001", obj.type[1].coding[0].code))
        assertTrue(stringMatch("Psychiatry", obj.type[1].coding[0].display))
        assertTrue(stringMatch("http://snomed.info/sct", obj.specialty[0].coding[0].system))
        assertTrue(stringMatch("47505003", obj.specialty[0].coding[0].code))
        assertTrue(stringMatch("Posttraumatic stress disorder", obj.specialty[0].coding[0].display))
        assertTrue(stringMatch("Location/1", obj.location[0].reference))
        assertTrue(stringMatch("Consulting psychologists and/", obj.name))
        assertTrue(stringMatch("Providing Specialist psycholo", obj.comment))
        assertTrue(stringMatch("Several assessments are requi", obj.extraDetails))
        assertTrue(stringMatch("phone", obj.telecom[0].system))
        assertTrue(stringMatch("(555) silent", obj.telecom[0].value))
        assertTrue(stringMatch("work", obj.telecom[0].use))
        assertTrue(stringMatch("email", obj.telecom[1].system))
        assertTrue(stringMatch("directaddress@example.com", obj.telecom[1].value))
        assertTrue(stringMatch("work", obj.telecom[1].use))
        assertTrue(stringMatch("#DenBurg", obj.coverageArea[0].reference))
        assertTrue(stringMatch("Greater Denburg area", obj.coverageArea[0].display))
        assertTrue(stringMatch("http://hl7.org/fhir/service-p", obj.serviceProvisionCode[0].coding[0].system))
        assertTrue(stringMatch("cost", obj.serviceProvisionCode[0].coding[0].code))
        assertTrue(stringMatch("Fees apply", obj.serviceProvisionCode[0].coding[0].display))
        assertTrue(stringMatch("DVA Required", obj.eligibility!!.coding[0].display))
        assertTrue(stringMatch("Evidence of application for D", obj.eligibilityNote))
        assertTrue(stringMatch("PTSD outreach", obj.programName[0]))
        assertTrue(stringMatch("Wheelchair access", obj.characteristic[0].coding[0].display))
        assertTrue(stringMatch("phone", obj.referralMethod[0].coding[0].code))
        assertTrue(stringMatch("Phone", obj.referralMethod[0].coding[0].display))
        assertTrue(stringMatch("fax", obj.referralMethod[1].coding[0].code))
        assertTrue(stringMatch("Fax", obj.referralMethod[1].coding[0].display))
        assertTrue(stringMatch("elec", obj.referralMethod[2].coding[0].code))
        assertTrue(stringMatch("Secure Messaging", obj.referralMethod[2].coding[0].display))
        assertTrue(stringMatch("semail", obj.referralMethod[3].coding[0].code))
        assertTrue(stringMatch("Secure Email", obj.referralMethod[3].coding[0].display))
        assertEquals(false, if (obj.appointmentRequired != null) obj.appointmentRequired else false, "Field: obj.appointmentRequired")
        assertTrue(stringMatch("wed", obj.availableTime[0].daysOfWeek[0]))
        assertEquals(true, if (obj.availableTime[0].allDay != null) obj.availableTime[0].allDay else false, "Field: obj.availableTime[0].allDay")
        assertTrue(stringMatch("mon", obj.availableTime[1].daysOfWeek[0]))
        assertTrue(stringMatch("tue", obj.availableTime[1].daysOfWeek[1]))
        assertTrue(stringMatch("thu", obj.availableTime[1].daysOfWeek[2]))
    }

    @Test
    fun `healthcareservice-example 1004 Test`() {
        val json = File("./src/test/resources/model/sample_data/healthcareservice-example.json").readTextAndClose()
        val obj = mapper.fromJson(json, HealthcareService::class.java)
        assertTrue(stringMatch("fri", obj.availableTime[1].daysOfWeek[3]))
        assertEquals("08:30:00", obj.availableTime[1].availableStartTime.toString())
        assertEquals("05:30:00", obj.availableTime[1].availableEndTime.toString())
        assertTrue(stringMatch("sat", obj.availableTime[2].daysOfWeek[0]))
        assertTrue(stringMatch("fri", obj.availableTime[2].daysOfWeek[1]))
        assertEquals("09:30:00", obj.availableTime[2].availableStartTime.toString())
        assertEquals("04:30:00", obj.availableTime[2].availableEndTime.toString())
        assertTrue(stringMatch("Christmas/Boxing Day", obj.notAvailable[0].description))
        assertEquals("2015-12-25", obj.notAvailable[0].during!!.start.toString())
        assertEquals("2015-12-26", obj.notAvailable[0].during!!.end.toString())
        assertTrue(stringMatch("New Years Day", obj.notAvailable[1].description))
        assertEquals("2016-01-01", obj.notAvailable[1].during!!.start.toString())
        assertEquals("2016-01-01", obj.notAvailable[1].during!!.end.toString())
        assertTrue(stringMatch("Reduced capacity is available", obj.availabilityExceptions))
        assertTrue(stringMatch("Endpoint/example", obj.endpoint[0].reference))
    }
}
