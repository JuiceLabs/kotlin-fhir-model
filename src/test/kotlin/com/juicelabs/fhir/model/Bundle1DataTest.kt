package com.juicelabs.fhir.model

import java.io.File
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.junit.jupiter.api.Test

class Bundle1DataTest : DataTests() {
    @Test
    fun `xds-example 364 Test`() {
        val json = File("./src/test/resources/model/sample_data/xds-example.json").readTextAndClose()
        val obj = mapper.fromJson(json, Bundle::class.java)
        assertTrue(stringMatch("Patient", (obj.entry[1].resource!! as Patient).resourceType))
        assertTrue(stringMatch("a2", (obj.entry[1].resource!! as Patient).id))
        assertEquals("2013-07-01T13:11:33Z", (obj.entry[1].resource!! as Patient).meta!!.lastUpdated.toString())
        assertTrue(stringMatch("generated", (obj.entry[1].resource!! as Patient).text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", (obj.entry[1].resource!! as Patient).text!!.div))
        assertTrue(stringMatch("usual", (obj.entry[1].resource!! as Patient).identifier[0].use))
        assertTrue(stringMatch("MRN", (obj.entry[1].resource!! as Patient).identifier[0].value))
        assertTrue(stringMatch("usual", (obj.entry[1].resource!! as Patient).name[0].use))
        assertTrue(stringMatch("DOE, John", (obj.entry[1].resource!! as Patient).name[0].text))
        assertTrue(stringMatch("Doe", (obj.entry[1].resource!! as Patient).name[0].family))
        assertTrue(stringMatch("John", (obj.entry[1].resource!! as Patient).name[0].given[0]))
        assertEquals("1956-05-27", (obj.entry[1].resource!! as Patient).birthDate.toString())
        assertTrue(stringMatch("POST", obj.entry[1].request!!.method))
        assertTrue(stringMatch("Patient", obj.entry[1].request!!.url))
        assertTrue(stringMatch("Patient?identifier=http://acm", obj.entry[1].request!!.ifNoneExist))
        assertTrue(stringMatch("http://localhost:9556/svc/fhi", obj.entry[2].fullUrl))
        assertTrue(stringMatch("Practitioner", (obj.entry[2].resource!! as Practitioner).resourceType))
        assertTrue(stringMatch("a3", (obj.entry[2].resource!! as Practitioner).id))
        assertEquals("2013-07-01T13:11:33Z", (obj.entry[2].resource!! as Practitioner).meta!!.lastUpdated.toString())
        assertTrue(stringMatch("generated", (obj.entry[2].resource!! as Practitioner).text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", (obj.entry[2].resource!! as Practitioner).text!!.div))
        assertTrue(stringMatch("usual", (obj.entry[2].resource!! as Practitioner).name[0].use))
        assertTrue(stringMatch("Smitty", (obj.entry[2].resource!! as Practitioner).name[0].family))
        assertTrue(stringMatch("Gerald", (obj.entry[2].resource!! as Practitioner).name[0].given[0]))
        assertTrue(stringMatch("POST", obj.entry[2].request!!.method))
        assertTrue(stringMatch("Practitioner", obj.entry[2].request!!.url))
        assertTrue(stringMatch("http://localhost:9556/svc/fhi", obj.entry[3].fullUrl))
        assertTrue(stringMatch("Practitioner", (obj.entry[3].resource!! as Practitioner).resourceType))
        assertTrue(stringMatch("a4", (obj.entry[3].resource!! as Practitioner).id))
        assertEquals("2013-07-01T13:11:33Z", (obj.entry[3].resource!! as Practitioner).meta!!.lastUpdated.toString())
        assertTrue(stringMatch("generated", (obj.entry[3].resource!! as Practitioner).text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", (obj.entry[3].resource!! as Practitioner).text!!.div))
        assertTrue(stringMatch("usual", (obj.entry[3].resource!! as Practitioner).name[0].use))
        assertTrue(stringMatch("Dopplemeyer", (obj.entry[3].resource!! as Practitioner).name[0].family))
        assertTrue(stringMatch("Sherry", (obj.entry[3].resource!! as Practitioner).name[0].given[0]))
        assertTrue(stringMatch("POST", obj.entry[3].request!!.method))
        assertTrue(stringMatch("Practitioner", obj.entry[3].request!!.url))
        assertTrue(stringMatch("http://localhost:9556/svc/fhi", obj.entry[4].fullUrl))
        assertTrue(stringMatch("Binary", (obj.entry[4].resource!! as Binary).resourceType))
        assertTrue(stringMatch("1e404af3-077f-4bee-b7a6-a9be9", (obj.entry[4].resource!! as Binary).id))
        assertEquals("2013-07-01T13:11:33Z", (obj.entry[4].resource!! as Binary).meta!!.lastUpdated.toString())
        assertTrue(stringMatch("text/plain", (obj.entry[4].resource!! as Binary).contentType))
        assertTrue(stringMatch("YXNkYXNkYXNkYXNkYXNk", (obj.entry[4].resource!! as Binary).content))
        assertTrue(stringMatch("POST", obj.entry[4].request!!.method))
        assertTrue(stringMatch("Binary", obj.entry[4].request!!.url))
    }

    @Test
    fun `practitioner-examples-general 365 Test`() {
        val json = File("./src/test/resources/model/sample_data/practitioner-examples-general.json").readTextAndClose()
        val obj = mapper.fromJson(json, Bundle::class.java)
        assertTrue(stringMatch("Bundle", obj.resourceType))
        assertTrue(stringMatch("3ad0687e-f477-468c-afd5-fcc2b", obj.id))
        assertEquals("2012-05-29T23:45:32Z", obj.meta!!.lastUpdated.toString())
        assertTrue(stringMatch("collection", obj.type))
        assertTrue(stringMatch("http://hl7.org/fhir/Practitio", obj.entry[0].fullUrl))
        assertTrue(stringMatch("Practitioner", (obj.entry[0].resource!! as Practitioner).resourceType))
        assertTrue(stringMatch("1", (obj.entry[0].resource!! as Practitioner).id))
        assertTrue(stringMatch("generated", (obj.entry[0].resource!! as Practitioner).text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", (obj.entry[0].resource!! as Practitioner).text!!.div))
        assertTrue(stringMatch("Beverly", (obj.entry[0].resource!! as Practitioner).name[0].family))
        assertTrue(stringMatch("Crusher", (obj.entry[0].resource!! as Practitioner).name[0].given[0]))
        assertTrue(stringMatch("Dr", (obj.entry[0].resource!! as Practitioner).name[0].prefix[0]))
        assertTrue(stringMatch("female", (obj.entry[0].resource!! as Practitioner).gender))
        assertTrue(stringMatch("http://hl7.org/fhir/Practitio", obj.entry[1].fullUrl))
        assertTrue(stringMatch("Practitioner", (obj.entry[1].resource!! as Practitioner).resourceType))
        assertTrue(stringMatch("13", (obj.entry[1].resource!! as Practitioner).id))
        assertEquals("2012-05-29T23:45:32Z", (obj.entry[1].resource!! as Practitioner).meta!!.lastUpdated.toString())
        assertTrue(stringMatch("generated", (obj.entry[1].resource!! as Practitioner).text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", (obj.entry[1].resource!! as Practitioner).text!!.div))
        assertTrue(stringMatch("http://hl7.org/fhir/v2/0203", (obj.entry[1].resource!! as Practitioner).identifier[0].type!!.coding[0].system))
        assertTrue(stringMatch("SS", (obj.entry[1].resource!! as Practitioner).identifier[0].type!!.coding[0].code))
        assertTrue(stringMatch("http://hl7.org/fhir/sid/us-ss", (obj.entry[1].resource!! as Practitioner).identifier[0].system))
        assertTrue(stringMatch("333333333", (obj.entry[1].resource!! as Practitioner).identifier[0].value))
        assertTrue(stringMatch("official", (obj.entry[1].resource!! as Practitioner).name[0].use))
        assertTrue(stringMatch("Seven", (obj.entry[1].resource!! as Practitioner).name[0].family))
        assertTrue(stringMatch("Henry", (obj.entry[1].resource!! as Practitioner).name[0].given[0]))
    }
}
