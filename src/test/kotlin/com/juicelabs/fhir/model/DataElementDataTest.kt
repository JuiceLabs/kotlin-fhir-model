package com.juicelabs.fhir.model

import java.io.File
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import org.junit.jupiter.api.Test

class DataElementDataTest : DataTests() {
    @Test
    fun `dataelement-example 563 Test`() {
        val json = File("./src/test/resources/model/sample_data/dataelement-example.json").readTextAndClose()
        val obj = mapper.fromJson(json, DataElement::class.java)
        assertTrue(stringMatch("DataElement", obj.resourceType))
        assertTrue(stringMatch("gender", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("ValueSet", (obj.contained[0] as ValueSet).resourceType))
        assertTrue(stringMatch("2179414", (obj.contained[0] as ValueSet).id))
        assertTrue(stringMatch("http://example.org/2179414", (obj.contained[0] as ValueSet).url))
        assertTrue(stringMatch("1.0", (obj.contained[0] as ValueSet).version))
        assertTrue(stringMatch("Gender Code", (obj.contained[0] as ValueSet).name))
        assertTrue(stringMatch("active", (obj.contained[0] as ValueSet).status))
        assertTrue(stringMatch("All codes representing the ge", (obj.contained[0] as ValueSet).description))
        assertTrue(stringMatch("http://example.ncit.nci.nih.g", (obj.contained[0] as ValueSet).compose!!.include[0].system))
        assertTrue(stringMatch("C17998", (obj.contained[0] as ValueSet).compose!!.include[0].concept[0].code))
        assertTrue(stringMatch("Unknown", (obj.contained[0] as ValueSet).compose!!.include[0].concept[0].display))
        assertTrue(stringMatch("C20197", (obj.contained[0] as ValueSet).compose!!.include[0].concept[1].code))
        assertTrue(stringMatch("Male", (obj.contained[0] as ValueSet).compose!!.include[0].concept[1].display))
        assertTrue(stringMatch("C16576", (obj.contained[0] as ValueSet).compose!!.include[0].concept[2].code))
        assertTrue(stringMatch("Female", (obj.contained[0] as ValueSet).compose!!.include[0].concept[2].display))
        assertTrue(stringMatch("C38046", (obj.contained[0] as ValueSet).compose!!.include[0].concept[3].code))
        assertTrue(stringMatch("Not specified", (obj.contained[0] as ValueSet).compose!!.include[0].concept[3].display))
        assertTrue(stringMatch("ValueSet", (obj.contained[1] as ValueSet).resourceType))
        assertTrue(stringMatch("2179414-permitted", (obj.contained[1] as ValueSet).id))
        assertTrue(stringMatch("active", (obj.contained[1] as ValueSet).status))
        assertTrue(stringMatch("http://example.org/fhir/21794", (obj.contained[1] as ValueSet).compose!!.include[0].system))
        assertTrue(stringMatch("ConceptMap", (obj.contained[2] as ConceptMap).resourceType))
        assertTrue(stringMatch("2179414-cm", (obj.contained[2] as ConceptMap).id))
        assertTrue(stringMatch("active", (obj.contained[2] as ConceptMap).status))
        assertTrue(stringMatch("#2179414", (obj.contained[2] as ConceptMap).sourceReference!!.reference))
        assertTrue(stringMatch("#2179414-permitted", (obj.contained[2] as ConceptMap).targetReference!!.reference))
        assertTrue(stringMatch("http://example.org/fhir/21794", (obj.contained[2] as ConceptMap).group[0].source))
        assertTrue(stringMatch("http://example.org/fhir/21794", (obj.contained[2] as ConceptMap).group[0].target))
        assertTrue(stringMatch("C17998", (obj.contained[2] as ConceptMap).group[0].element[0].code))
        assertTrue(stringMatch("0", (obj.contained[2] as ConceptMap).group[0].element[0].target[0].code))
        assertTrue(stringMatch("equal", (obj.contained[2] as ConceptMap).group[0].element[0].target[0].equivalence))
        assertTrue(stringMatch("C20197", (obj.contained[2] as ConceptMap).group[0].element[1].code))
        assertTrue(stringMatch("1", (obj.contained[2] as ConceptMap).group[0].element[1].target[0].code))
        assertTrue(stringMatch("equal", (obj.contained[2] as ConceptMap).group[0].element[1].target[0].equivalence))
        assertTrue(stringMatch("C16576", (obj.contained[2] as ConceptMap).group[0].element[2].code))
        assertTrue(stringMatch("2", (obj.contained[2] as ConceptMap).group[0].element[2].target[0].code))
        assertTrue(stringMatch("equal", (obj.contained[2] as ConceptMap).group[0].element[2].target[0].equivalence))
        assertTrue(stringMatch("C38046", (obj.contained[2] as ConceptMap).group[0].element[3].code))
        assertTrue(stringMatch("3", (obj.contained[2] as ConceptMap).group[0].element[3].target[0].code))
        assertTrue(stringMatch("equal", (obj.contained[2] as ConceptMap).group[0].element[3].target[0].equivalence))
        assertTrue(stringMatch("2179650", obj.identifier[0].value))
        assertTrue(stringMatch("1.0", obj.version))
        assertTrue(stringMatch("active", obj.status))
        assertTrue(stringMatch("2016-01-01", obj.date))
        assertTrue(stringMatch("DCP", obj.publisher))
        assertTrue(stringMatch("Gender Code", obj.name))
        assertTrue(stringMatch("Administrative gender", obj.title))
        assertTrue(stringMatch("urn:iso:std:iso:3166", obj.jurisdiction[0].coding[0].system))
        assertTrue(stringMatch("US", obj.jurisdiction[0].coding[0].code))
        assertTrue(stringMatch("fhir", obj.mapping[0].identity))
        assertTrue(stringMatch("http://hl7.org/fhir/api", obj.mapping[0].uri))
        assertTrue(stringMatch("Fast Healthcare Interoperable", obj.mapping[0].name))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.element[0].extension[0].url))
        assertEquals(1, obj.element[0].extension[0].valueInteger)
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.element[0].extension[1].url))
        assertTrue(stringMatch("Gender", obj.element[0].extension[1].valueString))
        assertTrue(stringMatch("Gender", obj.element[0].path))
        assertTrue(stringMatch("http://loinc.org", obj.element[0].code[0].system))
        assertTrue(stringMatch("46098-0", obj.element[0].code[0].code))
        assertTrue(stringMatch("Sex", obj.element[0].code[0].display))
        assertTrue(stringMatch("The code representing the gen", obj.element[0].definition))
        assertTrue(stringMatch("CodeableConcept", obj.element[0].type[0].code))
        assertEquals(13, obj.element[0].maxLength)
        assertTrue(stringMatch("required", obj.element[0].binding!!.strength))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.element[0].binding!!.valueSetReference!!.extension[0].url))
        assertTrue(stringMatch("#2179414-permitted", obj.element[0].binding!!.valueSetReference!!.extension[0].valueReference!!.reference))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.element[0].binding!!.valueSetReference!!.extension[1].url))
        assertTrue(stringMatch("#2179414-cm", obj.element[0].binding!!.valueSetReference!!.extension[1].valueReference!!.reference))
        assertTrue(stringMatch("#2179414", obj.element[0].binding!!.valueSetReference!!.reference))
        assertTrue(stringMatch("fhir", obj.element[0].mapping[0].identity))
        assertTrue(stringMatch("application/xquery", obj.element[0].mapping[0].language))
        assertTrue(stringMatch("return f:/Patient/f:gender", obj.element[0].mapping[0].map))
    }

    fun `dataelement-example Init`(obj: Bundle) {
    }

    @Test
    fun `dataelement-labtestmaster-example 564 Test`() {
        val json = File("./src/test/resources/model/sample_data/dataelement-labtestmaster-example.json").readTextAndClose()
        val obj = mapper.fromJson(json, DataElement::class.java)
        assertTrue(stringMatch("DataElement", obj.resourceType))
        assertTrue(stringMatch("prothrombin", obj.id))
        assertTrue(stringMatch("generated", obj.text!!.status))
        assertTrue(stringMatch("<div xmlns=\"http://www.w3.org", obj.text!!.div))
        assertTrue(stringMatch("Prothrombin Time, PT", obj.identifier[0].type!!.text))
        assertTrue(stringMatch("http://www.CenturyHospital/La", obj.identifier[0].system))
        assertTrue(stringMatch("11", obj.identifier[0].value))
        assertTrue(stringMatch("2011-05-19", obj.identifier[0].period!!.start))
        assertTrue(stringMatch("Century Hospital Laboratory", obj.identifier[0].assigner!!.display))
        assertTrue(stringMatch("active", obj.status))
        assertTrue(stringMatch("Prothrombin Time", obj.name))
        assertTrue(stringMatch("loinc", obj.mapping[0].identity))
        assertTrue(stringMatch("http://loinc.org/", obj.mapping[0].uri))
        assertTrue(stringMatch("LOINC", obj.mapping[0].name))
        assertTrue(stringMatch("Version 2.48 or later", obj.mapping[0].comment))
        assertTrue(stringMatch("http://hl7.org/fhir/Structure", obj.element[0].extension[0].url))
        assertTrue(stringMatch("http://unitsofmeasure.org", obj.element[0].extension[0].valueCodeableConcept!!.coding[0].system))
        assertTrue(stringMatch("1.9", obj.element[0].extension[0].valueCodeableConcept!!.coding[0].version))
        assertTrue(stringMatch("s", obj.element[0].extension[0].valueCodeableConcept!!.coding[0].code))
        assertTrue(stringMatch("second", obj.element[0].extension[0].valueCodeableConcept!!.coding[0].display))
        assertEquals(true, if (obj.element[0].extension[0].valueCodeableConcept!!.coding[0].userSelected != null) obj.element[0].extension[0].valueCodeableConcept!!.coding[0].userSelected else false, "Field: obj.element[0].extension[0].valueCodeableConcept!!.coding[0].userSelected")
        assertTrue(stringMatch("second", obj.element[0].extension[0].valueCodeableConcept!!.text))
        assertTrue(stringMatch("prothrombin", obj.element[0].path))
        assertTrue(stringMatch("The PT test evaluates the ext", obj.element[0].definition))
        assertTrue(stringMatch("Used to screen the integrity ", obj.element[0].comment))
        assertTrue(stringMatch("This test is orderable. A pla", obj.element[0].requirements))
        assertTrue(stringMatch("Protime, PT", obj.element[0].alias[0]))
        assertTrue(stringMatch("decimal", obj.element[0].type[0].code))
        assertTrue(stringMatch("Simple", obj.element[0].example[0].label))
        assertTrue(stringMatch("%.2f".format(10.0f), "%.2f".format(obj.element[0].example[0].valueDecimal)))
        assertTrue(stringMatch("loinc", obj.element[0].mapping[0].identity))
        assertTrue(stringMatch("5964-2", obj.element[0].mapping[0].map))
    }

    fun `dataelement-labtestmaster-example Init`(obj: Bundle) {
    }
}
